
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080029dc  080029dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002a0c  08002a0c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a0c  08002a0c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  08002a88  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002a88  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c222  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208d  00000000  00000000  0002c2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e63  00000000  00000000  0002f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bead  00000000  00000000  000475fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f02  00000000  00000000  000534a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d93aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf8  00000000  00000000  000d9400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080029c4 	.word	0x080029c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080029c4 	.word	0x080029c4

0800014c <Button_ReadInput>:
GPIO_PinState previous_state[NUMBER_OF_BUTTON];
GPIO_PinState current_state[NUMBER_OF_BUTTON];

int button_counter_id[NUMBER_OF_BUTTON];

void Button_ReadInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e067      	b.n	8000228 <Button_ReadInput+0xdc>
		previous_state[button] = current_state[button];
 8000158:	4a37      	ldr	r2, [pc, #220]	; (8000238 <Button_ReadInput+0xec>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a36      	ldr	r2, [pc, #216]	; (800023c <Button_ReadInput+0xf0>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		current_state[button] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << button);
 800016a:	2201      	movs	r2, #1
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	fa02 f303 	lsl.w	r3, r2, r3
 8000172:	b29b      	uxth	r3, r3
 8000174:	4619      	mov	r1, r3
 8000176:	4832      	ldr	r0, [pc, #200]	; (8000240 <Button_ReadInput+0xf4>)
 8000178:	f001 fb72 	bl	8001860 <HAL_GPIO_ReadPin>
 800017c:	4603      	mov	r3, r0
 800017e:	4619      	mov	r1, r3
 8000180:	4a2d      	ldr	r2, [pc, #180]	; (8000238 <Button_ReadInput+0xec>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	460a      	mov	r2, r1
 8000188:	701a      	strb	r2, [r3, #0]

		//Button state is difference
		if(previous_state[button] == current_state[button]){
 800018a:	4a2c      	ldr	r2, [pc, #176]	; (800023c <Button_ReadInput+0xf0>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	781a      	ldrb	r2, [r3, #0]
 8000192:	4929      	ldr	r1, [pc, #164]	; (8000238 <Button_ReadInput+0xec>)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	440b      	add	r3, r1
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	429a      	cmp	r2, r3
 800019c:	d141      	bne.n	8000222 <Button_ReadInput+0xd6>
			//Switch state
			if(current_state[button] != button_state[button]){
 800019e:	4a26      	ldr	r2, [pc, #152]	; (8000238 <Button_ReadInput+0xec>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	781a      	ldrb	r2, [r3, #0]
 80001a6:	4927      	ldr	r1, [pc, #156]	; (8000244 <Button_ReadInput+0xf8>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	440b      	add	r3, r1
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d01b      	beq.n	80001ea <Button_ReadInput+0x9e>
				button_state[button] = current_state[button];
 80001b2:	4a21      	ldr	r2, [pc, #132]	; (8000238 <Button_ReadInput+0xec>)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	4413      	add	r3, r2
 80001b8:	7819      	ldrb	r1, [r3, #0]
 80001ba:	4a22      	ldr	r2, [pc, #136]	; (8000244 <Button_ReadInput+0xf8>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	4413      	add	r3, r2
 80001c0:	460a      	mov	r2, r1
 80001c2:	701a      	strb	r2, [r3, #0]
				//Switch to pressed state
				if(button_state[button] == BUTTON_PIN_STATE_PRESSED){
 80001c4:	4a1f      	ldr	r2, [pc, #124]	; (8000244 <Button_ReadInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d128      	bne.n	8000222 <Button_ReadInput+0xd6>
					//Start counting for hold state;
					SoftwareTimer_ResetFlag(button_counter_id[button]);
 80001d0:	4a1d      	ldr	r2, [pc, #116]	; (8000248 <Button_ReadInput+0xfc>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fdf1 	bl	8000dc0 <SoftwareTimer_ResetFlag>
					interface_button_state[button] = PRESSED;
 80001de:	4a1b      	ldr	r2, [pc, #108]	; (800024c <Button_ReadInput+0x100>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4413      	add	r3, r2
 80001e4:	2201      	movs	r2, #1
 80001e6:	701a      	strb	r2, [r3, #0]
 80001e8:	e01b      	b.n	8000222 <Button_ReadInput+0xd6>
				}
			}
			//State is the same
			else{
				//Timer is up and the button_state is pressed
				if(current_state[button] == BUTTON_PIN_STATE_PRESSED &&	SoftwareTimer_GetFlag(button_counter_id[button]) == FLAG_ON){
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <Button_ReadInput+0xec>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4413      	add	r3, r2
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d115      	bne.n	8000222 <Button_ReadInput+0xd6>
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <Button_ReadInput+0xfc>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fdce 	bl	8000da0 <SoftwareTimer_GetFlag>
 8000204:	4603      	mov	r3, r0
 8000206:	2b01      	cmp	r3, #1
 8000208:	d10b      	bne.n	8000222 <Button_ReadInput+0xd6>
					SoftwareTimer_ResetFlag(button_counter_id[button]);
 800020a:	4a0f      	ldr	r2, [pc, #60]	; (8000248 <Button_ReadInput+0xfc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fdd4 	bl	8000dc0 <SoftwareTimer_ResetFlag>
					interface_button_state[button] = HOLD;
 8000218:	4a0c      	ldr	r2, [pc, #48]	; (800024c <Button_ReadInput+0x100>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	2202      	movs	r2, #2
 8000220:	701a      	strb	r2, [r3, #0]
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b02      	cmp	r3, #2
 800022c:	dd94      	ble.n	8000158 <Button_ReadInput+0xc>
				}
			}
		}
	}
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000100 	.word	0x20000100
 800023c:	200000f0 	.word	0x200000f0
 8000240:	40010c00 	.word	0x40010c00
 8000244:	20000104 	.word	0x20000104
 8000248:	200000f4 	.word	0x200000f4
 800024c:	20000108 	.word	0x20000108

08000250 <Button_TimerInit>:

void Button_TimerInit(){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	e00b      	b.n	8000274 <Button_TimerInit+0x24>
		button_counter_id[button] = SoftwareTimer_AddNewTimer(KEY_PRESS_TIME);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f000 fd6a 	bl	8000d38 <SoftwareTimer_AddNewTimer>
 8000264:	4602      	mov	r2, r0
 8000266:	4907      	ldr	r1, [pc, #28]	; (8000284 <Button_TimerInit+0x34>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	ddf0      	ble.n	800025c <Button_TimerInit+0xc>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	200000f4 	.word	0x200000f4

08000288 <Button_GetButtonState>:

ButtonState_t Button_GetButtonState(uint8_t index){
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
	if(index < NUMBER_OF_BUTTON && index >= 0){
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b02      	cmp	r3, #2
 8000296:	d80c      	bhi.n	80002b2 <Button_GetButtonState+0x2a>
		ButtonState_t state = interface_button_state[index];
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <Button_GetButtonState+0x38>)
 800029c:	5cd3      	ldrb	r3, [r2, r3]
 800029e:	73fb      	strb	r3, [r7, #15]
		if(state != RELEASE){
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <Button_GetButtonState+0x26>
			interface_button_state[index] = RELEASE;
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <Button_GetButtonState+0x38>)
 80002aa:	2100      	movs	r1, #0
 80002ac:	54d1      	strb	r1, [r2, r3]
		}
		return state;
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	e000      	b.n	80002b4 <Button_GetButtonState+0x2c>
	}
	else{
		return ERROR_STATE;
 80002b2:	2303      	movs	r3, #3
	}

}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000108 	.word	0x20000108

080002c4 <FiniteStateMachine_Run>:
uint8_t modifiable_base_counter;

uint8_t counter_A;
uint8_t counter_B;

void FiniteStateMachine_Run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch(machine_state){
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	f200 80cb 	bhi.w	8000468 <FiniteStateMachine_Run+0x1a4>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <FiniteStateMachine_Run+0x14>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	080002f3 	.word	0x080002f3
 80002e0:	0800036f 	.word	0x0800036f
 80002e4:	080003d7 	.word	0x080003d7
 80002e8:	0800043f 	.word	0x0800043f
	case FSM_INIT:
		FiniteStateMachine_Init();
 80002ec:	f000 f91a 	bl	8000524 <FiniteStateMachine_Init>
		break;
 80002f0:	e0c9      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>

	case FSM_NORMAL:
		if(SoftwareTimer_GetFlag(trafic_light_timer_id) == FLAG_ON){
 80002f2:	4b81      	ldr	r3, [pc, #516]	; (80004f8 <FiniteStateMachine_Run+0x234>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fd52 	bl	8000da0 <SoftwareTimer_GetFlag>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d106      	bne.n	8000310 <FiniteStateMachine_Run+0x4c>
			SoftwareTimer_ResetFlag(trafic_light_timer_id);
 8000302:	4b7d      	ldr	r3, [pc, #500]	; (80004f8 <FiniteStateMachine_Run+0x234>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fd5a 	bl	8000dc0 <SoftwareTimer_ResetFlag>
			FiniteStateMachine_Normal();
 800030c:	f000 f944 	bl	8000598 <FiniteStateMachine_Normal>
		}

		//Wait for button input to change state
		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ffb9 	bl	8000288 <Button_GetButtonState>
 8000316:	4603      	mov	r3, r0
 8000318:	2b01      	cmp	r3, #1
 800031a:	f040 80a7 	bne.w	800046c <FiniteStateMachine_Run+0x1a8>
			machine_state = FSM_MODIFY_RED;
 800031e:	4b75      	ldr	r3, [pc, #468]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 8000320:	2202      	movs	r2, #2
 8000322:	701a      	strb	r2, [r3, #0]
			modifiable_base_counter = base_counter_red;
 8000324:	4b75      	ldr	r3, [pc, #468]	; (80004fc <FiniteStateMachine_Run+0x238>)
 8000326:	781a      	ldrb	r2, [r3, #0]
 8000328:	4b75      	ldr	r3, [pc, #468]	; (8000500 <FiniteStateMachine_Run+0x23c>)
 800032a:	701a      	strb	r2, [r3, #0]
			led_buffer[0] = 0;
 800032c:	4b75      	ldr	r3, [pc, #468]	; (8000504 <FiniteStateMachine_Run+0x240>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 1;
 8000332:	4b74      	ldr	r3, [pc, #464]	; (8000504 <FiniteStateMachine_Run+0x240>)
 8000334:	2201      	movs	r2, #1
 8000336:	705a      	strb	r2, [r3, #1]
			led_buffer[2] = base_counter_red / 10;
 8000338:	4b70      	ldr	r3, [pc, #448]	; (80004fc <FiniteStateMachine_Run+0x238>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4a72      	ldr	r2, [pc, #456]	; (8000508 <FiniteStateMachine_Run+0x244>)
 800033e:	fba2 2303 	umull	r2, r3, r2, r3
 8000342:	08db      	lsrs	r3, r3, #3
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4b6f      	ldr	r3, [pc, #444]	; (8000504 <FiniteStateMachine_Run+0x240>)
 8000348:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = base_counter_red - led_buffer[2] * 10;
 800034a:	4b6e      	ldr	r3, [pc, #440]	; (8000504 <FiniteStateMachine_Run+0x240>)
 800034c:	789b      	ldrb	r3, [r3, #2]
 800034e:	461a      	mov	r2, r3
 8000350:	0152      	lsls	r2, r2, #5
 8000352:	1ad2      	subs	r2, r2, r3
 8000354:	0092      	lsls	r2, r2, #2
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b67      	ldr	r3, [pc, #412]	; (80004fc <FiniteStateMachine_Run+0x238>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4413      	add	r3, r2
 8000362:	b2da      	uxtb	r2, r3
 8000364:	4b67      	ldr	r3, [pc, #412]	; (8000504 <FiniteStateMachine_Run+0x240>)
 8000366:	70da      	strb	r2, [r3, #3]
			ClearTraficLight();
 8000368:	f000 fc2a 	bl	8000bc0 <ClearTraficLight>
		}
		break;
 800036c:	e07e      	b.n	800046c <FiniteStateMachine_Run+0x1a8>

	case FSM_MODIFY_RED:
		FiniteStateMachine_ModifyRed();
 800036e:	f000 f9a7 	bl	80006c0 <FiniteStateMachine_ModifyRed>
		//Check if set_button is pressed
		if(machine_state == FSM_INIT)
 8000372:	4b60      	ldr	r3, [pc, #384]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d07a      	beq.n	8000470 <FiniteStateMachine_Run+0x1ac>
			break;

		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ff84 	bl	8000288 <Button_GetButtonState>
 8000380:	4603      	mov	r3, r0
 8000382:	2b01      	cmp	r3, #1
 8000384:	d176      	bne.n	8000474 <FiniteStateMachine_Run+0x1b0>
			machine_state = FSM_MODIFY_YELLOW;
 8000386:	4b5b      	ldr	r3, [pc, #364]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 8000388:	2203      	movs	r2, #3
 800038a:	701a      	strb	r2, [r3, #0]
			modifiable_base_counter = base_counter_yellow;
 800038c:	4b5f      	ldr	r3, [pc, #380]	; (800050c <FiniteStateMachine_Run+0x248>)
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b5b      	ldr	r3, [pc, #364]	; (8000500 <FiniteStateMachine_Run+0x23c>)
 8000392:	701a      	strb	r2, [r3, #0]
			led_buffer[0] = 0;
 8000394:	4b5b      	ldr	r3, [pc, #364]	; (8000504 <FiniteStateMachine_Run+0x240>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 2;
 800039a:	4b5a      	ldr	r3, [pc, #360]	; (8000504 <FiniteStateMachine_Run+0x240>)
 800039c:	2202      	movs	r2, #2
 800039e:	705a      	strb	r2, [r3, #1]
			led_buffer[2] = base_counter_yellow / 10;
 80003a0:	4b5a      	ldr	r3, [pc, #360]	; (800050c <FiniteStateMachine_Run+0x248>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	4a58      	ldr	r2, [pc, #352]	; (8000508 <FiniteStateMachine_Run+0x244>)
 80003a6:	fba2 2303 	umull	r2, r3, r2, r3
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b55      	ldr	r3, [pc, #340]	; (8000504 <FiniteStateMachine_Run+0x240>)
 80003b0:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = base_counter_yellow - led_buffer[2] * 10;
 80003b2:	4b54      	ldr	r3, [pc, #336]	; (8000504 <FiniteStateMachine_Run+0x240>)
 80003b4:	789b      	ldrb	r3, [r3, #2]
 80003b6:	461a      	mov	r2, r3
 80003b8:	0152      	lsls	r2, r2, #5
 80003ba:	1ad2      	subs	r2, r2, r3
 80003bc:	0092      	lsls	r2, r2, #2
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b51      	ldr	r3, [pc, #324]	; (800050c <FiniteStateMachine_Run+0x248>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4413      	add	r3, r2
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b4d      	ldr	r3, [pc, #308]	; (8000504 <FiniteStateMachine_Run+0x240>)
 80003ce:	70da      	strb	r2, [r3, #3]
			ClearTraficLight();
 80003d0:	f000 fbf6 	bl	8000bc0 <ClearTraficLight>
		}
		break;
 80003d4:	e04e      	b.n	8000474 <FiniteStateMachine_Run+0x1b0>

	case FSM_MODIFY_YELLOW:
		FiniteStateMachine_ModifyYellow();
 80003d6:	f000 f98f 	bl	80006f8 <FiniteStateMachine_ModifyYellow>
		//Check if set_button is pressed
		if(machine_state == FSM_INIT)
 80003da:	4b46      	ldr	r3, [pc, #280]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d04a      	beq.n	8000478 <FiniteStateMachine_Run+0x1b4>
			break;

		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff ff50 	bl	8000288 <Button_GetButtonState>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d146      	bne.n	800047c <FiniteStateMachine_Run+0x1b8>
			machine_state = FSM_MODIFY_GREEN;
 80003ee:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 80003f0:	2204      	movs	r2, #4
 80003f2:	701a      	strb	r2, [r3, #0]
			modifiable_base_counter = base_counter_green;
 80003f4:	4b46      	ldr	r3, [pc, #280]	; (8000510 <FiniteStateMachine_Run+0x24c>)
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	4b41      	ldr	r3, [pc, #260]	; (8000500 <FiniteStateMachine_Run+0x23c>)
 80003fa:	701a      	strb	r2, [r3, #0]
			led_buffer[0] = 0;
 80003fc:	4b41      	ldr	r3, [pc, #260]	; (8000504 <FiniteStateMachine_Run+0x240>)
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 3;
 8000402:	4b40      	ldr	r3, [pc, #256]	; (8000504 <FiniteStateMachine_Run+0x240>)
 8000404:	2203      	movs	r2, #3
 8000406:	705a      	strb	r2, [r3, #1]
			led_buffer[2] = base_counter_green / 10;
 8000408:	4b41      	ldr	r3, [pc, #260]	; (8000510 <FiniteStateMachine_Run+0x24c>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4a3e      	ldr	r2, [pc, #248]	; (8000508 <FiniteStateMachine_Run+0x244>)
 800040e:	fba2 2303 	umull	r2, r3, r2, r3
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <FiniteStateMachine_Run+0x240>)
 8000418:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = base_counter_green - led_buffer[2] * 10;
 800041a:	4b3a      	ldr	r3, [pc, #232]	; (8000504 <FiniteStateMachine_Run+0x240>)
 800041c:	789b      	ldrb	r3, [r3, #2]
 800041e:	461a      	mov	r2, r3
 8000420:	0152      	lsls	r2, r2, #5
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b38      	ldr	r3, [pc, #224]	; (8000510 <FiniteStateMachine_Run+0x24c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4413      	add	r3, r2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b33      	ldr	r3, [pc, #204]	; (8000504 <FiniteStateMachine_Run+0x240>)
 8000436:	70da      	strb	r2, [r3, #3]
			ClearTraficLight();
 8000438:	f000 fbc2 	bl	8000bc0 <ClearTraficLight>
		}
		break;
 800043c:	e01e      	b.n	800047c <FiniteStateMachine_Run+0x1b8>
	case FSM_MODIFY_GREEN:
		FiniteStateMachine_ModifyGreen();
 800043e:	f000 f977 	bl	8000730 <FiniteStateMachine_ModifyGreen>
		//Check if set_button is pressed
		if(machine_state == FSM_INIT)
 8000442:	4b2c      	ldr	r3, [pc, #176]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d01a      	beq.n	8000480 <FiniteStateMachine_Run+0x1bc>
			break;

		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff ff1c 	bl	8000288 <Button_GetButtonState>
 8000450:	4603      	mov	r3, r0
 8000452:	2b01      	cmp	r3, #1
 8000454:	d116      	bne.n	8000484 <FiniteStateMachine_Run+0x1c0>
			machine_state = FSM_NORMAL;
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <FiniteStateMachine_Run+0x230>)
 8000458:	2201      	movs	r2, #1
 800045a:	701a      	strb	r2, [r3, #0]
			trafic_light_state = TLS_INIT;
 800045c:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <FiniteStateMachine_Run+0x250>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
			ClearTraficLight();
 8000462:	f000 fbad 	bl	8000bc0 <ClearTraficLight>
		}
		break;
 8000466:	e00d      	b.n	8000484 <FiniteStateMachine_Run+0x1c0>

	default:
		break;
 8000468:	bf00      	nop
 800046a:	e00c      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>
		break;
 800046c:	bf00      	nop
 800046e:	e00a      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>
			break;
 8000470:	bf00      	nop
 8000472:	e008      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>
		break;
 8000474:	bf00      	nop
 8000476:	e006      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>
			break;
 8000478:	bf00      	nop
 800047a:	e004      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>
		break;
 800047c:	bf00      	nop
 800047e:	e002      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>
			break;
 8000480:	bf00      	nop
 8000482:	e000      	b.n	8000486 <FiniteStateMachine_Run+0x1c2>
		break;
 8000484:	bf00      	nop
	}

	//LED Blinking for all state
	if(SoftwareTimer_GetFlag(blinking_timer_id) == FLAG_ON){
 8000486:	4b24      	ldr	r3, [pc, #144]	; (8000518 <FiniteStateMachine_Run+0x254>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fc88 	bl	8000da0 <SoftwareTimer_GetFlag>
 8000490:	4603      	mov	r3, r0
 8000492:	2b01      	cmp	r3, #1
 8000494:	d106      	bne.n	80004a4 <FiniteStateMachine_Run+0x1e0>
		SoftwareTimer_ResetFlag(blinking_timer_id);
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <FiniteStateMachine_Run+0x254>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fc90 	bl	8000dc0 <SoftwareTimer_ResetFlag>
		FiniteStateMachine_ToggleLight();
 80004a0:	f000 f9a0 	bl	80007e4 <FiniteStateMachine_ToggleLight>
	}

	//7-Segments LED Display for all state
	if(SoftwareTimer_GetFlag(led_display_timer_id) == FLAG_ON){
 80004a4:	4b1d      	ldr	r3, [pc, #116]	; (800051c <FiniteStateMachine_Run+0x258>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fc79 	bl	8000da0 <SoftwareTimer_GetFlag>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d11c      	bne.n	80004ee <FiniteStateMachine_Run+0x22a>
		SoftwareTimer_ResetFlag(led_display_timer_id);
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <FiniteStateMachine_Run+0x258>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fc81 	bl	8000dc0 <SoftwareTimer_ResetFlag>
		LEDdisplay_DisplayNumber(led_buffer[en_pin], en_pin);
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <FiniteStateMachine_Run+0x25c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <FiniteStateMachine_Run+0x240>)
 80004c6:	5c9b      	ldrb	r3, [r3, r2]
 80004c8:	4a15      	ldr	r2, [pc, #84]	; (8000520 <FiniteStateMachine_Run+0x25c>)
 80004ca:	7812      	ldrb	r2, [r2, #0]
 80004cc:	4611      	mov	r1, r2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fa3e 	bl	8000950 <LEDdisplay_DisplayNumber>
		++en_pin;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <FiniteStateMachine_Run+0x25c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <FiniteStateMachine_Run+0x25c>)
 80004de:	701a      	strb	r2, [r3, #0]
		if(en_pin >= NUMBER_OF_EN_PIN){
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <FiniteStateMachine_Run+0x25c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d902      	bls.n	80004ee <FiniteStateMachine_Run+0x22a>
			en_pin = 0;
 80004e8:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <FiniteStateMachine_Run+0x25c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	2000011c 	.word	0x2000011c
 80004fc:	20000000 	.word	0x20000000
 8000500:	2000010d 	.word	0x2000010d
 8000504:	20000094 	.word	0x20000094
 8000508:	cccccccd 	.word	0xcccccccd
 800050c:	20000001 	.word	0x20000001
 8000510:	20000002 	.word	0x20000002
 8000514:	20000091 	.word	0x20000091
 8000518:	20000114 	.word	0x20000114
 800051c:	20000110 	.word	0x20000110
 8000520:	20000092 	.word	0x20000092

08000524 <FiniteStateMachine_Init>:

void FiniteStateMachine_Init(){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	SoftwareTimer_Init();
 8000528:	f000 fbea 	bl	8000d00 <SoftwareTimer_Init>
	Button_TimerInit();
 800052c:	f7ff fe90 	bl	8000250 <Button_TimerInit>

	blinking_timer_id = SoftwareTimer_AddNewTimer(500);
 8000530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000534:	f000 fc00 	bl	8000d38 <SoftwareTimer_AddNewTimer>
 8000538:	4603      	mov	r3, r0
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <FiniteStateMachine_Init+0x58>)
 800053c:	6013      	str	r3, [r2, #0]
	led_display_timer_id = SoftwareTimer_AddNewTimer(125);
 800053e:	207d      	movs	r0, #125	; 0x7d
 8000540:	f000 fbfa 	bl	8000d38 <SoftwareTimer_AddNewTimer>
 8000544:	4603      	mov	r3, r0
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <FiniteStateMachine_Init+0x5c>)
 8000548:	6013      	str	r3, [r2, #0]
	trafic_light_timer_id = SoftwareTimer_AddNewTimer(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054e:	f000 fbf3 	bl	8000d38 <SoftwareTimer_AddNewTimer>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <FiniteStateMachine_Init+0x60>)
 8000556:	6013      	str	r3, [r2, #0]
	modify_restrict_timer_id = SoftwareTimer_AddNewTimer(250);
 8000558:	20fa      	movs	r0, #250	; 0xfa
 800055a:	f000 fbed 	bl	8000d38 <SoftwareTimer_AddNewTimer>
 800055e:	4603      	mov	r3, r0
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <FiniteStateMachine_Init+0x64>)
 8000562:	6013      	str	r3, [r2, #0]

	machine_state = FSM_NORMAL;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <FiniteStateMachine_Init+0x68>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
	trafic_light_state = TLS_INIT;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <FiniteStateMachine_Init+0x6c>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	en_pin = 0;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <FiniteStateMachine_Init+0x70>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000114 	.word	0x20000114
 8000580:	20000110 	.word	0x20000110
 8000584:	2000011c 	.word	0x2000011c
 8000588:	20000118 	.word	0x20000118
 800058c:	20000090 	.word	0x20000090
 8000590:	20000091 	.word	0x20000091
 8000594:	20000092 	.word	0x20000092

08000598 <FiniteStateMachine_Normal>:

void FiniteStateMachine_Normal(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	switch(trafic_light_state){
 800059c:	4b42      	ldr	r3, [pc, #264]	; (80006a8 <FiniteStateMachine_Normal+0x110>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d868      	bhi.n	8000676 <FiniteStateMachine_Normal+0xde>
 80005a4:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <FiniteStateMachine_Normal+0x14>)
 80005a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005aa:	bf00      	nop
 80005ac:	080005c1 	.word	0x080005c1
 80005b0:	080005df 	.word	0x080005df
 80005b4:	080005fd 	.word	0x080005fd
 80005b8:	0800062b 	.word	0x0800062b
 80005bc:	08000649 	.word	0x08000649
	case TLS_INIT:
		if(1){
			trafic_light_state = TLS_GREEN_RED;
 80005c0:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <FiniteStateMachine_Normal+0x110>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_green;
 80005c6:	4b39      	ldr	r3, [pc, #228]	; (80006ac <FiniteStateMachine_Normal+0x114>)
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 80005cc:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_red;
 80005ce:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <FiniteStateMachine_Normal+0x11c>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	4b39      	ldr	r3, [pc, #228]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 80005d4:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_GREEN_RED);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 faa0 	bl	8000b1c <DisplayTraficLight>
		}
		break;
 80005dc:	e054      	b.n	8000688 <FiniteStateMachine_Normal+0xf0>

	case TLS_GREEN_RED:
		if(counter_A <= 0){
 80005de:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d149      	bne.n	800067a <FiniteStateMachine_Normal+0xe2>
			trafic_light_state = TLS_YELLOW_RED;
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <FiniteStateMachine_Normal+0x110>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_yellow;
 80005ec:	4b33      	ldr	r3, [pc, #204]	; (80006bc <FiniteStateMachine_Normal+0x124>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 80005f2:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_YELLOW_RED);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f000 fa91 	bl	8000b1c <DisplayTraficLight>
		}
		break;
 80005fa:	e03e      	b.n	800067a <FiniteStateMachine_Normal+0xe2>

	case TLS_YELLOW_RED:
		if(counter_A <= 0 && counter_B <= 0){
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d13c      	bne.n	800067e <FiniteStateMachine_Normal+0xe6>
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d138      	bne.n	800067e <FiniteStateMachine_Normal+0xe6>
			trafic_light_state = TLS_RED_GREEN;
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <FiniteStateMachine_Normal+0x110>)
 800060e:	2203      	movs	r2, #3
 8000610:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_red;
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <FiniteStateMachine_Normal+0x11c>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 8000618:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_green;
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <FiniteStateMachine_Normal+0x114>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 8000620:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_RED_GREEN);
 8000622:	2003      	movs	r0, #3
 8000624:	f000 fa7a 	bl	8000b1c <DisplayTraficLight>
		}
		break;
 8000628:	e029      	b.n	800067e <FiniteStateMachine_Normal+0xe6>

	case TLS_RED_GREEN:
		if(counter_B <= 0){
 800062a:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d127      	bne.n	8000682 <FiniteStateMachine_Normal+0xea>
			trafic_light_state = TLS_RED_YELLOW;
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <FiniteStateMachine_Normal+0x110>)
 8000634:	2204      	movs	r2, #4
 8000636:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_yellow;
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <FiniteStateMachine_Normal+0x124>)
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 800063e:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_RED_YELLOW);
 8000640:	2004      	movs	r0, #4
 8000642:	f000 fa6b 	bl	8000b1c <DisplayTraficLight>
		}
		break;
 8000646:	e01c      	b.n	8000682 <FiniteStateMachine_Normal+0xea>

	case TLS_RED_YELLOW:
		if(counter_A <= 0 && counter_B <= 0){
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d11a      	bne.n	8000686 <FiniteStateMachine_Normal+0xee>
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d116      	bne.n	8000686 <FiniteStateMachine_Normal+0xee>
			trafic_light_state = TLS_GREEN_RED;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <FiniteStateMachine_Normal+0x110>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_green;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <FiniteStateMachine_Normal+0x114>)
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 8000664:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_red;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <FiniteStateMachine_Normal+0x11c>)
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 800066c:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_GREEN_RED);
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fa54 	bl	8000b1c <DisplayTraficLight>
		}
		break;
 8000674:	e007      	b.n	8000686 <FiniteStateMachine_Normal+0xee>

	default:
		break;
 8000676:	bf00      	nop
 8000678:	e006      	b.n	8000688 <FiniteStateMachine_Normal+0xf0>
		break;
 800067a:	bf00      	nop
 800067c:	e004      	b.n	8000688 <FiniteStateMachine_Normal+0xf0>
		break;
 800067e:	bf00      	nop
 8000680:	e002      	b.n	8000688 <FiniteStateMachine_Normal+0xf0>
		break;
 8000682:	bf00      	nop
 8000684:	e000      	b.n	8000688 <FiniteStateMachine_Normal+0xf0>
		break;
 8000686:	bf00      	nop
	}
	UpdateLEDBuffer();
 8000688:	f000 f86e 	bl	8000768 <UpdateLEDBuffer>
	--counter_A;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3b01      	subs	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <FiniteStateMachine_Normal+0x118>)
 8000696:	701a      	strb	r2, [r3, #0]
	--counter_B;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <FiniteStateMachine_Normal+0x120>)
 80006a2:	701a      	strb	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000091 	.word	0x20000091
 80006ac:	20000002 	.word	0x20000002
 80006b0:	2000010e 	.word	0x2000010e
 80006b4:	20000000 	.word	0x20000000
 80006b8:	2000010c 	.word	0x2000010c
 80006bc:	20000001 	.word	0x20000001

080006c0 <FiniteStateMachine_ModifyRed>:

void FiniteStateMachine_ModifyRed(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	UpdateBaseCounter();
 80006c4:	f000 f8b2 	bl	800082c <UpdateBaseCounter>
	if(Button_GetButtonState(BUTTON_SET) == PRESSED){
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fddd 	bl	8000288 <Button_GetButtonState>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d109      	bne.n	80006e8 <FiniteStateMachine_ModifyRed+0x28>
		base_counter_red = modifiable_base_counter;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <FiniteStateMachine_ModifyRed+0x2c>)
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <FiniteStateMachine_ModifyRed+0x30>)
 80006da:	701a      	strb	r2, [r3, #0]
		BalanceBaseCounter(LIGHT_RED);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f8ff 	bl	80008e0 <BalanceBaseCounter>
		machine_state = FSM_INIT;
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <FiniteStateMachine_ModifyRed+0x34>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	}
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000010d 	.word	0x2000010d
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000090 	.word	0x20000090

080006f8 <FiniteStateMachine_ModifyYellow>:

void FiniteStateMachine_ModifyYellow(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	UpdateBaseCounter();
 80006fc:	f000 f896 	bl	800082c <UpdateBaseCounter>
	if(Button_GetButtonState(BUTTON_SET) == PRESSED){
 8000700:	2002      	movs	r0, #2
 8000702:	f7ff fdc1 	bl	8000288 <Button_GetButtonState>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d109      	bne.n	8000720 <FiniteStateMachine_ModifyYellow+0x28>
		base_counter_yellow = modifiable_base_counter;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <FiniteStateMachine_ModifyYellow+0x2c>)
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <FiniteStateMachine_ModifyYellow+0x30>)
 8000712:	701a      	strb	r2, [r3, #0]
		BalanceBaseCounter(LIGHT_YELLOW);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 f8e3 	bl	80008e0 <BalanceBaseCounter>
		machine_state = FSM_INIT;
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <FiniteStateMachine_ModifyYellow+0x34>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
	}
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000010d 	.word	0x2000010d
 8000728:	20000001 	.word	0x20000001
 800072c:	20000090 	.word	0x20000090

08000730 <FiniteStateMachine_ModifyGreen>:

void FiniteStateMachine_ModifyGreen(){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	UpdateBaseCounter();
 8000734:	f000 f87a 	bl	800082c <UpdateBaseCounter>
	if(Button_GetButtonState(BUTTON_SET) == PRESSED){
 8000738:	2002      	movs	r0, #2
 800073a:	f7ff fda5 	bl	8000288 <Button_GetButtonState>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d109      	bne.n	8000758 <FiniteStateMachine_ModifyGreen+0x28>
		base_counter_green = modifiable_base_counter;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <FiniteStateMachine_ModifyGreen+0x2c>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <FiniteStateMachine_ModifyGreen+0x30>)
 800074a:	701a      	strb	r2, [r3, #0]
		BalanceBaseCounter(LIGHT_GREEN);
 800074c:	2002      	movs	r0, #2
 800074e:	f000 f8c7 	bl	80008e0 <BalanceBaseCounter>
		machine_state = FSM_INIT;
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <FiniteStateMachine_ModifyGreen+0x34>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
	}
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000010d 	.word	0x2000010d
 8000760:	20000002 	.word	0x20000002
 8000764:	20000090 	.word	0x20000090

08000768 <UpdateLEDBuffer>:


void UpdateLEDBuffer(){
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	led_buffer[0] = counter_A / 10;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <UpdateLEDBuffer+0x6c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <UpdateLEDBuffer+0x70>)
 8000772:	fba2 2303 	umull	r2, r3, r2, r3
 8000776:	08db      	lsrs	r3, r3, #3
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <UpdateLEDBuffer+0x74>)
 800077c:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = counter_A - led_buffer[0] * 10;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <UpdateLEDBuffer+0x74>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	0152      	lsls	r2, r2, #5
 8000786:	1ad2      	subs	r2, r2, r3
 8000788:	0092      	lsls	r2, r2, #2
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <UpdateLEDBuffer+0x6c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4413      	add	r3, r2
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <UpdateLEDBuffer+0x74>)
 800079a:	705a      	strb	r2, [r3, #1]
	led_buffer[2] = counter_B / 10;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <UpdateLEDBuffer+0x78>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <UpdateLEDBuffer+0x70>)
 80007a2:	fba2 2303 	umull	r2, r3, r2, r3
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <UpdateLEDBuffer+0x74>)
 80007ac:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = counter_B - led_buffer[2] * 10;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <UpdateLEDBuffer+0x74>)
 80007b0:	789b      	ldrb	r3, [r3, #2]
 80007b2:	461a      	mov	r2, r3
 80007b4:	0152      	lsls	r2, r2, #5
 80007b6:	1ad2      	subs	r2, r2, r3
 80007b8:	0092      	lsls	r2, r2, #2
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <UpdateLEDBuffer+0x78>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <UpdateLEDBuffer+0x74>)
 80007ca:	70da      	strb	r2, [r3, #3]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	2000010e 	.word	0x2000010e
 80007d8:	cccccccd 	.word	0xcccccccd
 80007dc:	20000094 	.word	0x20000094
 80007e0:	2000010c 	.word	0x2000010c

080007e4 <FiniteStateMachine_ToggleLight>:

void FiniteStateMachine_ToggleLight(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007e8:	2120      	movs	r1, #32
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <FiniteStateMachine_ToggleLight+0x40>)
 80007ec:	f001 f867 	bl	80018be <HAL_GPIO_TogglePin>
	switch(machine_state){
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <FiniteStateMachine_ToggleLight+0x44>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d00e      	beq.n	8000816 <FiniteStateMachine_ToggleLight+0x32>
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	dc10      	bgt.n	800081e <FiniteStateMachine_ToggleLight+0x3a>
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d002      	beq.n	8000806 <FiniteStateMachine_ToggleLight+0x22>
 8000800:	2b03      	cmp	r3, #3
 8000802:	d004      	beq.n	800080e <FiniteStateMachine_ToggleLight+0x2a>
	case FSM_MODIFY_GREEN:
		LEDdisplay_ToggleLight(LIGHT_GREEN);
		break;

	default:
		break;
 8000804:	e00b      	b.n	800081e <FiniteStateMachine_ToggleLight+0x3a>
		LEDdisplay_ToggleLight(LIGHT_RED);
 8000806:	2000      	movs	r0, #0
 8000808:	f000 f9f8 	bl	8000bfc <LEDdisplay_ToggleLight>
		break;
 800080c:	e008      	b.n	8000820 <FiniteStateMachine_ToggleLight+0x3c>
		LEDdisplay_ToggleLight(LIGHT_YELLOW);
 800080e:	2001      	movs	r0, #1
 8000810:	f000 f9f4 	bl	8000bfc <LEDdisplay_ToggleLight>
		break;
 8000814:	e004      	b.n	8000820 <FiniteStateMachine_ToggleLight+0x3c>
		LEDdisplay_ToggleLight(LIGHT_GREEN);
 8000816:	2002      	movs	r0, #2
 8000818:	f000 f9f0 	bl	8000bfc <LEDdisplay_ToggleLight>
		break;
 800081c:	e000      	b.n	8000820 <FiniteStateMachine_ToggleLight+0x3c>
		break;
 800081e:	bf00      	nop
	}
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40010800 	.word	0x40010800
 8000828:	20000090 	.word	0x20000090

0800082c <UpdateBaseCounter>:
/**
 * This function is used for all modify states
 * The only different thing between state is modifiable_base_counter is set to the next state when the state is switched
 * The handling when set_button is pressed is in its respective state
 */
void UpdateBaseCounter(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	switch(Button_GetButtonState(BUTTON_MODIFY)){
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff fd29 	bl	8000288 <Button_GetButtonState>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d002      	beq.n	8000842 <UpdateBaseCounter+0x16>
 800083c:	2b02      	cmp	r3, #2
 800083e:	d00e      	beq.n	800085e <UpdateBaseCounter+0x32>
			}
		}
		break;

	default:
		break;
 8000840:	e02b      	b.n	800089a <UpdateBaseCounter+0x6e>
		modifiable_base_counter++;
 8000842:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <UpdateBaseCounter+0xa4>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <UpdateBaseCounter+0xa4>)
 800084c:	701a      	strb	r2, [r3, #0]
		if(modifiable_base_counter > 99){
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <UpdateBaseCounter+0xa4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b63      	cmp	r3, #99	; 0x63
 8000854:	d91e      	bls.n	8000894 <UpdateBaseCounter+0x68>
			modifiable_base_counter = 0;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <UpdateBaseCounter+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
		break;
 800085c:	e01a      	b.n	8000894 <UpdateBaseCounter+0x68>
		if(SoftwareTimer_GetFlag(modify_restrict_timer_id) == FLAG_ON){
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <UpdateBaseCounter+0xa8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fa9c 	bl	8000da0 <SoftwareTimer_GetFlag>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d114      	bne.n	8000898 <UpdateBaseCounter+0x6c>
			SoftwareTimer_ResetFlag(modify_restrict_timer_id);
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <UpdateBaseCounter+0xa8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 faa4 	bl	8000dc0 <SoftwareTimer_ResetFlag>
			modifiable_base_counter++;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <UpdateBaseCounter+0xa4>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <UpdateBaseCounter+0xa4>)
 8000882:	701a      	strb	r2, [r3, #0]
			if(modifiable_base_counter > 99){
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <UpdateBaseCounter+0xa4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b63      	cmp	r3, #99	; 0x63
 800088a:	d905      	bls.n	8000898 <UpdateBaseCounter+0x6c>
				modifiable_base_counter = 0;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <UpdateBaseCounter+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
		break;
 8000892:	e001      	b.n	8000898 <UpdateBaseCounter+0x6c>
		break;
 8000894:	bf00      	nop
 8000896:	e000      	b.n	800089a <UpdateBaseCounter+0x6e>
		break;
 8000898:	bf00      	nop
	}

	led_buffer[2] = modifiable_base_counter / 10;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <UpdateBaseCounter+0xa4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <UpdateBaseCounter+0xac>)
 80008a0:	fba2 2303 	umull	r2, r3, r2, r3
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <UpdateBaseCounter+0xb0>)
 80008aa:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = modifiable_base_counter - led_buffer[2] * 10;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <UpdateBaseCounter+0xb0>)
 80008ae:	789b      	ldrb	r3, [r3, #2]
 80008b0:	461a      	mov	r2, r3
 80008b2:	0152      	lsls	r2, r2, #5
 80008b4:	1ad2      	subs	r2, r2, r3
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <UpdateBaseCounter+0xa4>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <UpdateBaseCounter+0xb0>)
 80008c8:	70da      	strb	r2, [r3, #3]
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000010d 	.word	0x2000010d
 80008d4:	20000118 	.word	0x20000118
 80008d8:	cccccccd 	.word	0xcccccccd
 80008dc:	20000094 	.word	0x20000094

080008e0 <BalanceBaseCounter>:

void BalanceBaseCounter(int priority_light){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	switch(priority_light){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d01b      	beq.n	8000926 <BalanceBaseCounter+0x46>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	dc21      	bgt.n	8000938 <BalanceBaseCounter+0x58>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d003      	beq.n	8000902 <BalanceBaseCounter+0x22>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d009      	beq.n	8000914 <BalanceBaseCounter+0x34>
	case LIGHT_GREEN:
		base_counter_red = base_counter_green + base_counter_yellow;
		break;

	default:
		break;
 8000900:	e01a      	b.n	8000938 <BalanceBaseCounter+0x58>
		base_counter_green = base_counter_red - base_counter_yellow;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <BalanceBaseCounter+0x64>)
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <BalanceBaseCounter+0x68>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <BalanceBaseCounter+0x6c>)
 8000910:	701a      	strb	r2, [r3, #0]
		break;
 8000912:	e012      	b.n	800093a <BalanceBaseCounter+0x5a>
		base_counter_red = base_counter_green + base_counter_yellow;
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <BalanceBaseCounter+0x6c>)
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <BalanceBaseCounter+0x68>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4413      	add	r3, r2
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <BalanceBaseCounter+0x64>)
 8000922:	701a      	strb	r2, [r3, #0]
		break;
 8000924:	e009      	b.n	800093a <BalanceBaseCounter+0x5a>
		base_counter_red = base_counter_green + base_counter_yellow;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <BalanceBaseCounter+0x6c>)
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <BalanceBaseCounter+0x68>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <BalanceBaseCounter+0x64>)
 8000934:	701a      	strb	r2, [r3, #0]
		break;
 8000936:	e000      	b.n	800093a <BalanceBaseCounter+0x5a>
		break;
 8000938:	bf00      	nop
	}
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000000 	.word	0x20000000
 8000948:	20000001 	.word	0x20000001
 800094c:	20000002 	.word	0x20000002

08000950 <LEDdisplay_DisplayNumber>:

/**
 * Implementation
 */

void LEDdisplay_DisplayNumber(uint8_t number, uint8_t en_pin){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
	LEDdisplay_ClearEn();
 8000960:	f000 f816 	bl	8000990 <LEDdisplay_ClearEn>
	HAL_GPIO_WritePin(GPIOB, SEG_EN0_Pin << en_pin, RESET);
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	2210      	movs	r2, #16
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	b29b      	uxth	r3, r3
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <LEDdisplay_DisplayNumber+0x3c>)
 8000974:	f000 ff8b 	bl	800188e <HAL_GPIO_WritePin>

	LEDdisplay_ClearBuffer();
 8000978:	f000 f828 	bl	80009cc <LEDdisplay_ClearBuffer>
	Display7SEG(number);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f842 	bl	8000a08 <Display7SEG>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40010c00 	.word	0x40010c00

08000990 <LEDdisplay_ClearEn>:

void LEDdisplay_ClearEn(){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; ++i)
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	e00c      	b.n	80009b6 <LEDdisplay_ClearEn+0x26>
		HAL_GPIO_WritePin(GPIOB, SEG_EN0_Pin << i, SET);
 800099c:	2210      	movs	r2, #16
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	2201      	movs	r2, #1
 80009a8:	4619      	mov	r1, r3
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <LEDdisplay_ClearEn+0x38>)
 80009ac:	f000 ff6f 	bl	800188e <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; ++i)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	ddef      	ble.n	800099c <LEDdisplay_ClearEn+0xc>
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010c00 	.word	0x40010c00

080009cc <LEDdisplay_ClearBuffer>:

void LEDdisplay_ClearBuffer(){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; ++i){
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	e00c      	b.n	80009f2 <LEDdisplay_ClearBuffer+0x26>
		HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << i, SET);
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	2201      	movs	r2, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <LEDdisplay_ClearBuffer+0x38>)
 80009e8:	f000 ff51 	bl	800188e <HAL_GPIO_WritePin>
	for(int i = 0; i < 7; ++i){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3301      	adds	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b06      	cmp	r3, #6
 80009f6:	ddef      	ble.n	80009d8 <LEDdisplay_ClearBuffer+0xc>
	}
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40010800 	.word	0x40010800

08000a08 <Display7SEG>:

void Display7SEG(int number){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 0, !(segment_code[0] & number_code[number]));
 8000a10:	2201      	movs	r2, #1
 8000a12:	4940      	ldr	r1, [pc, #256]	; (8000b14 <Display7SEG+0x10c>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	440b      	add	r3, r1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf0c      	ite	eq
 8000a22:	2301      	moveq	r3, #1
 8000a24:	2300      	movne	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2180      	movs	r1, #128	; 0x80
 8000a2c:	483a      	ldr	r0, [pc, #232]	; (8000b18 <Display7SEG+0x110>)
 8000a2e:	f000 ff2e 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 1, !(segment_code[1] & number_code[number]));
 8000a32:	2202      	movs	r2, #2
 8000a34:	4937      	ldr	r1, [pc, #220]	; (8000b14 <Display7SEG+0x10c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	440b      	add	r3, r1
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf0c      	ite	eq
 8000a44:	2301      	moveq	r3, #1
 8000a46:	2300      	movne	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a50:	4831      	ldr	r0, [pc, #196]	; (8000b18 <Display7SEG+0x110>)
 8000a52:	f000 ff1c 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 2, !(segment_code[2] & number_code[number]));
 8000a56:	2204      	movs	r2, #4
 8000a58:	492e      	ldr	r1, [pc, #184]	; (8000b14 <Display7SEG+0x10c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4013      	ands	r3, r2
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	4828      	ldr	r0, [pc, #160]	; (8000b18 <Display7SEG+0x110>)
 8000a76:	f000 ff0a 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 3, !(segment_code[3] & number_code[number]));
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	4925      	ldr	r1, [pc, #148]	; (8000b14 <Display7SEG+0x10c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	440b      	add	r3, r1
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4013      	ands	r3, r2
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a98:	481f      	ldr	r0, [pc, #124]	; (8000b18 <Display7SEG+0x110>)
 8000a9a:	f000 fef8 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 4, !(segment_code[4] & number_code[number]));
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	491c      	ldr	r1, [pc, #112]	; (8000b14 <Display7SEG+0x10c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	440b      	add	r3, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abc:	4816      	ldr	r0, [pc, #88]	; (8000b18 <Display7SEG+0x110>)
 8000abe:	f000 fee6 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 5, !(segment_code[5] & number_code[number]));
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	4913      	ldr	r1, [pc, #76]	; (8000b14 <Display7SEG+0x10c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	440b      	add	r3, r1
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4013      	ands	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf0c      	ite	eq
 8000ad4:	2301      	moveq	r3, #1
 8000ad6:	2300      	movne	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	461a      	mov	r2, r3
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <Display7SEG+0x110>)
 8000ae2:	f000 fed4 	bl	800188e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 6, !(segment_code[6] & number_code[number]));
 8000ae6:	2240      	movs	r2, #64	; 0x40
 8000ae8:	490a      	ldr	r1, [pc, #40]	; (8000b14 <Display7SEG+0x10c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	440b      	add	r3, r1
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4013      	ands	r3, r2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <Display7SEG+0x110>)
 8000b06:	f000 fec2 	bl	800188e <HAL_GPIO_WritePin>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	080029dc 	.word	0x080029dc
 8000b18:	40010800 	.word	0x40010800

08000b1c <DisplayTraficLight>:

void DisplayTraficLight(TraficLightState_t state){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	ClearTraficLight();
 8000b26:	f000 f84b 	bl	8000bc0 <ClearTraficLight>
	switch(state){
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d83e      	bhi.n	8000bb0 <DisplayTraficLight+0x94>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <DisplayTraficLight+0x1c>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000b49 	.word	0x08000b49
 8000b3c:	08000b63 	.word	0x08000b63
 8000b40:	08000b7d 	.word	0x08000b7d
 8000b44:	08000b97 	.word	0x08000b97
	case TLS_GREEN_RED:
		HAL_GPIO_WritePin(GPIOB, GREEN_A_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	481b      	ldr	r0, [pc, #108]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000b50:	f000 fe9d 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_B_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000b5c:	f000 fe97 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000b60:	e027      	b.n	8000bb2 <DisplayTraficLight+0x96>

	case TLS_YELLOW_RED:
		HAL_GPIO_WritePin(GPIOB, YELLOW_A_Pin, RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b68:	4814      	ldr	r0, [pc, #80]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000b6a:	f000 fe90 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_B_Pin, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000b76:	f000 fe8a 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000b7a:	e01a      	b.n	8000bb2 <DisplayTraficLight+0x96>

	case TLS_RED_GREEN:
		HAL_GPIO_WritePin(GPIOB, RED_A_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b82:	480e      	ldr	r0, [pc, #56]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000b84:	f000 fe83 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GREEN_B_Pin, RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000b90:	f000 fe7d 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000b94:	e00d      	b.n	8000bb2 <DisplayTraficLight+0x96>

	case TLS_RED_YELLOW:
		HAL_GPIO_WritePin(GPIOB, RED_A_Pin, RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000b9e:	f000 fe76 	bl	800188e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, YELLOW_B_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <DisplayTraficLight+0xa0>)
 8000baa:	f000 fe70 	bl	800188e <HAL_GPIO_WritePin>
		break;
 8000bae:	e000      	b.n	8000bb2 <DisplayTraficLight+0x96>

	default:
		break;
 8000bb0:	bf00      	nop
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010c00 	.word	0x40010c00

08000bc0 <ClearTraficLight>:

void ClearTraficLight(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 6; ++i){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	e00d      	b.n	8000be8 <ClearTraficLight+0x28>
		HAL_GPIO_WritePin(GPIOB, RED_A_Pin << i, SET);
 8000bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <ClearTraficLight+0x38>)
 8000bde:	f000 fe56 	bl	800188e <HAL_GPIO_WritePin>
	for(int i = 0; i < 6; ++i){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3301      	adds	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	ddee      	ble.n	8000bcc <ClearTraficLight+0xc>
	}
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <LEDdisplay_ToggleLight>:

void LEDdisplay_ToggleLight(int light){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	switch(light){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d01f      	beq.n	8000c4a <LEDdisplay_ToggleLight+0x4e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	dc27      	bgt.n	8000c60 <LEDdisplay_ToggleLight+0x64>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <LEDdisplay_ToggleLight+0x22>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d00b      	beq.n	8000c34 <LEDdisplay_ToggleLight+0x38>
		HAL_GPIO_TogglePin(GREEN_A_GPIO_Port, GREEN_A_Pin);
		HAL_GPIO_TogglePin(GREEN_B_GPIO_Port, GREEN_B_Pin);
		break;

	default:
		break;
 8000c1c:	e020      	b.n	8000c60 <LEDdisplay_ToggleLight+0x64>
		HAL_GPIO_TogglePin(RED_A_GPIO_Port, RED_A_Pin);
 8000c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <LEDdisplay_ToggleLight+0x70>)
 8000c24:	f000 fe4b 	bl	80018be <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_B_GPIO_Port, RED_B_Pin);
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <LEDdisplay_ToggleLight+0x70>)
 8000c2e:	f000 fe46 	bl	80018be <HAL_GPIO_TogglePin>
		break;
 8000c32:	e016      	b.n	8000c62 <LEDdisplay_ToggleLight+0x66>
		HAL_GPIO_TogglePin(YELLOW_A_GPIO_Port, YELLOW_A_Pin);
 8000c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LEDdisplay_ToggleLight+0x70>)
 8000c3a:	f000 fe40 	bl	80018be <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW_B_GPIO_Port, YELLOW_B_Pin);
 8000c3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c42:	480a      	ldr	r0, [pc, #40]	; (8000c6c <LEDdisplay_ToggleLight+0x70>)
 8000c44:	f000 fe3b 	bl	80018be <HAL_GPIO_TogglePin>
		break;
 8000c48:	e00b      	b.n	8000c62 <LEDdisplay_ToggleLight+0x66>
		HAL_GPIO_TogglePin(GREEN_A_GPIO_Port, GREEN_A_Pin);
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <LEDdisplay_ToggleLight+0x70>)
 8000c50:	f000 fe35 	bl	80018be <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN_B_GPIO_Port, GREEN_B_Pin);
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <LEDdisplay_ToggleLight+0x70>)
 8000c5a:	f000 fe30 	bl	80018be <HAL_GPIO_TogglePin>
		break;
 8000c5e:	e000      	b.n	8000c62 <LEDdisplay_ToggleLight+0x66>
		break;
 8000c60:	bf00      	nop
	};
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <LinkedList_Add>:
 *  Created on: Sep 25, 2025
 *      Author: Hi
 */
#include "Linked_List.h"

void LinkedList_Add(TimerNode_t* head, TimerNode_t* new_node){
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]


	//Step 1: Move the new_node to the correct place
	//While loop is necessary for iterating through the list
	TimerNode_t* current_node = head;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]
	while(current_node->next && current_node->next->timer.counter < new_node->timer.counter){
 8000c7e:	e00a      	b.n	8000c96 <LinkedList_Add+0x26>
		new_node->timer.counter -= current_node->next->timer.counter;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	609a      	str	r2, [r3, #8]
		current_node = current_node->next;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	60fb      	str	r3, [r7, #12]
	while(current_node->next && current_node->next->timer.counter < new_node->timer.counter){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d006      	beq.n	8000cac <LinkedList_Add+0x3c>
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbe9      	blt.n	8000c80 <LinkedList_Add+0x10>
	}

	//Step 2: Connect the new_node to the correct place
	new_node->next = current_node->next;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	611a      	str	r2, [r3, #16]
	current_node->next = new_node;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	611a      	str	r2, [r3, #16]

	//Step 3: Update its next node if it exist
	if(new_node->next){
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <LinkedList_Add+0x64>
		new_node->next->timer.counter -= new_node->timer.counter;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	6899      	ldr	r1, [r3, #8]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691b      	ldr	r3, [r3, #16]
 8000cd0:	1a8a      	subs	r2, r1, r2
 8000cd2:	609a      	str	r2, [r3, #8]
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <LinkedList_PopHead>:

void LinkedList_PopHead(TimerNode_t* head){
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	TimerNode_t* poped_node = head->next;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	60fb      	str	r3, [r7, #12]
	head->next = poped_node->next;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
	...

08000d00 <SoftwareTimer_Init>:
/**
 * Initialize Dummy Node
 * Must be called before enter infinite loop
 * Must be called before using any other function
 */
void SoftwareTimer_Init(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
	head = (TimerNode_t*)malloc(sizeof(TimerNode_t));
 8000d06:	2014      	movs	r0, #20
 8000d08:	f001 fdd4 	bl	80028b4 <malloc>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <SoftwareTimer_Init+0x34>)
 8000d12:	601a      	str	r2, [r3, #0]
	head->next = NULL;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <SoftwareTimer_Init+0x34>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
	head->timer = (Timer_t){0, 0, FLAG_OFF};
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SoftwareTimer_Init+0x34>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	2300      	movs	r3, #0
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	6053      	str	r3, [r2, #4]
 8000d28:	6093      	str	r3, [r2, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000120 	.word	0x20000120

08000d38 <SoftwareTimer_AddNewTimer>:

/**
 * Must only be called when new timer is needed
 * Should only be used outside of infinite loop
 */
int SoftwareTimer_AddNewTimer(int time_amount){
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	//Step 1: Create a new timer
	Timer_t new_timer = {timer_count, time_amount, time_amount, FLAG_OFF};
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <SoftwareTimer_AddNewTimer+0x5c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]

	//Step 2: Create a new timer_node
	TimerNode_t* new_node = (TimerNode_t*)malloc(sizeof(TimerNode_t));
 8000d52:	2014      	movs	r0, #20
 8000d54:	f001 fdae 	bl	80028b4 <malloc>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	61fb      	str	r3, [r7, #28]
	new_node->timer = new_timer;
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	461c      	mov	r4, r3
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Step 3: Add the node into the array for reference
	timers[timer_count] = new_node;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <SoftwareTimer_AddNewTimer+0x5c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	490a      	ldr	r1, [pc, #40]	; (8000d98 <SoftwareTimer_AddNewTimer+0x60>)
 8000d70:	69fa      	ldr	r2, [r7, #28]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Step 4: Add to the linked list
	LinkedList_Add(head, new_node);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <SoftwareTimer_AddNewTimer+0x64>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	69f9      	ldr	r1, [r7, #28]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff77 	bl	8000c70 <LinkedList_Add>
	return timer_count++;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SoftwareTimer_AddNewTimer+0x5c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	4902      	ldr	r1, [pc, #8]	; (8000d94 <SoftwareTimer_AddNewTimer+0x5c>)
 8000d8a:	600a      	str	r2, [r1, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3724      	adds	r7, #36	; 0x24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	200000d8 	.word	0x200000d8
 8000d98:	20000098 	.word	0x20000098
 8000d9c:	20000120 	.word	0x20000120

08000da0 <SoftwareTimer_GetFlag>:

void SoftwareTimer_SetNewTimer(int id, int time_amount){
	timers[id]->timer.base_counter = time_amount;
}

const int SoftwareTimer_GetFlag(int id){
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	return timers[id]->timer.flag;
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <SoftwareTimer_GetFlag+0x1c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	68db      	ldr	r3, [r3, #12]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000098 	.word	0x20000098

08000dc0 <SoftwareTimer_ResetFlag>:

void SoftwareTimer_ResetFlag(int id){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	timers[id]->timer.flag = FLAG_OFF;
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <SoftwareTimer_ResetFlag+0x44>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
	timers[id]->timer.counter = timers[id]->timer.base_counter;
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <SoftwareTimer_ResetFlag+0x44>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ddc:	4909      	ldr	r1, [pc, #36]	; (8000e04 <SoftwareTimer_ResetFlag+0x44>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000de4:	6852      	ldr	r2, [r2, #4]
 8000de6:	609a      	str	r2, [r3, #8]
	LinkedList_Add(head, timers[id]);
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SoftwareTimer_ResetFlag+0x48>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4905      	ldr	r1, [pc, #20]	; (8000e04 <SoftwareTimer_ResetFlag+0x44>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f7ff ff3a 	bl	8000c70 <LinkedList_Add>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000098 	.word	0x20000098
 8000e08:	20000120 	.word	0x20000120

08000e0c <SoftwareTimer_Step>:
/**
 * The problem with this approach is that is:
 *  If interrupt duration must be < our timer or else the timer will always be late
 * 	or interrupt duration is faster than 1ms then last_time is always roughly equal because HAL_GetTick() only return value in ms.
 */
void SoftwareTimer_Step(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	TimerNode_t* node = head->next;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <SoftwareTimer_Step+0x78>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	607b      	str	r3, [r7, #4]
	if(node->timer.counter > 0){
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	dd25      	ble.n	8000e6e <SoftwareTimer_Step+0x62>
		last_time = current_time;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <SoftwareTimer_Step+0x7c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <SoftwareTimer_Step+0x80>)
 8000e28:	6013      	str	r3, [r2, #0]
		current_time = HAL_GetTick();
 8000e2a:	f000 fa87 	bl	800133c <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <SoftwareTimer_Step+0x7c>)
 8000e32:	6013      	str	r3, [r2, #0]
		node->timer.counter -= current_time - last_time;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <SoftwareTimer_Step+0x80>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <SoftwareTimer_Step+0x7c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	440b      	add	r3, r1
 8000e46:	461a      	mov	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
	}

	while(head->next->timer.counter <= 0){
 8000e4c:	e00f      	b.n	8000e6e <SoftwareTimer_Step+0x62>
		int id = head->next->timer.id;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <SoftwareTimer_Step+0x78>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	603b      	str	r3, [r7, #0]
		timers[id]->timer.flag = FLAG_ON;
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <SoftwareTimer_Step+0x84>)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	2201      	movs	r2, #1
 8000e62:	60da      	str	r2, [r3, #12]
		LinkedList_PopHead(head);
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <SoftwareTimer_Step+0x78>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff38 	bl	8000cde <LinkedList_PopHead>
	while(head->next->timer.counter <= 0){
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SoftwareTimer_Step+0x78>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dde9      	ble.n	8000e4e <SoftwareTimer_Step+0x42>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000120 	.word	0x20000120
 8000e88:	200000e0 	.word	0x200000e0
 8000e8c:	200000dc 	.word	0x200000dc
 8000e90:	20000098 	.word	0x20000098

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 f9f8 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f80c 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f000 f892 	bl	8000fc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ea4:	f000 f844 	bl	8000f30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <main+0x20>)
 8000eaa:	f001 f94d 	bl	8002148 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FiniteStateMachine_Run();
 8000eae:	f7ff fa09 	bl	80002c4 <FiniteStateMachine_Run>
 8000eb2:	e7fc      	b.n	8000eae <main+0x1a>
 8000eb4:	20000124 	.word	0x20000124

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b090      	sub	sp, #64	; 0x40
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	2228      	movs	r2, #40	; 0x28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fcfc 	bl	80028c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fcfe 	bl	80018f0 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000efa:	f000 f8d8 	bl	80010ae <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 ff6a 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f8c4 	bl	80010ae <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3740      	adds	r7, #64	; 0x40
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f64:	2213      	movs	r2, #19
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f76:	f001 f897 	bl	80020a8 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f80:	f000 f895 	bl	80010ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f92:	f001 fa15 	bl	80023c0 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 f887 	bl	80010ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000fae:	f001 fbed 	bl	800278c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 f879 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000124 	.word	0x20000124

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <MX_GPIO_Init+0xb8>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_GPIO_Init+0xb8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SEG_A_Pin|SEG_B_Pin|SEG_C_Pin
 800100c:	2200      	movs	r2, #0
 800100e:	f643 71a0 	movw	r1, #16288	; 0x3fa0
 8001012:	481c      	ldr	r0, [pc, #112]	; (8001084 <MX_GPIO_Init+0xbc>)
 8001014:	f000 fc3b 	bl	800188e <HAL_GPIO_WritePin>
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_A_Pin|YELLOW_A_Pin|GREEN_A_Pin|RED_B_Pin
 8001018:	2200      	movs	r2, #0
 800101a:	f64f 41f0 	movw	r1, #64752	; 0xfcf0
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <MX_GPIO_Init+0xc0>)
 8001020:	f000 fc35 	bl	800188e <HAL_GPIO_WritePin>
                          |YELLOW_B_Pin|GREEN_B_Pin|SEG_EN0_Pin|SEG_EN1_Pin
                          |SEG_EN2_Pin|SEG_EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin SEG_A_Pin SEG_B_Pin SEG_C_Pin
                           SEG_D_Pin SEG_E_Pin SEG_F_Pin SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SEG_A_Pin|SEG_B_Pin|SEG_C_Pin
 8001024:	f643 73a0 	movw	r3, #16288	; 0x3fa0
 8001028:	60bb      	str	r3, [r7, #8]
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2302      	movs	r3, #2
 8001034:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4619      	mov	r1, r3
 800103c:	4811      	ldr	r0, [pc, #68]	; (8001084 <MX_GPIO_Init+0xbc>)
 800103e:	f000 fa95 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Select_Pin Button_Modify_Pin Button_Set_Pin */
  GPIO_InitStruct.Pin = Button_Select_Pin|Button_Modify_Pin|Button_Set_Pin;
 8001042:	2307      	movs	r3, #7
 8001044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_GPIO_Init+0xc0>)
 8001056:	f000 fa89 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_A_Pin YELLOW_A_Pin GREEN_A_Pin RED_B_Pin
                           YELLOW_B_Pin GREEN_B_Pin SEG_EN0_Pin SEG_EN1_Pin
                           SEG_EN2_Pin SEG_EN3_Pin */
  GPIO_InitStruct.Pin = RED_A_Pin|YELLOW_A_Pin|GREEN_A_Pin|RED_B_Pin
 800105a:	f64f 43f0 	movw	r3, #64752	; 0xfcf0
 800105e:	60bb      	str	r3, [r7, #8]
                          |YELLOW_B_Pin|GREEN_B_Pin|SEG_EN0_Pin|SEG_EN1_Pin
                          |SEG_EN2_Pin|SEG_EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4619      	mov	r1, r3
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_GPIO_Init+0xc0>)
 8001074:	f000 fa7a 	bl	800156c <HAL_GPIO_Init>

}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40010800 	.word	0x40010800
 8001088:	40010c00 	.word	0x40010c00

0800108c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800109c:	d103      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		SoftwareTimer_Step();
 800109e:	f7ff feb5 	bl	8000e0c <SoftwareTimer_Step>
		Button_ReadInput();
 80010a2:	f7ff f853 	bl	800014c <Button_ReadInput>
	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b2:	b672      	cpsid	i
}
 80010b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_MspInit+0x5c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_MspInit+0x5c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_MspInit+0x5c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_MspInit+0x5c>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_MspInit+0x5c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_MspInit+0x5c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_MspInit+0x60>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_MspInit+0x60>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112c:	d113      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_TIM_Base_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_TIM_Base_MspInit+0x44>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	201c      	movs	r0, #28
 800114c:	f000 f9d7 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001150:	201c      	movs	r0, #28
 8001152:	f000 f9f0 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011aa:	f000 f8b5 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM2_IRQHandler+0x10>)
 80011ba:	f001 f811 	bl	80021e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000124 	.word	0x20000124

080011c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <_sbrk+0x5c>)
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <_sbrk+0x60>)
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d102      	bne.n	80011ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <_sbrk+0x64>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <_sbrk+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d207      	bcs.n	8001208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f8:	f001 fb32 	bl	8002860 <__errno>
 80011fc:	4603      	mov	r3, r0
 80011fe:	220c      	movs	r2, #12
 8001200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	e009      	b.n	800121c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <_sbrk+0x64>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <_sbrk+0x64>)
 8001218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20002800 	.word	0x20002800
 8001228:	00000400 	.word	0x00000400
 800122c:	200000e4 	.word	0x200000e4
 8001230:	20000180 	.word	0x20000180

08001234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001240:	f7ff fff8 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001246:	490c      	ldr	r1, [pc, #48]	; (8001278 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <LoopFillZerobss+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800125c:	4c09      	ldr	r4, [pc, #36]	; (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f001 faff 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff fe11 	bl	8000e94 <main>
  bx lr
 8001272:	4770      	bx	lr
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800127c:	08002a14 	.word	0x08002a14
  ldr r2, =_sbss
 8001280:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001284:	20000180 	.word	0x20000180

08001288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_2_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_Init+0x28>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_Init+0x28>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f923 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff ff06 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f93b 	bl	8001552 <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 f903 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000004 	.word	0x20000004
 8001310:	2000000c 	.word	0x2000000c
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x1c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <HAL_IncTick+0x20>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	2000000c 	.word	0x2000000c
 8001338:	2000016c 	.word	0x2000016c

0800133c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_GetTick+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	2000016c 	.word	0x2000016c

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4906      	ldr	r1, [pc, #24]	; (80013e8 <__NVIC_EnableIRQ+0x34>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff90 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff2d 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff42 	bl	8001398 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff35 	bl	80013b4 <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b08b      	sub	sp, #44	; 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157e:	e148      	b.n	8001812 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001580:	2201      	movs	r2, #1
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8137 	bne.w	800180c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4aa3      	ldr	r2, [pc, #652]	; (8001830 <HAL_GPIO_Init+0x2c4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d05e      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015a8:	4aa1      	ldr	r2, [pc, #644]	; (8001830 <HAL_GPIO_Init+0x2c4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d875      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ae:	4aa1      	ldr	r2, [pc, #644]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d058      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015b4:	4a9f      	ldr	r2, [pc, #636]	; (8001834 <HAL_GPIO_Init+0x2c8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d86f      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015ba:	4a9f      	ldr	r2, [pc, #636]	; (8001838 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d052      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015c0:	4a9d      	ldr	r2, [pc, #628]	; (8001838 <HAL_GPIO_Init+0x2cc>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d869      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015c6:	4a9d      	ldr	r2, [pc, #628]	; (800183c <HAL_GPIO_Init+0x2d0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d04c      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015cc:	4a9b      	ldr	r2, [pc, #620]	; (800183c <HAL_GPIO_Init+0x2d0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d863      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015d2:	4a9b      	ldr	r2, [pc, #620]	; (8001840 <HAL_GPIO_Init+0x2d4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d046      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
 80015d8:	4a99      	ldr	r2, [pc, #612]	; (8001840 <HAL_GPIO_Init+0x2d4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d85d      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d82a      	bhi.n	8001638 <HAL_GPIO_Init+0xcc>
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d859      	bhi.n	800169a <HAL_GPIO_Init+0x12e>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <HAL_GPIO_Init+0x80>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001641 	.word	0x08001641
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001695 	.word	0x08001695
 80015fc:	0800169b 	.word	0x0800169b
 8001600:	0800169b 	.word	0x0800169b
 8001604:	0800169b 	.word	0x0800169b
 8001608:	0800169b 	.word	0x0800169b
 800160c:	0800169b 	.word	0x0800169b
 8001610:	0800169b 	.word	0x0800169b
 8001614:	0800169b 	.word	0x0800169b
 8001618:	0800169b 	.word	0x0800169b
 800161c:	0800169b 	.word	0x0800169b
 8001620:	0800169b 	.word	0x0800169b
 8001624:	0800169b 	.word	0x0800169b
 8001628:	0800169b 	.word	0x0800169b
 800162c:	0800169b 	.word	0x0800169b
 8001630:	08001649 	.word	0x08001649
 8001634:	0800165d 	.word	0x0800165d
 8001638:	4a82      	ldr	r2, [pc, #520]	; (8001844 <HAL_GPIO_Init+0x2d8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163e:	e02c      	b.n	800169a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	623b      	str	r3, [r7, #32]
          break;
 8001646:	e029      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	3304      	adds	r3, #4
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e024      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	3308      	adds	r3, #8
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e01f      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	330c      	adds	r3, #12
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e01a      	b.n	800169c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166e:	2304      	movs	r3, #4
 8001670:	623b      	str	r3, [r7, #32]
          break;
 8001672:	e013      	b.n	800169c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	611a      	str	r2, [r3, #16]
          break;
 8001686:	e009      	b.n	800169c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	615a      	str	r2, [r3, #20]
          break;
 8001692:	e003      	b.n	800169c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x130>
          break;
 800169a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	; 0xff
 80016a0:	d801      	bhi.n	80016a6 <HAL_GPIO_Init+0x13a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_Init+0x13e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2bff      	cmp	r3, #255	; 0xff
 80016b0:	d802      	bhi.n	80016b8 <HAL_GPIO_Init+0x14c>
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x152>
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	3b08      	subs	r3, #8
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	210f      	movs	r1, #15
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8090 	beq.w	800180c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <HAL_GPIO_Init+0x2dc>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a55      	ldr	r2, [pc, #340]	; (8001848 <HAL_GPIO_Init+0x2dc>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_GPIO_Init+0x2dc>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001704:	4a51      	ldr	r2, [pc, #324]	; (800184c <HAL_GPIO_Init+0x2e0>)
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a49      	ldr	r2, [pc, #292]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d00d      	beq.n	800174c <HAL_GPIO_Init+0x1e0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a48      	ldr	r2, [pc, #288]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d007      	beq.n	8001748 <HAL_GPIO_Init+0x1dc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_GPIO_Init+0x2ec>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_GPIO_Init+0x1d8>
 8001740:	2302      	movs	r3, #2
 8001742:	e004      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 8001744:	2303      	movs	r3, #3
 8001746:	e002      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_GPIO_Init+0x1e2>
 800174c:	2300      	movs	r3, #0
 800174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001750:	f002 0203 	and.w	r2, r2, #3
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	4093      	lsls	r3, r2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800175e:	493b      	ldr	r1, [pc, #236]	; (800184c <HAL_GPIO_Init+0x2e0>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_GPIO_Init+0x2f0>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4937      	ldr	r1, [pc, #220]	; (800185c <HAL_GPIO_Init+0x2f0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	43db      	mvns	r3, r3
 800178e:	4933      	ldr	r1, [pc, #204]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001790:	4013      	ands	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	492d      	ldr	r1, [pc, #180]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4929      	ldr	r1, [pc, #164]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4923      	ldr	r1, [pc, #140]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	491f      	ldr	r1, [pc, #124]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4919      	ldr	r1, [pc, #100]	; (800185c <HAL_GPIO_Init+0x2f0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	4915      	ldr	r1, [pc, #84]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001808:	4013      	ands	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3301      	adds	r3, #1
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f aeaf 	bne.w	8001580 <HAL_GPIO_Init+0x14>
  }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	372c      	adds	r7, #44	; 0x2c
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	10320000 	.word	0x10320000
 8001834:	10310000 	.word	0x10310000
 8001838:	10220000 	.word	0x10220000
 800183c:	10210000 	.word	0x10210000
 8001840:	10120000 	.word	0x10120000
 8001844:	10110000 	.word	0x10110000
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	40010800 	.word	0x40010800
 8001854:	40010c00 	.word	0x40010c00
 8001858:	40011000 	.word	0x40011000
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e001      	b.n	8001882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	807b      	strh	r3, [r7, #2]
 800189a:	4613      	mov	r3, r2
 800189c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189e:	787b      	ldrb	r3, [r7, #1]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018aa:	e003      	b.n	80018b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	041a      	lsls	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	611a      	str	r2, [r3, #16]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d0:	887a      	ldrh	r2, [r7, #2]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	041a      	lsls	r2, r3, #16
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43d9      	mvns	r1, r3
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	400b      	ands	r3, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e26c      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8087 	beq.w	8001a1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001910:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b04      	cmp	r3, #4
 800191a:	d00c      	beq.n	8001936 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800191c:	4b8f      	ldr	r3, [pc, #572]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d112      	bne.n	800194e <HAL_RCC_OscConfig+0x5e>
 8001928:	4b8c      	ldr	r3, [pc, #560]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d10b      	bne.n	800194e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001936:	4b89      	ldr	r3, [pc, #548]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d06c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x12c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d168      	bne.n	8001a1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e246      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x76>
 8001958:	4b80      	ldr	r3, [pc, #512]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a7f      	ldr	r2, [pc, #508]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 800195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e02e      	b.n	80019c4 <HAL_RCC_OscConfig+0xd4>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x98>
 800196e:	4b7b      	ldr	r3, [pc, #492]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a7a      	ldr	r2, [pc, #488]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b78      	ldr	r3, [pc, #480]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e01d      	b.n	80019c4 <HAL_RCC_OscConfig+0xd4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0xbc>
 8001992:	4b72      	ldr	r3, [pc, #456]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a71      	ldr	r2, [pc, #452]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b6f      	ldr	r3, [pc, #444]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a6e      	ldr	r2, [pc, #440]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0xd4>
 80019ac:	4b6b      	ldr	r3, [pc, #428]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a6a      	ldr	r2, [pc, #424]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a67      	ldr	r2, [pc, #412]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fcb6 	bl	800133c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fcb2 	bl	800133c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1fa      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0xe4>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fca2 	bl	800133c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fc9e 	bl	800133c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1e6      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x10c>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2a:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a36:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d11c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x18c>
 8001a42:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d116      	bne.n	8001a7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x176>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e1ba      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4939      	ldr	r1, [pc, #228]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	e03a      	b.n	8001af2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fc57 	bl	800133c <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff fc53 	bl	800133c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e19b      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4927      	ldr	r1, [pc, #156]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fc36 	bl	800133c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fc32 	bl	800133c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e17a      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d03a      	beq.n	8001b74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d019      	beq.n	8001b3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0c:	f7ff fc16 	bl	800133c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff fc12 	bl	800133c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e15a      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f000 fa9a 	bl	800206c <RCC_Delay>
 8001b38:	e01c      	b.n	8001b74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b40:	f7ff fbfc 	bl	800133c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b46:	e00f      	b.n	8001b68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b48:	f7ff fbf8 	bl	800133c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d908      	bls.n	8001b68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e140      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	42420000 	.word	0x42420000
 8001b64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	4b9e      	ldr	r3, [pc, #632]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1e9      	bne.n	8001b48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80a6 	beq.w	8001cce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b86:	4b97      	ldr	r3, [pc, #604]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10d      	bne.n	8001bae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a93      	ldr	r2, [pc, #588]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b91      	ldr	r3, [pc, #580]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001baa:	2301      	movs	r3, #1
 8001bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b8e      	ldr	r3, [pc, #568]	; (8001de8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d118      	bne.n	8001bec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bba:	4b8b      	ldr	r3, [pc, #556]	; (8001de8 <HAL_RCC_OscConfig+0x4f8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a8a      	ldr	r2, [pc, #552]	; (8001de8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fbb9 	bl	800133c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bce:	f7ff fbb5 	bl	800133c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b64      	cmp	r3, #100	; 0x64
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0fd      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <HAL_RCC_OscConfig+0x4f8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x312>
 8001bf4:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a7a      	ldr	r2, [pc, #488]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	e02d      	b.n	8001c5e <HAL_RCC_OscConfig+0x36e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x334>
 8001c0a:	4b76      	ldr	r3, [pc, #472]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a75      	ldr	r2, [pc, #468]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a72      	ldr	r2, [pc, #456]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
 8001c22:	e01c      	b.n	8001c5e <HAL_RCC_OscConfig+0x36e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d10c      	bne.n	8001c46 <HAL_RCC_OscConfig+0x356>
 8001c2c:	4b6d      	ldr	r3, [pc, #436]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a6c      	ldr	r2, [pc, #432]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4a69      	ldr	r2, [pc, #420]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6213      	str	r3, [r2, #32]
 8001c44:	e00b      	b.n	8001c5e <HAL_RCC_OscConfig+0x36e>
 8001c46:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4a66      	ldr	r2, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	6213      	str	r3, [r2, #32]
 8001c52:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a63      	ldr	r2, [pc, #396]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d015      	beq.n	8001c92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fb69 	bl	800133c <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7ff fb65 	bl	800133c <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0ab      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c84:	4b57      	ldr	r3, [pc, #348]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ee      	beq.n	8001c6e <HAL_RCC_OscConfig+0x37e>
 8001c90:	e014      	b.n	8001cbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c92:	f7ff fb53 	bl	800133c <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9a:	f7ff fb4f 	bl	800133c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e095      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb0:	4b4c      	ldr	r3, [pc, #304]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ee      	bne.n	8001c9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d105      	bne.n	8001cce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc2:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8081 	beq.w	8001dda <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd8:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d061      	beq.n	8001da8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d146      	bne.n	8001d7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_RCC_OscConfig+0x4fc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fb23 	bl	800133c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff fb1f 	bl	800133c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e067      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d20:	d108      	bne.n	8001d34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	492d      	ldr	r1, [pc, #180]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a19      	ldr	r1, [r3, #32]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	430b      	orrs	r3, r1
 8001d46:	4927      	ldr	r1, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x4fc>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff faf3 	bl	800133c <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff faef 	bl	800133c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e037      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x46a>
 8001d78:	e02f      	b.n	8001dda <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_RCC_OscConfig+0x4fc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fadc 	bl	800133c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff fad8 	bl	800133c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e020      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x498>
 8001da6:	e018      	b.n	8001dda <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e013      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40007000 	.word	0x40007000
 8001dec:	42420060 	.word	0x42420060

08001df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d0      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0207 	bic.w	r2, r3, #7
 8001e1a:	4965      	ldr	r1, [pc, #404]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d040      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e073      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06b      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4936      	ldr	r1, [pc, #216]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7ff fa2c 	bl	800133c <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7ff fa28 	bl	800133c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e053      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d210      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1cc>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f98a 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	080029e8 	.word	0x080029e8
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x36>
 8001ff2:	e027      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff6:	613b      	str	r3, [r7, #16]
      break;
 8001ff8:	e027      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_RCC_GetSysClockFreq+0x94>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0c5b      	lsrs	r3, r3, #17
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_RCC_GetSysClockFreq+0xa0>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <HAL_RCC_GetSysClockFreq+0x98>)
 8002026:	fb02 f203 	mul.w	r2, r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e004      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	613b      	str	r3, [r7, #16]
      break;
 8002042:	e002      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetSysClockFreq+0x98>)
 8002046:	613b      	str	r3, [r7, #16]
      break;
 8002048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204a:	693b      	ldr	r3, [r7, #16]
}
 800204c:	4618      	mov	r0, r3
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	007a1200 	.word	0x007a1200
 8002060:	080029f8 	.word	0x080029f8
 8002064:	08002a08 	.word	0x08002a08
 8002068:	003d0900 	.word	0x003d0900

0800206c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <RCC_Delay+0x34>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <RCC_Delay+0x38>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0a5b      	lsrs	r3, r3, #9
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002088:	bf00      	nop
  }
  while (Delay --);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	60fa      	str	r2, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f9      	bne.n	8002088 <RCC_Delay+0x1c>
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000004 	.word	0x20000004
 80020a4:	10624dd3 	.word	0x10624dd3

080020a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e041      	b.n	800213e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff f824 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f000 fa56 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d001      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e035      	b.n	80021cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <HAL_TIM_Base_Start_IT+0x90>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d009      	beq.n	8002196 <HAL_TIM_Base_Start_IT+0x4e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218a:	d004      	beq.n	8002196 <HAL_TIM_Base_Start_IT+0x4e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_TIM_Base_Start_IT+0x94>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d111      	bne.n	80021ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b06      	cmp	r3, #6
 80021a6:	d010      	beq.n	80021ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	e007      	b.n	80021ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40000400 	.word	0x40000400

080021e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d020      	beq.n	8002244 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0202 	mvn.w	r2, #2
 8002214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f998 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f98b 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f99a 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d020      	beq.n	8002290 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0204 	mvn.w	r2, #4
 8002260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f972 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 800227c:	e005      	b.n	800228a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f965 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f974 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d020      	beq.n	80022dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0208 	mvn.w	r2, #8
 80022ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2204      	movs	r2, #4
 80022b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f94c 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f93f 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f94e 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0210 	mvn.w	r2, #16
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2208      	movs	r2, #8
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f926 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f919 	bl	800254e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f928 	bl	8002572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0201 	mvn.w	r2, #1
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fea0 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa6f 	bl	800284e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f8f8 	bl	8002584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0220 	mvn.w	r2, #32
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa42 	bl	800283c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_ConfigClockSource+0x1c>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0b4      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x186>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002414:	d03e      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0xd4>
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	f200 8087 	bhi.w	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002422:	f000 8086 	beq.w	8002532 <HAL_TIM_ConfigClockSource+0x172>
 8002426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242a:	d87f      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b70      	cmp	r3, #112	; 0x70
 800242e:	d01a      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0xa6>
 8002430:	2b70      	cmp	r3, #112	; 0x70
 8002432:	d87b      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002434:	2b60      	cmp	r3, #96	; 0x60
 8002436:	d050      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x11a>
 8002438:	2b60      	cmp	r3, #96	; 0x60
 800243a:	d877      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b50      	cmp	r3, #80	; 0x50
 800243e:	d03c      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0xfa>
 8002440:	2b50      	cmp	r3, #80	; 0x50
 8002442:	d873      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d058      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x13a>
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d86f      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b30      	cmp	r3, #48	; 0x30
 800244e:	d064      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002450:	2b30      	cmp	r3, #48	; 0x30
 8002452:	d86b      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b20      	cmp	r3, #32
 8002456:	d060      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002458:	2b20      	cmp	r3, #32
 800245a:	d867      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05c      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002460:	2b10      	cmp	r3, #16
 8002462:	d05a      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	e062      	b.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f000 f96a 	bl	800274e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	609a      	str	r2, [r3, #8]
      break;
 8002492:	e04f      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6899      	ldr	r1, [r3, #8]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f000 f953 	bl	800274e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024b6:	609a      	str	r2, [r3, #8]
      break;
 80024b8:	e03c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f000 f8ca 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2150      	movs	r1, #80	; 0x50
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f921 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 80024d8:	e02c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f000 f8e8 	bl	80026bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2160      	movs	r1, #96	; 0x60
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f911 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 80024f8:	e01c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	461a      	mov	r2, r3
 8002508:	f000 f8aa 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2140      	movs	r1, #64	; 0x40
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f901 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 8002518:	e00c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f000 f8f8 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 800252a:	e003      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      break;
 8002530:	e000      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <TIM_Base_SetConfig+0xc0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <TIM_Base_SetConfig+0x28>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d003      	beq.n	80025c0 <TIM_Base_SetConfig+0x28>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a28      	ldr	r2, [pc, #160]	; (800265c <TIM_Base_SetConfig+0xc4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d108      	bne.n	80025d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <TIM_Base_SetConfig+0xc0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0x52>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x52>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <TIM_Base_SetConfig+0xc4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <TIM_Base_SetConfig+0xc0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f023 0201 	bic.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	611a      	str	r2, [r3, #16]
  }
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40000400 	.word	0x40000400

08002660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f023 0201 	bic.w	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800268a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 030a 	bic.w	r3, r3, #10
 800269c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f023 0210 	bic.w	r2, r3, #16
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	031b      	lsls	r3, r3, #12
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	f043 0307 	orr.w	r3, r3, #7
 800273c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002768:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	021a      	lsls	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	431a      	orrs	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4313      	orrs	r3, r2
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e041      	b.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d004      	beq.n	80027fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10c      	bne.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4313      	orrs	r3, r2
 800280c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400

0800283c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <__errno>:
 8002860:	4b01      	ldr	r3, [pc, #4]	; (8002868 <__errno+0x8>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000010 	.word	0x20000010

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	2600      	movs	r6, #0
 8002870:	4d0c      	ldr	r5, [pc, #48]	; (80028a4 <__libc_init_array+0x38>)
 8002872:	4c0d      	ldr	r4, [pc, #52]	; (80028a8 <__libc_init_array+0x3c>)
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	f000 f8a2 	bl	80029c4 <_init>
 8002880:	2600      	movs	r6, #0
 8002882:	4d0a      	ldr	r5, [pc, #40]	; (80028ac <__libc_init_array+0x40>)
 8002884:	4c0a      	ldr	r4, [pc, #40]	; (80028b0 <__libc_init_array+0x44>)
 8002886:	1b64      	subs	r4, r4, r5
 8002888:	10a4      	asrs	r4, r4, #2
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	08002a0c 	.word	0x08002a0c
 80028a8:	08002a0c 	.word	0x08002a0c
 80028ac:	08002a0c 	.word	0x08002a0c
 80028b0:	08002a10 	.word	0x08002a10

080028b4 <malloc>:
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <malloc+0xc>)
 80028b6:	4601      	mov	r1, r0
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	f000 b80b 	b.w	80028d4 <_malloc_r>
 80028be:	bf00      	nop
 80028c0:	20000010 	.word	0x20000010

080028c4 <memset>:
 80028c4:	4603      	mov	r3, r0
 80028c6:	4402      	add	r2, r0
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d100      	bne.n	80028ce <memset+0xa>
 80028cc:	4770      	bx	lr
 80028ce:	f803 1b01 	strb.w	r1, [r3], #1
 80028d2:	e7f9      	b.n	80028c8 <memset+0x4>

080028d4 <_malloc_r>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	1ccd      	adds	r5, r1, #3
 80028d8:	f025 0503 	bic.w	r5, r5, #3
 80028dc:	3508      	adds	r5, #8
 80028de:	2d0c      	cmp	r5, #12
 80028e0:	bf38      	it	cc
 80028e2:	250c      	movcc	r5, #12
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	4606      	mov	r6, r0
 80028e8:	db01      	blt.n	80028ee <_malloc_r+0x1a>
 80028ea:	42a9      	cmp	r1, r5
 80028ec:	d903      	bls.n	80028f6 <_malloc_r+0x22>
 80028ee:	230c      	movs	r3, #12
 80028f0:	6033      	str	r3, [r6, #0]
 80028f2:	2000      	movs	r0, #0
 80028f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f6:	f000 f857 	bl	80029a8 <__malloc_lock>
 80028fa:	4921      	ldr	r1, [pc, #132]	; (8002980 <_malloc_r+0xac>)
 80028fc:	680a      	ldr	r2, [r1, #0]
 80028fe:	4614      	mov	r4, r2
 8002900:	b99c      	cbnz	r4, 800292a <_malloc_r+0x56>
 8002902:	4f20      	ldr	r7, [pc, #128]	; (8002984 <_malloc_r+0xb0>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b923      	cbnz	r3, 8002912 <_malloc_r+0x3e>
 8002908:	4621      	mov	r1, r4
 800290a:	4630      	mov	r0, r6
 800290c:	f000 f83c 	bl	8002988 <_sbrk_r>
 8002910:	6038      	str	r0, [r7, #0]
 8002912:	4629      	mov	r1, r5
 8002914:	4630      	mov	r0, r6
 8002916:	f000 f837 	bl	8002988 <_sbrk_r>
 800291a:	1c43      	adds	r3, r0, #1
 800291c:	d123      	bne.n	8002966 <_malloc_r+0x92>
 800291e:	230c      	movs	r3, #12
 8002920:	4630      	mov	r0, r6
 8002922:	6033      	str	r3, [r6, #0]
 8002924:	f000 f846 	bl	80029b4 <__malloc_unlock>
 8002928:	e7e3      	b.n	80028f2 <_malloc_r+0x1e>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	1b5b      	subs	r3, r3, r5
 800292e:	d417      	bmi.n	8002960 <_malloc_r+0x8c>
 8002930:	2b0b      	cmp	r3, #11
 8002932:	d903      	bls.n	800293c <_malloc_r+0x68>
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	441c      	add	r4, r3
 8002938:	6025      	str	r5, [r4, #0]
 800293a:	e004      	b.n	8002946 <_malloc_r+0x72>
 800293c:	6863      	ldr	r3, [r4, #4]
 800293e:	42a2      	cmp	r2, r4
 8002940:	bf0c      	ite	eq
 8002942:	600b      	streq	r3, [r1, #0]
 8002944:	6053      	strne	r3, [r2, #4]
 8002946:	4630      	mov	r0, r6
 8002948:	f000 f834 	bl	80029b4 <__malloc_unlock>
 800294c:	f104 000b 	add.w	r0, r4, #11
 8002950:	1d23      	adds	r3, r4, #4
 8002952:	f020 0007 	bic.w	r0, r0, #7
 8002956:	1ac2      	subs	r2, r0, r3
 8002958:	d0cc      	beq.n	80028f4 <_malloc_r+0x20>
 800295a:	1a1b      	subs	r3, r3, r0
 800295c:	50a3      	str	r3, [r4, r2]
 800295e:	e7c9      	b.n	80028f4 <_malloc_r+0x20>
 8002960:	4622      	mov	r2, r4
 8002962:	6864      	ldr	r4, [r4, #4]
 8002964:	e7cc      	b.n	8002900 <_malloc_r+0x2c>
 8002966:	1cc4      	adds	r4, r0, #3
 8002968:	f024 0403 	bic.w	r4, r4, #3
 800296c:	42a0      	cmp	r0, r4
 800296e:	d0e3      	beq.n	8002938 <_malloc_r+0x64>
 8002970:	1a21      	subs	r1, r4, r0
 8002972:	4630      	mov	r0, r6
 8002974:	f000 f808 	bl	8002988 <_sbrk_r>
 8002978:	3001      	adds	r0, #1
 800297a:	d1dd      	bne.n	8002938 <_malloc_r+0x64>
 800297c:	e7cf      	b.n	800291e <_malloc_r+0x4a>
 800297e:	bf00      	nop
 8002980:	200000e8 	.word	0x200000e8
 8002984:	200000ec 	.word	0x200000ec

08002988 <_sbrk_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	2300      	movs	r3, #0
 800298c:	4d05      	ldr	r5, [pc, #20]	; (80029a4 <_sbrk_r+0x1c>)
 800298e:	4604      	mov	r4, r0
 8002990:	4608      	mov	r0, r1
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	f7fe fc18 	bl	80011c8 <_sbrk>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_sbrk_r+0x1a>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_sbrk_r+0x1a>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	20000170 	.word	0x20000170

080029a8 <__malloc_lock>:
 80029a8:	4801      	ldr	r0, [pc, #4]	; (80029b0 <__malloc_lock+0x8>)
 80029aa:	f000 b809 	b.w	80029c0 <__retarget_lock_acquire_recursive>
 80029ae:	bf00      	nop
 80029b0:	20000178 	.word	0x20000178

080029b4 <__malloc_unlock>:
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <__malloc_unlock+0x8>)
 80029b6:	f000 b804 	b.w	80029c2 <__retarget_lock_release_recursive>
 80029ba:	bf00      	nop
 80029bc:	20000178 	.word	0x20000178

080029c0 <__retarget_lock_acquire_recursive>:
 80029c0:	4770      	bx	lr

080029c2 <__retarget_lock_release_recursive>:
 80029c2:	4770      	bx	lr

080029c4 <_init>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	bf00      	nop
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr

080029d0 <_fini>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	bf00      	nop
 80029d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d6:	bc08      	pop	{r3}
 80029d8:	469e      	mov	lr, r3
 80029da:	4770      	bx	lr
