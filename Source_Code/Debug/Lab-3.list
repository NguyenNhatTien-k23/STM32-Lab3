
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df8  08002df8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002df8  08002df8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002df8  08002df8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000074  08002e74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002e74  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b360  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce8  00000000  00000000  0002b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fed  00000000  00000000  0002e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a85e  00000000  00000000  000314bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a9b  00000000  00000000  0003bd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c37b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003210  00000000  00000000  000c380c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d24 	.word	0x08002d24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002d24 	.word	0x08002d24

0800014c <LinkedList_Add>:
 *  Created on: Sep 25, 2025
 *      Author: Hi
 */
#include "Linked_List.h"

void LinkedList_Add(TimerNode_t* head, TimerNode_t* new_node){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]


	//Step 1: Move the new_node to the correct place
	//While loop is necessary for iterating through the list
	TimerNode_t* current_node = head;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	60fb      	str	r3, [r7, #12]
	while(current_node->next && current_node->next->timer.counter < new_node->timer.counter){
 800015a:	e00a      	b.n	8000172 <LinkedList_Add+0x26>
		new_node->timer.counter -= current_node->next->timer.counter;
 800015c:	683b      	ldr	r3, [r7, #0]
 800015e:	689a      	ldr	r2, [r3, #8]
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	691b      	ldr	r3, [r3, #16]
 8000164:	689b      	ldr	r3, [r3, #8]
 8000166:	1ad2      	subs	r2, r2, r3
 8000168:	683b      	ldr	r3, [r7, #0]
 800016a:	609a      	str	r2, [r3, #8]
		current_node = current_node->next;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	691b      	ldr	r3, [r3, #16]
 8000170:	60fb      	str	r3, [r7, #12]
	while(current_node->next && current_node->next->timer.counter < new_node->timer.counter){
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	691b      	ldr	r3, [r3, #16]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d006      	beq.n	8000188 <LinkedList_Add+0x3c>
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	691b      	ldr	r3, [r3, #16]
 800017e:	689a      	ldr	r2, [r3, #8]
 8000180:	683b      	ldr	r3, [r7, #0]
 8000182:	689b      	ldr	r3, [r3, #8]
 8000184:	429a      	cmp	r2, r3
 8000186:	dbe9      	blt.n	800015c <LinkedList_Add+0x10>
	}

	//Step 2: Connect the new_node to the correct place
	new_node->next = current_node->next;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	691a      	ldr	r2, [r3, #16]
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	611a      	str	r2, [r3, #16]
	current_node->next = new_node;
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	683a      	ldr	r2, [r7, #0]
 8000194:	611a      	str	r2, [r3, #16]

	//Step 3: Update its next node if it exist
	if(new_node->next){
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	691b      	ldr	r3, [r3, #16]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d008      	beq.n	80001b0 <LinkedList_Add+0x64>
		new_node->next->timer.counter -= new_node->timer.counter;
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	691b      	ldr	r3, [r3, #16]
 80001a2:	6899      	ldr	r1, [r3, #8]
 80001a4:	683b      	ldr	r3, [r7, #0]
 80001a6:	689a      	ldr	r2, [r3, #8]
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	691b      	ldr	r3, [r3, #16]
 80001ac:	1a8a      	subs	r2, r1, r2
 80001ae:	609a      	str	r2, [r3, #8]
	}
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <LinkedList_PopHead>:

void LinkedList_PopHead(TimerNode_t* head){
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
	TimerNode_t* poped_node = head->next;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	60fb      	str	r3, [r7, #12]
	head->next = poped_node->next;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	691a      	ldr	r2, [r3, #16]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	611a      	str	r2, [r3, #16]
}
 80001d0:	bf00      	nop
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
	...

080001dc <SoftwareTimer_Init>:
/**
 * Initialize Dummy Node
 * Must be called before enter infinite loop
 * Must be called before using any other function
 */
void SoftwareTimer_Init(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
	head = (TimerNode_t*)malloc(sizeof(TimerNode_t));
 80001e2:	2014      	movs	r0, #20
 80001e4:	f001 fe2e 	bl	8001e44 <malloc>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <SoftwareTimer_Init+0x34>)
 80001ee:	601a      	str	r2, [r3, #0]
	head->next = NULL;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <SoftwareTimer_Init+0x34>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2200      	movs	r2, #0
 80001f6:	611a      	str	r2, [r3, #16]
	head->timer = (Timer_t){0, 0, FLAG_OFF};
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <SoftwareTimer_Init+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	461a      	mov	r2, r3
 80001fe:	2300      	movs	r3, #0
 8000200:	6013      	str	r3, [r2, #0]
 8000202:	6053      	str	r3, [r2, #4]
 8000204:	6093      	str	r3, [r2, #8]
 8000206:	60d3      	str	r3, [r2, #12]
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	200000e0 	.word	0x200000e0

08000214 <SoftwareTimer_AddNewTimer>:

/**
 * Must only be called when new timer is needed
 * Should only be used outside of infinite loop
 */
int SoftwareTimer_AddNewTimer(int time_amount){
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b089      	sub	sp, #36	; 0x24
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	//Step 1: Create a new timer
	Timer_t new_timer = {timer_count, time_amount, time_amount, FLAG_OFF};
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <SoftwareTimer_AddNewTimer+0x5c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	613b      	str	r3, [r7, #16]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	2300      	movs	r3, #0
 800022c:	61bb      	str	r3, [r7, #24]

	//Step 2: Create a new timer_node
	TimerNode_t* new_node = (TimerNode_t*)malloc(sizeof(TimerNode_t));
 800022e:	2014      	movs	r0, #20
 8000230:	f001 fe08 	bl	8001e44 <malloc>
 8000234:	4603      	mov	r3, r0
 8000236:	61fb      	str	r3, [r7, #28]
	new_node->timer = new_timer;
 8000238:	69fb      	ldr	r3, [r7, #28]
 800023a:	461c      	mov	r4, r3
 800023c:	f107 030c 	add.w	r3, r7, #12
 8000240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Step 3: Add the node into the array for reference
	timers[timer_count] = new_node;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <SoftwareTimer_AddNewTimer+0x5c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	490a      	ldr	r1, [pc, #40]	; (8000274 <SoftwareTimer_AddNewTimer+0x60>)
 800024c:	69fa      	ldr	r2, [r7, #28]
 800024e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Step 4: Add to the linked list
	LinkedList_Add(head, new_node);
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <SoftwareTimer_AddNewTimer+0x64>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	69f9      	ldr	r1, [r7, #28]
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ff77 	bl	800014c <LinkedList_Add>
	return timer_count++;
 800025e:	4b04      	ldr	r3, [pc, #16]	; (8000270 <SoftwareTimer_AddNewTimer+0x5c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	4902      	ldr	r1, [pc, #8]	; (8000270 <SoftwareTimer_AddNewTimer+0x5c>)
 8000266:	600a      	str	r2, [r1, #0]
}
 8000268:	4618      	mov	r0, r3
 800026a:	3724      	adds	r7, #36	; 0x24
 800026c:	46bd      	mov	sp, r7
 800026e:	bd90      	pop	{r4, r7, pc}
 8000270:	200000d0 	.word	0x200000d0
 8000274:	20000090 	.word	0x20000090
 8000278:	200000e0 	.word	0x200000e0

0800027c <SoftwareTimer_GetFlag>:

void SoftwareTimer_SetNewTimer(int id, int time_amount){
	timers[id]->timer.base_counter = time_amount;
}

const int SoftwareTimer_GetFlag(int id){
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	return timers[id]->timer.flag;
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <SoftwareTimer_GetFlag+0x1c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	68db      	ldr	r3, [r3, #12]
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	20000090 	.word	0x20000090

0800029c <SoftwareTimer_ResetFlag>:

void SoftwareTimer_ResetFlag(int id){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	timers[id]->timer.flag = FLAG_OFF;
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <SoftwareTimer_ResetFlag+0x44>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2200      	movs	r2, #0
 80002ae:	60da      	str	r2, [r3, #12]
	timers[id]->timer.counter = timers[id]->timer.base_counter;
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <SoftwareTimer_ResetFlag+0x44>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4909      	ldr	r1, [pc, #36]	; (80002e0 <SoftwareTimer_ResetFlag+0x44>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c0:	6852      	ldr	r2, [r2, #4]
 80002c2:	609a      	str	r2, [r3, #8]
	LinkedList_Add(head, timers[id]);
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <SoftwareTimer_ResetFlag+0x48>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4905      	ldr	r1, [pc, #20]	; (80002e0 <SoftwareTimer_ResetFlag+0x44>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d0:	4619      	mov	r1, r3
 80002d2:	4610      	mov	r0, r2
 80002d4:	f7ff ff3a 	bl	800014c <LinkedList_Add>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000090 	.word	0x20000090
 80002e4:	200000e0 	.word	0x200000e0

080002e8 <SoftwareTimer_Step>:

void SoftwareTimer_Step(){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
	TimerNode_t* node = head->next;
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <SoftwareTimer_Step+0x4c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	607b      	str	r3, [r7, #4]
	if(node->timer.counter > 0){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	dd04      	ble.n	8000308 <SoftwareTimer_Step+0x20>
		node->timer.counter--;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	1e5a      	subs	r2, r3, #1
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	609a      	str	r2, [r3, #8]
	}

	if(node->timer.counter <= 0){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	2b00      	cmp	r3, #0
 800030e:	dc0d      	bgt.n	800032c <SoftwareTimer_Step+0x44>
		int id = node->timer.id;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	603b      	str	r3, [r7, #0]
		timers[id]->timer.flag = FLAG_ON;
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <SoftwareTimer_Step+0x50>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031e:	2201      	movs	r2, #1
 8000320:	60da      	str	r2, [r3, #12]
		LinkedList_PopHead(head);
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <SoftwareTimer_Step+0x4c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff47 	bl	80001ba <LinkedList_PopHead>
	}
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200000e0 	.word	0x200000e0
 8000338:	20000090 	.word	0x20000090

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000340:	f000 fa82 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000344:	f000 f82e 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000348:	f000 f8b4 	bl	80004b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800034c:	f000 f866 	bl	800041c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000350:	4811      	ldr	r0, [pc, #68]	; (8000398 <main+0x5c>)
 8000352:	f001 f9c1 	bl	80016d8 <HAL_TIM_Base_Start_IT>

  SoftwareTimer_Init();
 8000356:	f7ff ff41 	bl	80001dc <SoftwareTimer_Init>

  led_id = SoftwareTimer_AddNewTimer(100);
 800035a:	2064      	movs	r0, #100	; 0x64
 800035c:	f7ff ff5a 	bl	8000214 <SoftwareTimer_AddNewTimer>
 8000360:	4603      	mov	r3, r0
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <main+0x60>)
 8000364:	6013      	str	r3, [r2, #0]

  printf(HAL_RCC_GetSysClockFreq());
 8000366:	f001 f8f5 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 800036a:	4603      	mov	r3, r0
 800036c:	4618      	mov	r0, r3
 800036e:	f001 fe1f 	bl	8001fb0 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(SoftwareTimer_GetFlag(led_id) == FLAG_ON){
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <main+0x60>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff80 	bl	800027c <SoftwareTimer_GetFlag>
 800037c:	4603      	mov	r3, r0
 800037e:	2b01      	cmp	r3, #1
 8000380:	d1f7      	bne.n	8000372 <main+0x36>
		SoftwareTimer_ResetFlag(led_id);
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <main+0x60>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff88 	bl	800029c <SoftwareTimer_ResetFlag>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800038c:	2120      	movs	r1, #32
 800038e:	4804      	ldr	r0, [pc, #16]	; (80003a0 <main+0x64>)
 8000390:	f000 fd5c 	bl	8000e4c <HAL_GPIO_TogglePin>
	if(SoftwareTimer_GetFlag(led_id) == FLAG_ON){
 8000394:	e7ed      	b.n	8000372 <main+0x36>
 8000396:	bf00      	nop
 8000398:	200000e4 	.word	0x200000e4
 800039c:	20000000 	.word	0x20000000
 80003a0:	40010800 	.word	0x40010800

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	; 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fd4e 	bl	8001e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ce:	2310      	movs	r3, #16
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d2:	2300      	movs	r3, #0
 80003d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0318 	add.w	r3, r7, #24
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fd50 	bl	8000e80 <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003e6:	f000 f8d6 	bl	8000596 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f000 ffbc 	bl	8001380 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800040e:	f000 f8c2 	bl	8000596 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3740      	adds	r7, #64	; 0x40
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	463b      	mov	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_TIM2_Init+0x94>)
 800043a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_TIM2_Init+0x94>)
 8000442:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_TIM2_Init+0x94>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_TIM2_Init+0x94>)
 8000450:	2209      	movs	r2, #9
 8000452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_TIM2_Init+0x94>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_TIM2_Init+0x94>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <MX_TIM2_Init+0x94>)
 8000462:	f001 f8e9 	bl	8001638 <HAL_TIM_Base_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800046c:	f000 f893 	bl	8000596 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	4619      	mov	r1, r3
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <MX_TIM2_Init+0x94>)
 800047e:	f001 fa67 	bl	8001950 <HAL_TIM_ConfigClockSource>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000488:	f000 f885 	bl	8000596 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048c:	2300      	movs	r3, #0
 800048e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000494:	463b      	mov	r3, r7
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_TIM2_Init+0x94>)
 800049a:	f001 fc3f 	bl	8001d1c <HAL_TIMEx_MasterConfigSynchronization>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004a4:	f000 f877 	bl	8000596 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000e4 	.word	0x200000e4

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b28      	ldr	r3, [pc, #160]	; (800056c <MX_GPIO_Init+0xb8>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a27      	ldr	r2, [pc, #156]	; (800056c <MX_GPIO_Init+0xb8>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b25      	ldr	r3, [pc, #148]	; (800056c <MX_GPIO_Init+0xb8>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b22      	ldr	r3, [pc, #136]	; (800056c <MX_GPIO_Init+0xb8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a21      	ldr	r2, [pc, #132]	; (800056c <MX_GPIO_Init+0xb8>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <MX_GPIO_Init+0xb8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SEG_A_Pin|SEG_B_Pin|SEG_C_Pin
 80004f8:	2200      	movs	r2, #0
 80004fa:	f643 71a0 	movw	r1, #16288	; 0x3fa0
 80004fe:	481c      	ldr	r0, [pc, #112]	; (8000570 <MX_GPIO_Init+0xbc>)
 8000500:	f000 fc8c 	bl	8000e1c <HAL_GPIO_WritePin>
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_A_Pin|YELLOW_A_Pin|GREEN_A_Pin|RED_B_Pin
 8000504:	2200      	movs	r2, #0
 8000506:	f64f 41f0 	movw	r1, #64752	; 0xfcf0
 800050a:	481a      	ldr	r0, [pc, #104]	; (8000574 <MX_GPIO_Init+0xc0>)
 800050c:	f000 fc86 	bl	8000e1c <HAL_GPIO_WritePin>
                          |YELLOW_B_Pin|GREEN_B_Pin|SEG_EN0_Pin|SEG_EN1_Pin
                          |SEG_EN2_Pin|SEG_EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin SEG_A_Pin SEG_B_Pin SEG_C_Pin
                           SEG_D_Pin SEG_E_Pin SEG_F_Pin SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SEG_A_Pin|SEG_B_Pin|SEG_C_Pin
 8000510:	f643 73a0 	movw	r3, #16288	; 0x3fa0
 8000514:	60bb      	str	r3, [r7, #8]
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2302      	movs	r3, #2
 8000520:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	4619      	mov	r1, r3
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <MX_GPIO_Init+0xbc>)
 800052a:	f000 fafd 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Select_Pin Button_Modify_Pin Button_Set_Pin */
  GPIO_InitStruct.Pin = Button_Select_Pin|Button_Modify_Pin|Button_Set_Pin;
 800052e:	2307      	movs	r3, #7
 8000530:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000536:	2301      	movs	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4619      	mov	r1, r3
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_GPIO_Init+0xc0>)
 8000542:	f000 faf1 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_A_Pin YELLOW_A_Pin GREEN_A_Pin RED_B_Pin
                           YELLOW_B_Pin GREEN_B_Pin SEG_EN0_Pin SEG_EN1_Pin
                           SEG_EN2_Pin SEG_EN3_Pin */
  GPIO_InitStruct.Pin = RED_A_Pin|YELLOW_A_Pin|GREEN_A_Pin|RED_B_Pin
 8000546:	f64f 43f0 	movw	r3, #64752	; 0xfcf0
 800054a:	60bb      	str	r3, [r7, #8]
                          |YELLOW_B_Pin|GREEN_B_Pin|SEG_EN0_Pin|SEG_EN1_Pin
                          |SEG_EN2_Pin|SEG_EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4619      	mov	r1, r3
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_GPIO_Init+0xc0>)
 8000560:	f000 fae2 	bl	8000b28 <HAL_GPIO_Init>

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	40010800 	.word	0x40010800
 8000574:	40010c00 	.word	0x40010c00

08000578 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//For some reason Proteus called this every 9ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000588:	d101      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x16>
		SoftwareTimer_Step();
 800058a:	f7ff fead 	bl	80002e8 <SoftwareTimer_Step>
	}
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059a:	b672      	cpsid	i
}
 800059c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059e:	e7fe      	b.n	800059e <Error_Handler+0x8>

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_MspInit+0x5c>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_MspInit+0x5c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x5c>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_MspInit+0x5c>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_MspInit+0x60>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_MspInit+0x60>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000614:	d113      	bne.n	800063e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_TIM_Base_MspInit+0x44>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_Base_MspInit+0x44>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_TIM_Base_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	201c      	movs	r0, #28
 8000634:	f000 fa41 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000638:	201c      	movs	r0, #28
 800063a:	f000 fa5a 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000692:	f000 f91f 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <TIM2_IRQHandler+0x10>)
 80006a2:	f001 f865 	bl	8001770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000e4 	.word	0x200000e4

080006b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00a      	b.n	80006d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006c2:	f3af 8000 	nop.w
 80006c6:	4601      	mov	r1, r0
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	b2ca      	uxtb	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf0      	blt.n	80006c2 <_read+0x12>
	}

return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x12>
	}
	return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_close>:

int _close(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000748:	605a      	str	r2, [r3, #4]
	return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <_isatty>:

int _isatty(int file)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
	return 1;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
	return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f001 fb1c 	bl	8001df0 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20002800 	.word	0x20002800
 80007e4:	00000400 	.word	0x00000400
 80007e8:	200000d4 	.word	0x200000d4
 80007ec:	20000140 	.word	0x20000140

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007fc:	f7ff fff8 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000818:	4c09      	ldr	r4, [pc, #36]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f001 fae9 	bl	8001dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fd87 	bl	800033c <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000838:	08002e00 	.word	0x08002e00
  ldr r2, =_sbss
 800083c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000840:	20000140 	.word	0x20000140

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f923 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	200f      	movs	r0, #15
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff fe9c 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f93b 	bl	8000b0e <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f903 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000004 	.word	0x20000004
 80008cc:	2000000c 	.word	0x2000000c
 80008d0:	20000008 	.word	0x20000008

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	2000000c 	.word	0x2000000c
 80008f4:	2000012c 	.word	0x2000012c

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	2000012c 	.word	0x2000012c

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <__NVIC_EnableIRQ+0x34>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f7ff ff90 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff2d 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff42 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff90 	bl	80009fc <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5f 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff35 	bl	8000970 <__NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa2 	bl	8000a60 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b08b      	sub	sp, #44	; 0x2c
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3a:	e148      	b.n	8000dce <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	f040 8137 	bne.w	8000dc8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	4aa3      	ldr	r2, [pc, #652]	; (8000dec <HAL_GPIO_Init+0x2c4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d05e      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b64:	4aa1      	ldr	r2, [pc, #644]	; (8000dec <HAL_GPIO_Init+0x2c4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d875      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b6a:	4aa1      	ldr	r2, [pc, #644]	; (8000df0 <HAL_GPIO_Init+0x2c8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d058      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b70:	4a9f      	ldr	r2, [pc, #636]	; (8000df0 <HAL_GPIO_Init+0x2c8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d86f      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b76:	4a9f      	ldr	r2, [pc, #636]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d052      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b7c:	4a9d      	ldr	r2, [pc, #628]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d869      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b82:	4a9d      	ldr	r2, [pc, #628]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d04c      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b88:	4a9b      	ldr	r2, [pc, #620]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d863      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b8e:	4a9b      	ldr	r2, [pc, #620]	; (8000dfc <HAL_GPIO_Init+0x2d4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d046      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
 8000b94:	4a99      	ldr	r2, [pc, #612]	; (8000dfc <HAL_GPIO_Init+0x2d4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d85d      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d82a      	bhi.n	8000bf4 <HAL_GPIO_Init+0xcc>
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d859      	bhi.n	8000c56 <HAL_GPIO_Init+0x12e>
 8000ba2:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <HAL_GPIO_Init+0x80>)
 8000ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba8:	08000c23 	.word	0x08000c23
 8000bac:	08000bfd 	.word	0x08000bfd
 8000bb0:	08000c0f 	.word	0x08000c0f
 8000bb4:	08000c51 	.word	0x08000c51
 8000bb8:	08000c57 	.word	0x08000c57
 8000bbc:	08000c57 	.word	0x08000c57
 8000bc0:	08000c57 	.word	0x08000c57
 8000bc4:	08000c57 	.word	0x08000c57
 8000bc8:	08000c57 	.word	0x08000c57
 8000bcc:	08000c57 	.word	0x08000c57
 8000bd0:	08000c57 	.word	0x08000c57
 8000bd4:	08000c57 	.word	0x08000c57
 8000bd8:	08000c57 	.word	0x08000c57
 8000bdc:	08000c57 	.word	0x08000c57
 8000be0:	08000c57 	.word	0x08000c57
 8000be4:	08000c57 	.word	0x08000c57
 8000be8:	08000c57 	.word	0x08000c57
 8000bec:	08000c05 	.word	0x08000c05
 8000bf0:	08000c19 	.word	0x08000c19
 8000bf4:	4a82      	ldr	r2, [pc, #520]	; (8000e00 <HAL_GPIO_Init+0x2d8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d013      	beq.n	8000c22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bfa:	e02c      	b.n	8000c56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e029      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e024      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	3308      	adds	r3, #8
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e01f      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e01a      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e013      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d105      	bne.n	8000c44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	611a      	str	r2, [r3, #16]
          break;
 8000c42:	e009      	b.n	8000c58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c44:	2308      	movs	r3, #8
 8000c46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	615a      	str	r2, [r3, #20]
          break;
 8000c4e:	e003      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e000      	b.n	8000c58 <HAL_GPIO_Init+0x130>
          break;
 8000c56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d801      	bhi.n	8000c62 <HAL_GPIO_Init+0x13a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	e001      	b.n	8000c66 <HAL_GPIO_Init+0x13e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3304      	adds	r3, #4
 8000c66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2bff      	cmp	r3, #255	; 0xff
 8000c6c:	d802      	bhi.n	8000c74 <HAL_GPIO_Init+0x14c>
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x152>
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	3b08      	subs	r3, #8
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	210f      	movs	r1, #15
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	6a39      	ldr	r1, [r7, #32]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	431a      	orrs	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8090 	beq.w	8000dc8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca8:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <HAL_GPIO_Init+0x2dc>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a55      	ldr	r2, [pc, #340]	; (8000e04 <HAL_GPIO_Init+0x2dc>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <HAL_GPIO_Init+0x2dc>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cc0:	4a51      	ldr	r2, [pc, #324]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <HAL_GPIO_Init+0x2e4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d00d      	beq.n	8000d08 <HAL_GPIO_Init+0x1e0>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a48      	ldr	r2, [pc, #288]	; (8000e10 <HAL_GPIO_Init+0x2e8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x1dc>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a47      	ldr	r2, [pc, #284]	; (8000e14 <HAL_GPIO_Init+0x2ec>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <HAL_GPIO_Init+0x1d8>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e004      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d00:	2303      	movs	r3, #3
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d0c:	f002 0203 	and.w	r2, r2, #3
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	4093      	lsls	r3, r2
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1a:	493b      	ldr	r1, [pc, #236]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	4937      	ldr	r1, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	608b      	str	r3, [r1, #8]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d42:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4933      	ldr	r1, [pc, #204]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	492d      	ldr	r1, [pc, #180]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60cb      	str	r3, [r1, #12]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4929      	ldr	r1, [pc, #164]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4923      	ldr	r1, [pc, #140]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	491f      	ldr	r1, [pc, #124]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4919      	ldr	r1, [pc, #100]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4915      	ldr	r1, [pc, #84]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	3301      	adds	r3, #1
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f47f aeaf 	bne.w	8000b3c <HAL_GPIO_Init+0x14>
  }
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	372c      	adds	r7, #44	; 0x2c
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	10320000 	.word	0x10320000
 8000df0:	10310000 	.word	0x10310000
 8000df4:	10220000 	.word	0x10220000
 8000df8:	10210000 	.word	0x10210000
 8000dfc:	10120000 	.word	0x10120000
 8000e00:	10110000 	.word	0x10110000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	40011000 	.word	0x40011000
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43d9      	mvns	r1, r3
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e26c      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8087 	beq.w	8000fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea0:	4b92      	ldr	r3, [pc, #584]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d00c      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eac:	4b8f      	ldr	r3, [pc, #572]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d112      	bne.n	8000ede <HAL_RCC_OscConfig+0x5e>
 8000eb8:	4b8c      	ldr	r3, [pc, #560]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	d10b      	bne.n	8000ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec6:	4b89      	ldr	r3, [pc, #548]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d06c      	beq.n	8000fac <HAL_RCC_OscConfig+0x12c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d168      	bne.n	8000fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e246      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee6:	d106      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x76>
 8000ee8:	4b80      	ldr	r3, [pc, #512]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a7f      	ldr	r2, [pc, #508]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e02e      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x98>
 8000efe:	4b7b      	ldr	r3, [pc, #492]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7a      	ldr	r2, [pc, #488]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b78      	ldr	r3, [pc, #480]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a77      	ldr	r2, [pc, #476]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e01d      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0xbc>
 8000f22:	4b72      	ldr	r3, [pc, #456]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a71      	ldr	r2, [pc, #452]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a6e      	ldr	r2, [pc, #440]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e00b      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000f3c:	4b6b      	ldr	r3, [pc, #428]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a6a      	ldr	r2, [pc, #424]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b68      	ldr	r3, [pc, #416]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a67      	ldr	r2, [pc, #412]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fccc 	bl	80008f8 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fcc8 	bl	80008f8 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e1fa      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0xe4>
 8000f82:	e014      	b.n	8000fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fcb8 	bl	80008f8 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fcb4 	bl	80008f8 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e1e6      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	4b53      	ldr	r3, [pc, #332]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x10c>
 8000faa:	e000      	b.n	8000fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d063      	beq.n	8001082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fc6:	4b49      	ldr	r3, [pc, #292]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d11c      	bne.n	800100c <HAL_RCC_OscConfig+0x18c>
 8000fd2:	4b46      	ldr	r3, [pc, #280]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d116      	bne.n	800100c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x176>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e1ba      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4939      	ldr	r1, [pc, #228]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001006:	4313      	orrs	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	e03a      	b.n	8001082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fc6d 	bl	80008f8 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff fc69 	bl	80008f8 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e19b      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4927      	ldr	r1, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e015      	b.n	8001082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fc4c 	bl	80008f8 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001064:	f7ff fc48 	bl	80008f8 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e17a      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d03a      	beq.n	8001104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d019      	beq.n	80010ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_RCC_OscConfig+0x274>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109c:	f7ff fc2c 	bl	80008f8 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc28 	bl	80008f8 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e15a      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fa9a 	bl	80015fc <RCC_Delay>
 80010c8:	e01c      	b.n	8001104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_RCC_OscConfig+0x274>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fc12 	bl	80008f8 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d6:	e00f      	b.n	80010f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc0e 	bl	80008f8 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d908      	bls.n	80010f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e140      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	42420000 	.word	0x42420000
 80010f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e9      	bne.n	80010d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80a6 	beq.w	800125e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001116:	4b97      	ldr	r3, [pc, #604]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10d      	bne.n	800113e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b94      	ldr	r3, [pc, #592]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a93      	ldr	r2, [pc, #588]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b91      	ldr	r3, [pc, #580]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800113a:	2301      	movs	r3, #1
 800113c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113e:	4b8e      	ldr	r3, [pc, #568]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d118      	bne.n	800117c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114a:	4b8b      	ldr	r3, [pc, #556]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a8a      	ldr	r2, [pc, #552]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001156:	f7ff fbcf 	bl	80008f8 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115e:	f7ff fbcb 	bl	80008f8 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b64      	cmp	r3, #100	; 0x64
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0fd      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	4b81      	ldr	r3, [pc, #516]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x312>
 8001184:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a7a      	ldr	r2, [pc, #488]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6213      	str	r3, [r2, #32]
 8001190:	e02d      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x334>
 800119a:	4b76      	ldr	r3, [pc, #472]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	4a75      	ldr	r2, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6213      	str	r3, [r2, #32]
 80011a6:	4b73      	ldr	r3, [pc, #460]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a72      	ldr	r2, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	e01c      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x356>
 80011bc:	4b6d      	ldr	r3, [pc, #436]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a6c      	ldr	r2, [pc, #432]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6213      	str	r3, [r2, #32]
 80011c8:	4b6a      	ldr	r3, [pc, #424]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a69      	ldr	r2, [pc, #420]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	e00b      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a66      	ldr	r2, [pc, #408]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	4b64      	ldr	r3, [pc, #400]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a63      	ldr	r2, [pc, #396]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d015      	beq.n	8001222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb7f 	bl	80008f8 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fb7b 	bl	80008f8 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e0ab      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ee      	beq.n	80011fe <HAL_RCC_OscConfig+0x37e>
 8001220:	e014      	b.n	800124c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff fb69 	bl	80008f8 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fb65 	bl	80008f8 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e095      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1ee      	bne.n	800122a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001252:	4b48      	ldr	r3, [pc, #288]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a47      	ldr	r2, [pc, #284]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8081 	beq.w	800136a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d061      	beq.n	8001338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d146      	bne.n	800130a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127c:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_RCC_OscConfig+0x4fc>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fb39 	bl	80008f8 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fb35 	bl	80008f8 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e067      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129c:	4b35      	ldr	r3, [pc, #212]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d108      	bne.n	80012c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	492d      	ldr	r1, [pc, #180]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a19      	ldr	r1, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	430b      	orrs	r3, r1
 80012d6:	4927      	ldr	r1, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_RCC_OscConfig+0x4fc>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb09 	bl	80008f8 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fb05 	bl	80008f8 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e037      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x46a>
 8001308:	e02f      	b.n	800136a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_RCC_OscConfig+0x4fc>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff faf2 	bl	80008f8 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff faee 	bl	80008f8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e020      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x498>
 8001336:	e018      	b.n	800136a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e013      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40007000 	.word	0x40007000
 800137c:	42420060 	.word	0x42420060

08001380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0d0      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d910      	bls.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	4965      	ldr	r1, [pc, #404]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0b8      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013dc:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	494d      	ldr	r1, [pc, #308]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d040      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d115      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e073      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06b      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f023 0203 	bic.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4936      	ldr	r1, [pc, #216]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fa42 	bl	80008f8 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	e00a      	b.n	800148e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f7ff fa3e 	bl	80008f8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e053      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 020c 	and.w	r2, r3, #12
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d210      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4922      	ldr	r1, [pc, #136]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e032      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4916      	ldr	r1, [pc, #88]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490e      	ldr	r1, [pc, #56]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f821 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490a      	ldr	r1, [pc, #40]	; (8001548 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1cc>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_ClockConfig+0x1d0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f9a0 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000
 8001544:	40021000 	.word	0x40021000
 8001548:	08002d3c 	.word	0x08002d3c
 800154c:	20000004 	.word	0x20000004
 8001550:	20000008 	.word	0x20000008

08001554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b04      	cmp	r3, #4
 800157c:	d002      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x30>
 800157e:	2b08      	cmp	r3, #8
 8001580:	d003      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x36>
 8001582:	e027      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001586:	613b      	str	r3, [r7, #16]
      break;
 8001588:	e027      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	0c9b      	lsrs	r3, r3, #18
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0c5b      	lsrs	r3, r3, #17
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_RCC_GetSysClockFreq+0x98>)
 80015b6:	fb02 f203 	mul.w	r2, r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e004      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	613b      	str	r3, [r7, #16]
      break;
 80015d2:	e002      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_RCC_GetSysClockFreq+0x98>)
 80015d6:	613b      	str	r3, [r7, #16]
      break;
 80015d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015da:	693b      	ldr	r3, [r7, #16]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	007a1200 	.word	0x007a1200
 80015f0:	08002d4c 	.word	0x08002d4c
 80015f4:	08002d5c 	.word	0x08002d5c
 80015f8:	003d0900 	.word	0x003d0900

080015fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <RCC_Delay+0x34>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <RCC_Delay+0x38>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0a5b      	lsrs	r3, r3, #9
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001618:	bf00      	nop
  }
  while (Delay --);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	60fa      	str	r2, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f9      	bne.n	8001618 <RCC_Delay+0x1c>
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000004 	.word	0x20000004
 8001634:	10624dd3 	.word	0x10624dd3

08001638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e041      	b.n	80016ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe ffd0 	bl	8000604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3304      	adds	r3, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f000 fa56 	bl	8001b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d001      	beq.n	80016f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e035      	b.n	800175c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a16      	ldr	r2, [pc, #88]	; (8001768 <HAL_TIM_Base_Start_IT+0x90>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d009      	beq.n	8001726 <HAL_TIM_Base_Start_IT+0x4e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171a:	d004      	beq.n	8001726 <HAL_TIM_Base_Start_IT+0x4e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_TIM_Base_Start_IT+0x94>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d111      	bne.n	800174a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b06      	cmp	r3, #6
 8001736:	d010      	beq.n	800175a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001748:	e007      	b.n	800175a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40000400 	.word	0x40000400

08001770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d020      	beq.n	80017d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0202 	mvn.w	r2, #2
 80017a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f998 	bl	8001af0 <HAL_TIM_IC_CaptureCallback>
 80017c0:	e005      	b.n	80017ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f98b 	bl	8001ade <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f99a 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d020      	beq.n	8001820 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0204 	mvn.w	r2, #4
 80017f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2202      	movs	r2, #2
 80017f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f972 	bl	8001af0 <HAL_TIM_IC_CaptureCallback>
 800180c:	e005      	b.n	800181a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f965 	bl	8001ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f974 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d020      	beq.n	800186c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0208 	mvn.w	r2, #8
 800183c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2204      	movs	r2, #4
 8001842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f94c 	bl	8001af0 <HAL_TIM_IC_CaptureCallback>
 8001858:	e005      	b.n	8001866 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f93f 	bl	8001ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f94e 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d020      	beq.n	80018b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f06f 0210 	mvn.w	r2, #16
 8001888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2208      	movs	r2, #8
 800188e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f926 	bl	8001af0 <HAL_TIM_IC_CaptureCallback>
 80018a4:	e005      	b.n	80018b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f919 	bl	8001ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f928 	bl	8001b02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00c      	beq.n	80018dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d007      	beq.n	80018dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f06f 0201 	mvn.w	r2, #1
 80018d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7fe fe4e 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fa6f 	bl	8001dde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800191c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8f8 	bl	8001b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00c      	beq.n	8001948 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0220 	mvn.w	r2, #32
 8001940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fa42 	bl	8001dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_TIM_ConfigClockSource+0x1c>
 8001968:	2302      	movs	r3, #2
 800196a:	e0b4      	b.n	8001ad6 <HAL_TIM_ConfigClockSource+0x186>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800198a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a4:	d03e      	beq.n	8001a24 <HAL_TIM_ConfigClockSource+0xd4>
 80019a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019aa:	f200 8087 	bhi.w	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b2:	f000 8086 	beq.w	8001ac2 <HAL_TIM_ConfigClockSource+0x172>
 80019b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ba:	d87f      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019bc:	2b70      	cmp	r3, #112	; 0x70
 80019be:	d01a      	beq.n	80019f6 <HAL_TIM_ConfigClockSource+0xa6>
 80019c0:	2b70      	cmp	r3, #112	; 0x70
 80019c2:	d87b      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019c4:	2b60      	cmp	r3, #96	; 0x60
 80019c6:	d050      	beq.n	8001a6a <HAL_TIM_ConfigClockSource+0x11a>
 80019c8:	2b60      	cmp	r3, #96	; 0x60
 80019ca:	d877      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019cc:	2b50      	cmp	r3, #80	; 0x50
 80019ce:	d03c      	beq.n	8001a4a <HAL_TIM_ConfigClockSource+0xfa>
 80019d0:	2b50      	cmp	r3, #80	; 0x50
 80019d2:	d873      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019d4:	2b40      	cmp	r3, #64	; 0x40
 80019d6:	d058      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0x13a>
 80019d8:	2b40      	cmp	r3, #64	; 0x40
 80019da:	d86f      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019dc:	2b30      	cmp	r3, #48	; 0x30
 80019de:	d064      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019e0:	2b30      	cmp	r3, #48	; 0x30
 80019e2:	d86b      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d060      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d867      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d05c      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d05a      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019f4:	e062      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6899      	ldr	r1, [r3, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f000 f96a 	bl	8001cde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	609a      	str	r2, [r3, #8]
      break;
 8001a22:	e04f      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6899      	ldr	r1, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f000 f953 	bl	8001cde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a46:	609a      	str	r2, [r3, #8]
      break;
 8001a48:	e03c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6859      	ldr	r1, [r3, #4]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f000 f8ca 	bl	8001bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2150      	movs	r1, #80	; 0x50
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f921 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001a68:	e02c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f000 f8e8 	bl	8001c4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2160      	movs	r1, #96	; 0x60
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f911 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001a88:	e01c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	461a      	mov	r2, r3
 8001a98:	f000 f8aa 	bl	8001bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f901 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001aa8:	e00c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f000 f8f8 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001aba:	e003      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac0:	e000      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
	...

08001b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <TIM_Base_SetConfig+0xc0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <TIM_Base_SetConfig+0x28>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b46:	d003      	beq.n	8001b50 <TIM_Base_SetConfig+0x28>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <TIM_Base_SetConfig+0xc4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d108      	bne.n	8001b62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <TIM_Base_SetConfig+0xc0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d007      	beq.n	8001b7a <TIM_Base_SetConfig+0x52>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d003      	beq.n	8001b7a <TIM_Base_SetConfig+0x52>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <TIM_Base_SetConfig+0xc4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d108      	bne.n	8001b8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <TIM_Base_SetConfig+0xc0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d103      	bne.n	8001bc0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f023 0201 	bic.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]
  }
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40012c00 	.word	0x40012c00
 8001bec:	40000400 	.word	0x40000400

08001bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f023 0201 	bic.w	r2, r3, #1
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f023 030a 	bic.w	r3, r3, #10
 8001c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	621a      	str	r2, [r3, #32]
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	f023 0210 	bic.w	r2, r3, #16
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	031b      	lsls	r3, r3, #12
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	621a      	str	r2, [r3, #32]
}
 8001ca0:	bf00      	nop
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f043 0307 	orr.w	r3, r3, #7
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	021a      	lsls	r2, r3, #8
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	609a      	str	r2, [r3, #8]
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e041      	b.n	8001db8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d80:	d004      	beq.n	8001d8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10c      	bne.n	8001da6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40000400 	.word	0x40000400

08001dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <__errno>:
 8001df0:	4b01      	ldr	r3, [pc, #4]	; (8001df8 <__errno+0x8>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000010 	.word	0x20000010

08001dfc <__libc_init_array>:
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	2600      	movs	r6, #0
 8001e00:	4d0c      	ldr	r5, [pc, #48]	; (8001e34 <__libc_init_array+0x38>)
 8001e02:	4c0d      	ldr	r4, [pc, #52]	; (8001e38 <__libc_init_array+0x3c>)
 8001e04:	1b64      	subs	r4, r4, r5
 8001e06:	10a4      	asrs	r4, r4, #2
 8001e08:	42a6      	cmp	r6, r4
 8001e0a:	d109      	bne.n	8001e20 <__libc_init_array+0x24>
 8001e0c:	f000 ff8a 	bl	8002d24 <_init>
 8001e10:	2600      	movs	r6, #0
 8001e12:	4d0a      	ldr	r5, [pc, #40]	; (8001e3c <__libc_init_array+0x40>)
 8001e14:	4c0a      	ldr	r4, [pc, #40]	; (8001e40 <__libc_init_array+0x44>)
 8001e16:	1b64      	subs	r4, r4, r5
 8001e18:	10a4      	asrs	r4, r4, #2
 8001e1a:	42a6      	cmp	r6, r4
 8001e1c:	d105      	bne.n	8001e2a <__libc_init_array+0x2e>
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
 8001e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e24:	4798      	blx	r3
 8001e26:	3601      	adds	r6, #1
 8001e28:	e7ee      	b.n	8001e08 <__libc_init_array+0xc>
 8001e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2e:	4798      	blx	r3
 8001e30:	3601      	adds	r6, #1
 8001e32:	e7f2      	b.n	8001e1a <__libc_init_array+0x1e>
 8001e34:	08002df8 	.word	0x08002df8
 8001e38:	08002df8 	.word	0x08002df8
 8001e3c:	08002df8 	.word	0x08002df8
 8001e40:	08002dfc 	.word	0x08002dfc

08001e44 <malloc>:
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <malloc+0xc>)
 8001e46:	4601      	mov	r1, r0
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	f000 b857 	b.w	8001efc <_malloc_r>
 8001e4e:	bf00      	nop
 8001e50:	20000010 	.word	0x20000010

08001e54 <memset>:
 8001e54:	4603      	mov	r3, r0
 8001e56:	4402      	add	r2, r0
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d100      	bne.n	8001e5e <memset+0xa>
 8001e5c:	4770      	bx	lr
 8001e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e62:	e7f9      	b.n	8001e58 <memset+0x4>

08001e64 <_free_r>:
 8001e64:	b538      	push	{r3, r4, r5, lr}
 8001e66:	4605      	mov	r5, r0
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	d043      	beq.n	8001ef4 <_free_r+0x90>
 8001e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e70:	1f0c      	subs	r4, r1, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bfb8      	it	lt
 8001e76:	18e4      	addlt	r4, r4, r3
 8001e78:	f000 f9ba 	bl	80021f0 <__malloc_lock>
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <_free_r+0x94>)
 8001e7e:	6813      	ldr	r3, [r2, #0]
 8001e80:	4610      	mov	r0, r2
 8001e82:	b933      	cbnz	r3, 8001e92 <_free_r+0x2e>
 8001e84:	6063      	str	r3, [r4, #4]
 8001e86:	6014      	str	r4, [r2, #0]
 8001e88:	4628      	mov	r0, r5
 8001e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e8e:	f000 b9b5 	b.w	80021fc <__malloc_unlock>
 8001e92:	42a3      	cmp	r3, r4
 8001e94:	d90a      	bls.n	8001eac <_free_r+0x48>
 8001e96:	6821      	ldr	r1, [r4, #0]
 8001e98:	1862      	adds	r2, r4, r1
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	bf01      	itttt	eq
 8001e9e:	681a      	ldreq	r2, [r3, #0]
 8001ea0:	685b      	ldreq	r3, [r3, #4]
 8001ea2:	1852      	addeq	r2, r2, r1
 8001ea4:	6022      	streq	r2, [r4, #0]
 8001ea6:	6063      	str	r3, [r4, #4]
 8001ea8:	6004      	str	r4, [r0, #0]
 8001eaa:	e7ed      	b.n	8001e88 <_free_r+0x24>
 8001eac:	461a      	mov	r2, r3
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	b10b      	cbz	r3, 8001eb6 <_free_r+0x52>
 8001eb2:	42a3      	cmp	r3, r4
 8001eb4:	d9fa      	bls.n	8001eac <_free_r+0x48>
 8001eb6:	6811      	ldr	r1, [r2, #0]
 8001eb8:	1850      	adds	r0, r2, r1
 8001eba:	42a0      	cmp	r0, r4
 8001ebc:	d10b      	bne.n	8001ed6 <_free_r+0x72>
 8001ebe:	6820      	ldr	r0, [r4, #0]
 8001ec0:	4401      	add	r1, r0
 8001ec2:	1850      	adds	r0, r2, r1
 8001ec4:	4283      	cmp	r3, r0
 8001ec6:	6011      	str	r1, [r2, #0]
 8001ec8:	d1de      	bne.n	8001e88 <_free_r+0x24>
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4401      	add	r1, r0
 8001ed0:	6011      	str	r1, [r2, #0]
 8001ed2:	6053      	str	r3, [r2, #4]
 8001ed4:	e7d8      	b.n	8001e88 <_free_r+0x24>
 8001ed6:	d902      	bls.n	8001ede <_free_r+0x7a>
 8001ed8:	230c      	movs	r3, #12
 8001eda:	602b      	str	r3, [r5, #0]
 8001edc:	e7d4      	b.n	8001e88 <_free_r+0x24>
 8001ede:	6820      	ldr	r0, [r4, #0]
 8001ee0:	1821      	adds	r1, r4, r0
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	bf01      	itttt	eq
 8001ee6:	6819      	ldreq	r1, [r3, #0]
 8001ee8:	685b      	ldreq	r3, [r3, #4]
 8001eea:	1809      	addeq	r1, r1, r0
 8001eec:	6021      	streq	r1, [r4, #0]
 8001eee:	6063      	str	r3, [r4, #4]
 8001ef0:	6054      	str	r4, [r2, #4]
 8001ef2:	e7c9      	b.n	8001e88 <_free_r+0x24>
 8001ef4:	bd38      	pop	{r3, r4, r5, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200000d8 	.word	0x200000d8

08001efc <_malloc_r>:
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	1ccd      	adds	r5, r1, #3
 8001f00:	f025 0503 	bic.w	r5, r5, #3
 8001f04:	3508      	adds	r5, #8
 8001f06:	2d0c      	cmp	r5, #12
 8001f08:	bf38      	it	cc
 8001f0a:	250c      	movcc	r5, #12
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	4606      	mov	r6, r0
 8001f10:	db01      	blt.n	8001f16 <_malloc_r+0x1a>
 8001f12:	42a9      	cmp	r1, r5
 8001f14:	d903      	bls.n	8001f1e <_malloc_r+0x22>
 8001f16:	230c      	movs	r3, #12
 8001f18:	6033      	str	r3, [r6, #0]
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f1e:	f000 f967 	bl	80021f0 <__malloc_lock>
 8001f22:	4921      	ldr	r1, [pc, #132]	; (8001fa8 <_malloc_r+0xac>)
 8001f24:	680a      	ldr	r2, [r1, #0]
 8001f26:	4614      	mov	r4, r2
 8001f28:	b99c      	cbnz	r4, 8001f52 <_malloc_r+0x56>
 8001f2a:	4f20      	ldr	r7, [pc, #128]	; (8001fac <_malloc_r+0xb0>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b923      	cbnz	r3, 8001f3a <_malloc_r+0x3e>
 8001f30:	4621      	mov	r1, r4
 8001f32:	4630      	mov	r0, r6
 8001f34:	f000 f854 	bl	8001fe0 <_sbrk_r>
 8001f38:	6038      	str	r0, [r7, #0]
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f000 f84f 	bl	8001fe0 <_sbrk_r>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	d123      	bne.n	8001f8e <_malloc_r+0x92>
 8001f46:	230c      	movs	r3, #12
 8001f48:	4630      	mov	r0, r6
 8001f4a:	6033      	str	r3, [r6, #0]
 8001f4c:	f000 f956 	bl	80021fc <__malloc_unlock>
 8001f50:	e7e3      	b.n	8001f1a <_malloc_r+0x1e>
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	1b5b      	subs	r3, r3, r5
 8001f56:	d417      	bmi.n	8001f88 <_malloc_r+0x8c>
 8001f58:	2b0b      	cmp	r3, #11
 8001f5a:	d903      	bls.n	8001f64 <_malloc_r+0x68>
 8001f5c:	6023      	str	r3, [r4, #0]
 8001f5e:	441c      	add	r4, r3
 8001f60:	6025      	str	r5, [r4, #0]
 8001f62:	e004      	b.n	8001f6e <_malloc_r+0x72>
 8001f64:	6863      	ldr	r3, [r4, #4]
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	bf0c      	ite	eq
 8001f6a:	600b      	streq	r3, [r1, #0]
 8001f6c:	6053      	strne	r3, [r2, #4]
 8001f6e:	4630      	mov	r0, r6
 8001f70:	f000 f944 	bl	80021fc <__malloc_unlock>
 8001f74:	f104 000b 	add.w	r0, r4, #11
 8001f78:	1d23      	adds	r3, r4, #4
 8001f7a:	f020 0007 	bic.w	r0, r0, #7
 8001f7e:	1ac2      	subs	r2, r0, r3
 8001f80:	d0cc      	beq.n	8001f1c <_malloc_r+0x20>
 8001f82:	1a1b      	subs	r3, r3, r0
 8001f84:	50a3      	str	r3, [r4, r2]
 8001f86:	e7c9      	b.n	8001f1c <_malloc_r+0x20>
 8001f88:	4622      	mov	r2, r4
 8001f8a:	6864      	ldr	r4, [r4, #4]
 8001f8c:	e7cc      	b.n	8001f28 <_malloc_r+0x2c>
 8001f8e:	1cc4      	adds	r4, r0, #3
 8001f90:	f024 0403 	bic.w	r4, r4, #3
 8001f94:	42a0      	cmp	r0, r4
 8001f96:	d0e3      	beq.n	8001f60 <_malloc_r+0x64>
 8001f98:	1a21      	subs	r1, r4, r0
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	f000 f820 	bl	8001fe0 <_sbrk_r>
 8001fa0:	3001      	adds	r0, #1
 8001fa2:	d1dd      	bne.n	8001f60 <_malloc_r+0x64>
 8001fa4:	e7cf      	b.n	8001f46 <_malloc_r+0x4a>
 8001fa6:	bf00      	nop
 8001fa8:	200000d8 	.word	0x200000d8
 8001fac:	200000dc 	.word	0x200000dc

08001fb0 <iprintf>:
 8001fb0:	b40f      	push	{r0, r1, r2, r3}
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <iprintf+0x2c>)
 8001fb4:	b513      	push	{r0, r1, r4, lr}
 8001fb6:	681c      	ldr	r4, [r3, #0]
 8001fb8:	b124      	cbz	r4, 8001fc4 <iprintf+0x14>
 8001fba:	69a3      	ldr	r3, [r4, #24]
 8001fbc:	b913      	cbnz	r3, 8001fc4 <iprintf+0x14>
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f000 f876 	bl	80020b0 <__sinit>
 8001fc4:	ab05      	add	r3, sp, #20
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	9a04      	ldr	r2, [sp, #16]
 8001fca:	68a1      	ldr	r1, [r4, #8]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	f000 f943 	bl	8002258 <_vfiprintf_r>
 8001fd2:	b002      	add	sp, #8
 8001fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fd8:	b004      	add	sp, #16
 8001fda:	4770      	bx	lr
 8001fdc:	20000010 	.word	0x20000010

08001fe0 <_sbrk_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	4d05      	ldr	r5, [pc, #20]	; (8001ffc <_sbrk_r+0x1c>)
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	4608      	mov	r0, r1
 8001fea:	602b      	str	r3, [r5, #0]
 8001fec:	f7fe fbca 	bl	8000784 <_sbrk>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	d102      	bne.n	8001ffa <_sbrk_r+0x1a>
 8001ff4:	682b      	ldr	r3, [r5, #0]
 8001ff6:	b103      	cbz	r3, 8001ffa <_sbrk_r+0x1a>
 8001ff8:	6023      	str	r3, [r4, #0]
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	2000013c 	.word	0x2000013c

08002000 <std>:
 8002000:	2300      	movs	r3, #0
 8002002:	b510      	push	{r4, lr}
 8002004:	4604      	mov	r4, r0
 8002006:	e9c0 3300 	strd	r3, r3, [r0]
 800200a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800200e:	6083      	str	r3, [r0, #8]
 8002010:	8181      	strh	r1, [r0, #12]
 8002012:	6643      	str	r3, [r0, #100]	; 0x64
 8002014:	81c2      	strh	r2, [r0, #14]
 8002016:	6183      	str	r3, [r0, #24]
 8002018:	4619      	mov	r1, r3
 800201a:	2208      	movs	r2, #8
 800201c:	305c      	adds	r0, #92	; 0x5c
 800201e:	f7ff ff19 	bl	8001e54 <memset>
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <std+0x38>)
 8002024:	6224      	str	r4, [r4, #32]
 8002026:	6263      	str	r3, [r4, #36]	; 0x24
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <std+0x3c>)
 800202a:	62a3      	str	r3, [r4, #40]	; 0x28
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <std+0x40>)
 800202e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <std+0x44>)
 8002032:	6323      	str	r3, [r4, #48]	; 0x30
 8002034:	bd10      	pop	{r4, pc}
 8002036:	bf00      	nop
 8002038:	080027e5 	.word	0x080027e5
 800203c:	08002807 	.word	0x08002807
 8002040:	0800283f 	.word	0x0800283f
 8002044:	08002863 	.word	0x08002863

08002048 <_cleanup_r>:
 8002048:	4901      	ldr	r1, [pc, #4]	; (8002050 <_cleanup_r+0x8>)
 800204a:	f000 b8af 	b.w	80021ac <_fwalk_reent>
 800204e:	bf00      	nop
 8002050:	08002b3d 	.word	0x08002b3d

08002054 <__sfmoreglue>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	2568      	movs	r5, #104	; 0x68
 8002058:	1e4a      	subs	r2, r1, #1
 800205a:	4355      	muls	r5, r2
 800205c:	460e      	mov	r6, r1
 800205e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002062:	f7ff ff4b 	bl	8001efc <_malloc_r>
 8002066:	4604      	mov	r4, r0
 8002068:	b140      	cbz	r0, 800207c <__sfmoreglue+0x28>
 800206a:	2100      	movs	r1, #0
 800206c:	e9c0 1600 	strd	r1, r6, [r0]
 8002070:	300c      	adds	r0, #12
 8002072:	60a0      	str	r0, [r4, #8]
 8002074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002078:	f7ff feec 	bl	8001e54 <memset>
 800207c:	4620      	mov	r0, r4
 800207e:	bd70      	pop	{r4, r5, r6, pc}

08002080 <__sfp_lock_acquire>:
 8002080:	4801      	ldr	r0, [pc, #4]	; (8002088 <__sfp_lock_acquire+0x8>)
 8002082:	f000 b8b3 	b.w	80021ec <__retarget_lock_acquire_recursive>
 8002086:	bf00      	nop
 8002088:	20000138 	.word	0x20000138

0800208c <__sfp_lock_release>:
 800208c:	4801      	ldr	r0, [pc, #4]	; (8002094 <__sfp_lock_release+0x8>)
 800208e:	f000 b8ae 	b.w	80021ee <__retarget_lock_release_recursive>
 8002092:	bf00      	nop
 8002094:	20000138 	.word	0x20000138

08002098 <__sinit_lock_acquire>:
 8002098:	4801      	ldr	r0, [pc, #4]	; (80020a0 <__sinit_lock_acquire+0x8>)
 800209a:	f000 b8a7 	b.w	80021ec <__retarget_lock_acquire_recursive>
 800209e:	bf00      	nop
 80020a0:	20000133 	.word	0x20000133

080020a4 <__sinit_lock_release>:
 80020a4:	4801      	ldr	r0, [pc, #4]	; (80020ac <__sinit_lock_release+0x8>)
 80020a6:	f000 b8a2 	b.w	80021ee <__retarget_lock_release_recursive>
 80020aa:	bf00      	nop
 80020ac:	20000133 	.word	0x20000133

080020b0 <__sinit>:
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4604      	mov	r4, r0
 80020b4:	f7ff fff0 	bl	8002098 <__sinit_lock_acquire>
 80020b8:	69a3      	ldr	r3, [r4, #24]
 80020ba:	b11b      	cbz	r3, 80020c4 <__sinit+0x14>
 80020bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020c0:	f7ff bff0 	b.w	80020a4 <__sinit_lock_release>
 80020c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80020c8:	6523      	str	r3, [r4, #80]	; 0x50
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <__sinit+0x68>)
 80020cc:	4a13      	ldr	r2, [pc, #76]	; (800211c <__sinit+0x6c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80020d2:	42a3      	cmp	r3, r4
 80020d4:	bf08      	it	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	4620      	mov	r0, r4
 80020da:	bf08      	it	eq
 80020dc:	61a3      	streq	r3, [r4, #24]
 80020de:	f000 f81f 	bl	8002120 <__sfp>
 80020e2:	6060      	str	r0, [r4, #4]
 80020e4:	4620      	mov	r0, r4
 80020e6:	f000 f81b 	bl	8002120 <__sfp>
 80020ea:	60a0      	str	r0, [r4, #8]
 80020ec:	4620      	mov	r0, r4
 80020ee:	f000 f817 	bl	8002120 <__sfp>
 80020f2:	2200      	movs	r2, #0
 80020f4:	2104      	movs	r1, #4
 80020f6:	60e0      	str	r0, [r4, #12]
 80020f8:	6860      	ldr	r0, [r4, #4]
 80020fa:	f7ff ff81 	bl	8002000 <std>
 80020fe:	2201      	movs	r2, #1
 8002100:	2109      	movs	r1, #9
 8002102:	68a0      	ldr	r0, [r4, #8]
 8002104:	f7ff ff7c 	bl	8002000 <std>
 8002108:	2202      	movs	r2, #2
 800210a:	2112      	movs	r1, #18
 800210c:	68e0      	ldr	r0, [r4, #12]
 800210e:	f7ff ff77 	bl	8002000 <std>
 8002112:	2301      	movs	r3, #1
 8002114:	61a3      	str	r3, [r4, #24]
 8002116:	e7d1      	b.n	80020bc <__sinit+0xc>
 8002118:	08002d60 	.word	0x08002d60
 800211c:	08002049 	.word	0x08002049

08002120 <__sfp>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	4607      	mov	r7, r0
 8002124:	f7ff ffac 	bl	8002080 <__sfp_lock_acquire>
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <__sfp+0x84>)
 800212a:	681e      	ldr	r6, [r3, #0]
 800212c:	69b3      	ldr	r3, [r6, #24]
 800212e:	b913      	cbnz	r3, 8002136 <__sfp+0x16>
 8002130:	4630      	mov	r0, r6
 8002132:	f7ff ffbd 	bl	80020b0 <__sinit>
 8002136:	3648      	adds	r6, #72	; 0x48
 8002138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800213c:	3b01      	subs	r3, #1
 800213e:	d503      	bpl.n	8002148 <__sfp+0x28>
 8002140:	6833      	ldr	r3, [r6, #0]
 8002142:	b30b      	cbz	r3, 8002188 <__sfp+0x68>
 8002144:	6836      	ldr	r6, [r6, #0]
 8002146:	e7f7      	b.n	8002138 <__sfp+0x18>
 8002148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800214c:	b9d5      	cbnz	r5, 8002184 <__sfp+0x64>
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <__sfp+0x88>)
 8002150:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002154:	60e3      	str	r3, [r4, #12]
 8002156:	6665      	str	r5, [r4, #100]	; 0x64
 8002158:	f000 f847 	bl	80021ea <__retarget_lock_init_recursive>
 800215c:	f7ff ff96 	bl	800208c <__sfp_lock_release>
 8002160:	2208      	movs	r2, #8
 8002162:	4629      	mov	r1, r5
 8002164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800216c:	6025      	str	r5, [r4, #0]
 800216e:	61a5      	str	r5, [r4, #24]
 8002170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002174:	f7ff fe6e 	bl	8001e54 <memset>
 8002178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800217c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002180:	4620      	mov	r0, r4
 8002182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002184:	3468      	adds	r4, #104	; 0x68
 8002186:	e7d9      	b.n	800213c <__sfp+0x1c>
 8002188:	2104      	movs	r1, #4
 800218a:	4638      	mov	r0, r7
 800218c:	f7ff ff62 	bl	8002054 <__sfmoreglue>
 8002190:	4604      	mov	r4, r0
 8002192:	6030      	str	r0, [r6, #0]
 8002194:	2800      	cmp	r0, #0
 8002196:	d1d5      	bne.n	8002144 <__sfp+0x24>
 8002198:	f7ff ff78 	bl	800208c <__sfp_lock_release>
 800219c:	230c      	movs	r3, #12
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	e7ee      	b.n	8002180 <__sfp+0x60>
 80021a2:	bf00      	nop
 80021a4:	08002d60 	.word	0x08002d60
 80021a8:	ffff0001 	.word	0xffff0001

080021ac <_fwalk_reent>:
 80021ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021b0:	4606      	mov	r6, r0
 80021b2:	4688      	mov	r8, r1
 80021b4:	2700      	movs	r7, #0
 80021b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021be:	f1b9 0901 	subs.w	r9, r9, #1
 80021c2:	d505      	bpl.n	80021d0 <_fwalk_reent+0x24>
 80021c4:	6824      	ldr	r4, [r4, #0]
 80021c6:	2c00      	cmp	r4, #0
 80021c8:	d1f7      	bne.n	80021ba <_fwalk_reent+0xe>
 80021ca:	4638      	mov	r0, r7
 80021cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d0:	89ab      	ldrh	r3, [r5, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d907      	bls.n	80021e6 <_fwalk_reent+0x3a>
 80021d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021da:	3301      	adds	r3, #1
 80021dc:	d003      	beq.n	80021e6 <_fwalk_reent+0x3a>
 80021de:	4629      	mov	r1, r5
 80021e0:	4630      	mov	r0, r6
 80021e2:	47c0      	blx	r8
 80021e4:	4307      	orrs	r7, r0
 80021e6:	3568      	adds	r5, #104	; 0x68
 80021e8:	e7e9      	b.n	80021be <_fwalk_reent+0x12>

080021ea <__retarget_lock_init_recursive>:
 80021ea:	4770      	bx	lr

080021ec <__retarget_lock_acquire_recursive>:
 80021ec:	4770      	bx	lr

080021ee <__retarget_lock_release_recursive>:
 80021ee:	4770      	bx	lr

080021f0 <__malloc_lock>:
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <__malloc_lock+0x8>)
 80021f2:	f7ff bffb 	b.w	80021ec <__retarget_lock_acquire_recursive>
 80021f6:	bf00      	nop
 80021f8:	20000134 	.word	0x20000134

080021fc <__malloc_unlock>:
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <__malloc_unlock+0x8>)
 80021fe:	f7ff bff6 	b.w	80021ee <__retarget_lock_release_recursive>
 8002202:	bf00      	nop
 8002204:	20000134 	.word	0x20000134

08002208 <__sfputc_r>:
 8002208:	6893      	ldr	r3, [r2, #8]
 800220a:	b410      	push	{r4}
 800220c:	3b01      	subs	r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	6093      	str	r3, [r2, #8]
 8002212:	da07      	bge.n	8002224 <__sfputc_r+0x1c>
 8002214:	6994      	ldr	r4, [r2, #24]
 8002216:	42a3      	cmp	r3, r4
 8002218:	db01      	blt.n	800221e <__sfputc_r+0x16>
 800221a:	290a      	cmp	r1, #10
 800221c:	d102      	bne.n	8002224 <__sfputc_r+0x1c>
 800221e:	bc10      	pop	{r4}
 8002220:	f000 bb24 	b.w	800286c <__swbuf_r>
 8002224:	6813      	ldr	r3, [r2, #0]
 8002226:	1c58      	adds	r0, r3, #1
 8002228:	6010      	str	r0, [r2, #0]
 800222a:	7019      	strb	r1, [r3, #0]
 800222c:	4608      	mov	r0, r1
 800222e:	bc10      	pop	{r4}
 8002230:	4770      	bx	lr

08002232 <__sfputs_r>:
 8002232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002234:	4606      	mov	r6, r0
 8002236:	460f      	mov	r7, r1
 8002238:	4614      	mov	r4, r2
 800223a:	18d5      	adds	r5, r2, r3
 800223c:	42ac      	cmp	r4, r5
 800223e:	d101      	bne.n	8002244 <__sfputs_r+0x12>
 8002240:	2000      	movs	r0, #0
 8002242:	e007      	b.n	8002254 <__sfputs_r+0x22>
 8002244:	463a      	mov	r2, r7
 8002246:	4630      	mov	r0, r6
 8002248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800224c:	f7ff ffdc 	bl	8002208 <__sfputc_r>
 8002250:	1c43      	adds	r3, r0, #1
 8002252:	d1f3      	bne.n	800223c <__sfputs_r+0xa>
 8002254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002258 <_vfiprintf_r>:
 8002258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225c:	460d      	mov	r5, r1
 800225e:	4614      	mov	r4, r2
 8002260:	4698      	mov	r8, r3
 8002262:	4606      	mov	r6, r0
 8002264:	b09d      	sub	sp, #116	; 0x74
 8002266:	b118      	cbz	r0, 8002270 <_vfiprintf_r+0x18>
 8002268:	6983      	ldr	r3, [r0, #24]
 800226a:	b90b      	cbnz	r3, 8002270 <_vfiprintf_r+0x18>
 800226c:	f7ff ff20 	bl	80020b0 <__sinit>
 8002270:	4b89      	ldr	r3, [pc, #548]	; (8002498 <_vfiprintf_r+0x240>)
 8002272:	429d      	cmp	r5, r3
 8002274:	d11b      	bne.n	80022ae <_vfiprintf_r+0x56>
 8002276:	6875      	ldr	r5, [r6, #4]
 8002278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800227a:	07d9      	lsls	r1, r3, #31
 800227c:	d405      	bmi.n	800228a <_vfiprintf_r+0x32>
 800227e:	89ab      	ldrh	r3, [r5, #12]
 8002280:	059a      	lsls	r2, r3, #22
 8002282:	d402      	bmi.n	800228a <_vfiprintf_r+0x32>
 8002284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002286:	f7ff ffb1 	bl	80021ec <__retarget_lock_acquire_recursive>
 800228a:	89ab      	ldrh	r3, [r5, #12]
 800228c:	071b      	lsls	r3, r3, #28
 800228e:	d501      	bpl.n	8002294 <_vfiprintf_r+0x3c>
 8002290:	692b      	ldr	r3, [r5, #16]
 8002292:	b9eb      	cbnz	r3, 80022d0 <_vfiprintf_r+0x78>
 8002294:	4629      	mov	r1, r5
 8002296:	4630      	mov	r0, r6
 8002298:	f000 fb4c 	bl	8002934 <__swsetup_r>
 800229c:	b1c0      	cbz	r0, 80022d0 <_vfiprintf_r+0x78>
 800229e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022a0:	07dc      	lsls	r4, r3, #31
 80022a2:	d50e      	bpl.n	80022c2 <_vfiprintf_r+0x6a>
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	b01d      	add	sp, #116	; 0x74
 80022aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ae:	4b7b      	ldr	r3, [pc, #492]	; (800249c <_vfiprintf_r+0x244>)
 80022b0:	429d      	cmp	r5, r3
 80022b2:	d101      	bne.n	80022b8 <_vfiprintf_r+0x60>
 80022b4:	68b5      	ldr	r5, [r6, #8]
 80022b6:	e7df      	b.n	8002278 <_vfiprintf_r+0x20>
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <_vfiprintf_r+0x248>)
 80022ba:	429d      	cmp	r5, r3
 80022bc:	bf08      	it	eq
 80022be:	68f5      	ldreq	r5, [r6, #12]
 80022c0:	e7da      	b.n	8002278 <_vfiprintf_r+0x20>
 80022c2:	89ab      	ldrh	r3, [r5, #12]
 80022c4:	0598      	lsls	r0, r3, #22
 80022c6:	d4ed      	bmi.n	80022a4 <_vfiprintf_r+0x4c>
 80022c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022ca:	f7ff ff90 	bl	80021ee <__retarget_lock_release_recursive>
 80022ce:	e7e9      	b.n	80022a4 <_vfiprintf_r+0x4c>
 80022d0:	2300      	movs	r3, #0
 80022d2:	9309      	str	r3, [sp, #36]	; 0x24
 80022d4:	2320      	movs	r3, #32
 80022d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022da:	2330      	movs	r3, #48	; 0x30
 80022dc:	f04f 0901 	mov.w	r9, #1
 80022e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80022e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80024a4 <_vfiprintf_r+0x24c>
 80022e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022ec:	4623      	mov	r3, r4
 80022ee:	469a      	mov	sl, r3
 80022f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022f4:	b10a      	cbz	r2, 80022fa <_vfiprintf_r+0xa2>
 80022f6:	2a25      	cmp	r2, #37	; 0x25
 80022f8:	d1f9      	bne.n	80022ee <_vfiprintf_r+0x96>
 80022fa:	ebba 0b04 	subs.w	fp, sl, r4
 80022fe:	d00b      	beq.n	8002318 <_vfiprintf_r+0xc0>
 8002300:	465b      	mov	r3, fp
 8002302:	4622      	mov	r2, r4
 8002304:	4629      	mov	r1, r5
 8002306:	4630      	mov	r0, r6
 8002308:	f7ff ff93 	bl	8002232 <__sfputs_r>
 800230c:	3001      	adds	r0, #1
 800230e:	f000 80aa 	beq.w	8002466 <_vfiprintf_r+0x20e>
 8002312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002314:	445a      	add	r2, fp
 8002316:	9209      	str	r2, [sp, #36]	; 0x24
 8002318:	f89a 3000 	ldrb.w	r3, [sl]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a2 	beq.w	8002466 <_vfiprintf_r+0x20e>
 8002322:	2300      	movs	r3, #0
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800232c:	f10a 0a01 	add.w	sl, sl, #1
 8002330:	9304      	str	r3, [sp, #16]
 8002332:	9307      	str	r3, [sp, #28]
 8002334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002338:	931a      	str	r3, [sp, #104]	; 0x68
 800233a:	4654      	mov	r4, sl
 800233c:	2205      	movs	r2, #5
 800233e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002342:	4858      	ldr	r0, [pc, #352]	; (80024a4 <_vfiprintf_r+0x24c>)
 8002344:	f000 fcac 	bl	8002ca0 <memchr>
 8002348:	9a04      	ldr	r2, [sp, #16]
 800234a:	b9d8      	cbnz	r0, 8002384 <_vfiprintf_r+0x12c>
 800234c:	06d1      	lsls	r1, r2, #27
 800234e:	bf44      	itt	mi
 8002350:	2320      	movmi	r3, #32
 8002352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002356:	0713      	lsls	r3, r2, #28
 8002358:	bf44      	itt	mi
 800235a:	232b      	movmi	r3, #43	; 0x2b
 800235c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002360:	f89a 3000 	ldrb.w	r3, [sl]
 8002364:	2b2a      	cmp	r3, #42	; 0x2a
 8002366:	d015      	beq.n	8002394 <_vfiprintf_r+0x13c>
 8002368:	4654      	mov	r4, sl
 800236a:	2000      	movs	r0, #0
 800236c:	f04f 0c0a 	mov.w	ip, #10
 8002370:	9a07      	ldr	r2, [sp, #28]
 8002372:	4621      	mov	r1, r4
 8002374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002378:	3b30      	subs	r3, #48	; 0x30
 800237a:	2b09      	cmp	r3, #9
 800237c:	d94e      	bls.n	800241c <_vfiprintf_r+0x1c4>
 800237e:	b1b0      	cbz	r0, 80023ae <_vfiprintf_r+0x156>
 8002380:	9207      	str	r2, [sp, #28]
 8002382:	e014      	b.n	80023ae <_vfiprintf_r+0x156>
 8002384:	eba0 0308 	sub.w	r3, r0, r8
 8002388:	fa09 f303 	lsl.w	r3, r9, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	46a2      	mov	sl, r4
 8002390:	9304      	str	r3, [sp, #16]
 8002392:	e7d2      	b.n	800233a <_vfiprintf_r+0xe2>
 8002394:	9b03      	ldr	r3, [sp, #12]
 8002396:	1d19      	adds	r1, r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	9103      	str	r1, [sp, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	bfbb      	ittet	lt
 80023a0:	425b      	neglt	r3, r3
 80023a2:	f042 0202 	orrlt.w	r2, r2, #2
 80023a6:	9307      	strge	r3, [sp, #28]
 80023a8:	9307      	strlt	r3, [sp, #28]
 80023aa:	bfb8      	it	lt
 80023ac:	9204      	strlt	r2, [sp, #16]
 80023ae:	7823      	ldrb	r3, [r4, #0]
 80023b0:	2b2e      	cmp	r3, #46	; 0x2e
 80023b2:	d10c      	bne.n	80023ce <_vfiprintf_r+0x176>
 80023b4:	7863      	ldrb	r3, [r4, #1]
 80023b6:	2b2a      	cmp	r3, #42	; 0x2a
 80023b8:	d135      	bne.n	8002426 <_vfiprintf_r+0x1ce>
 80023ba:	9b03      	ldr	r3, [sp, #12]
 80023bc:	3402      	adds	r4, #2
 80023be:	1d1a      	adds	r2, r3, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	9203      	str	r2, [sp, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bfb8      	it	lt
 80023c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80023cc:	9305      	str	r3, [sp, #20]
 80023ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80024b4 <_vfiprintf_r+0x25c>
 80023d2:	2203      	movs	r2, #3
 80023d4:	4650      	mov	r0, sl
 80023d6:	7821      	ldrb	r1, [r4, #0]
 80023d8:	f000 fc62 	bl	8002ca0 <memchr>
 80023dc:	b140      	cbz	r0, 80023f0 <_vfiprintf_r+0x198>
 80023de:	2340      	movs	r3, #64	; 0x40
 80023e0:	eba0 000a 	sub.w	r0, r0, sl
 80023e4:	fa03 f000 	lsl.w	r0, r3, r0
 80023e8:	9b04      	ldr	r3, [sp, #16]
 80023ea:	3401      	adds	r4, #1
 80023ec:	4303      	orrs	r3, r0
 80023ee:	9304      	str	r3, [sp, #16]
 80023f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023f4:	2206      	movs	r2, #6
 80023f6:	482c      	ldr	r0, [pc, #176]	; (80024a8 <_vfiprintf_r+0x250>)
 80023f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023fc:	f000 fc50 	bl	8002ca0 <memchr>
 8002400:	2800      	cmp	r0, #0
 8002402:	d03f      	beq.n	8002484 <_vfiprintf_r+0x22c>
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <_vfiprintf_r+0x254>)
 8002406:	bb1b      	cbnz	r3, 8002450 <_vfiprintf_r+0x1f8>
 8002408:	9b03      	ldr	r3, [sp, #12]
 800240a:	3307      	adds	r3, #7
 800240c:	f023 0307 	bic.w	r3, r3, #7
 8002410:	3308      	adds	r3, #8
 8002412:	9303      	str	r3, [sp, #12]
 8002414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002416:	443b      	add	r3, r7
 8002418:	9309      	str	r3, [sp, #36]	; 0x24
 800241a:	e767      	b.n	80022ec <_vfiprintf_r+0x94>
 800241c:	460c      	mov	r4, r1
 800241e:	2001      	movs	r0, #1
 8002420:	fb0c 3202 	mla	r2, ip, r2, r3
 8002424:	e7a5      	b.n	8002372 <_vfiprintf_r+0x11a>
 8002426:	2300      	movs	r3, #0
 8002428:	f04f 0c0a 	mov.w	ip, #10
 800242c:	4619      	mov	r1, r3
 800242e:	3401      	adds	r4, #1
 8002430:	9305      	str	r3, [sp, #20]
 8002432:	4620      	mov	r0, r4
 8002434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002438:	3a30      	subs	r2, #48	; 0x30
 800243a:	2a09      	cmp	r2, #9
 800243c:	d903      	bls.n	8002446 <_vfiprintf_r+0x1ee>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0c5      	beq.n	80023ce <_vfiprintf_r+0x176>
 8002442:	9105      	str	r1, [sp, #20]
 8002444:	e7c3      	b.n	80023ce <_vfiprintf_r+0x176>
 8002446:	4604      	mov	r4, r0
 8002448:	2301      	movs	r3, #1
 800244a:	fb0c 2101 	mla	r1, ip, r1, r2
 800244e:	e7f0      	b.n	8002432 <_vfiprintf_r+0x1da>
 8002450:	ab03      	add	r3, sp, #12
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	462a      	mov	r2, r5
 8002456:	4630      	mov	r0, r6
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <_vfiprintf_r+0x258>)
 800245a:	a904      	add	r1, sp, #16
 800245c:	f3af 8000 	nop.w
 8002460:	4607      	mov	r7, r0
 8002462:	1c78      	adds	r0, r7, #1
 8002464:	d1d6      	bne.n	8002414 <_vfiprintf_r+0x1bc>
 8002466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002468:	07d9      	lsls	r1, r3, #31
 800246a:	d405      	bmi.n	8002478 <_vfiprintf_r+0x220>
 800246c:	89ab      	ldrh	r3, [r5, #12]
 800246e:	059a      	lsls	r2, r3, #22
 8002470:	d402      	bmi.n	8002478 <_vfiprintf_r+0x220>
 8002472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002474:	f7ff febb 	bl	80021ee <__retarget_lock_release_recursive>
 8002478:	89ab      	ldrh	r3, [r5, #12]
 800247a:	065b      	lsls	r3, r3, #25
 800247c:	f53f af12 	bmi.w	80022a4 <_vfiprintf_r+0x4c>
 8002480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002482:	e711      	b.n	80022a8 <_vfiprintf_r+0x50>
 8002484:	ab03      	add	r3, sp, #12
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	462a      	mov	r2, r5
 800248a:	4630      	mov	r0, r6
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_vfiprintf_r+0x258>)
 800248e:	a904      	add	r1, sp, #16
 8002490:	f000 f882 	bl	8002598 <_printf_i>
 8002494:	e7e4      	b.n	8002460 <_vfiprintf_r+0x208>
 8002496:	bf00      	nop
 8002498:	08002d84 	.word	0x08002d84
 800249c:	08002da4 	.word	0x08002da4
 80024a0:	08002d64 	.word	0x08002d64
 80024a4:	08002dc4 	.word	0x08002dc4
 80024a8:	08002dce 	.word	0x08002dce
 80024ac:	00000000 	.word	0x00000000
 80024b0:	08002233 	.word	0x08002233
 80024b4:	08002dca 	.word	0x08002dca

080024b8 <_printf_common>:
 80024b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	4616      	mov	r6, r2
 80024be:	4699      	mov	r9, r3
 80024c0:	688a      	ldr	r2, [r1, #8]
 80024c2:	690b      	ldr	r3, [r1, #16]
 80024c4:	4607      	mov	r7, r0
 80024c6:	4293      	cmp	r3, r2
 80024c8:	bfb8      	it	lt
 80024ca:	4613      	movlt	r3, r2
 80024cc:	6033      	str	r3, [r6, #0]
 80024ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024d2:	460c      	mov	r4, r1
 80024d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024d8:	b10a      	cbz	r2, 80024de <_printf_common+0x26>
 80024da:	3301      	adds	r3, #1
 80024dc:	6033      	str	r3, [r6, #0]
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	0699      	lsls	r1, r3, #26
 80024e2:	bf42      	ittt	mi
 80024e4:	6833      	ldrmi	r3, [r6, #0]
 80024e6:	3302      	addmi	r3, #2
 80024e8:	6033      	strmi	r3, [r6, #0]
 80024ea:	6825      	ldr	r5, [r4, #0]
 80024ec:	f015 0506 	ands.w	r5, r5, #6
 80024f0:	d106      	bne.n	8002500 <_printf_common+0x48>
 80024f2:	f104 0a19 	add.w	sl, r4, #25
 80024f6:	68e3      	ldr	r3, [r4, #12]
 80024f8:	6832      	ldr	r2, [r6, #0]
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	42ab      	cmp	r3, r5
 80024fe:	dc28      	bgt.n	8002552 <_printf_common+0x9a>
 8002500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002504:	1e13      	subs	r3, r2, #0
 8002506:	6822      	ldr	r2, [r4, #0]
 8002508:	bf18      	it	ne
 800250a:	2301      	movne	r3, #1
 800250c:	0692      	lsls	r2, r2, #26
 800250e:	d42d      	bmi.n	800256c <_printf_common+0xb4>
 8002510:	4649      	mov	r1, r9
 8002512:	4638      	mov	r0, r7
 8002514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002518:	47c0      	blx	r8
 800251a:	3001      	adds	r0, #1
 800251c:	d020      	beq.n	8002560 <_printf_common+0xa8>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	68e5      	ldr	r5, [r4, #12]
 8002522:	f003 0306 	and.w	r3, r3, #6
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf18      	it	ne
 800252a:	2500      	movne	r5, #0
 800252c:	6832      	ldr	r2, [r6, #0]
 800252e:	f04f 0600 	mov.w	r6, #0
 8002532:	68a3      	ldr	r3, [r4, #8]
 8002534:	bf08      	it	eq
 8002536:	1aad      	subeq	r5, r5, r2
 8002538:	6922      	ldr	r2, [r4, #16]
 800253a:	bf08      	it	eq
 800253c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002540:	4293      	cmp	r3, r2
 8002542:	bfc4      	itt	gt
 8002544:	1a9b      	subgt	r3, r3, r2
 8002546:	18ed      	addgt	r5, r5, r3
 8002548:	341a      	adds	r4, #26
 800254a:	42b5      	cmp	r5, r6
 800254c:	d11a      	bne.n	8002584 <_printf_common+0xcc>
 800254e:	2000      	movs	r0, #0
 8002550:	e008      	b.n	8002564 <_printf_common+0xac>
 8002552:	2301      	movs	r3, #1
 8002554:	4652      	mov	r2, sl
 8002556:	4649      	mov	r1, r9
 8002558:	4638      	mov	r0, r7
 800255a:	47c0      	blx	r8
 800255c:	3001      	adds	r0, #1
 800255e:	d103      	bne.n	8002568 <_printf_common+0xb0>
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002568:	3501      	adds	r5, #1
 800256a:	e7c4      	b.n	80024f6 <_printf_common+0x3e>
 800256c:	2030      	movs	r0, #48	; 0x30
 800256e:	18e1      	adds	r1, r4, r3
 8002570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800257a:	4422      	add	r2, r4
 800257c:	3302      	adds	r3, #2
 800257e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002582:	e7c5      	b.n	8002510 <_printf_common+0x58>
 8002584:	2301      	movs	r3, #1
 8002586:	4622      	mov	r2, r4
 8002588:	4649      	mov	r1, r9
 800258a:	4638      	mov	r0, r7
 800258c:	47c0      	blx	r8
 800258e:	3001      	adds	r0, #1
 8002590:	d0e6      	beq.n	8002560 <_printf_common+0xa8>
 8002592:	3601      	adds	r6, #1
 8002594:	e7d9      	b.n	800254a <_printf_common+0x92>
	...

08002598 <_printf_i>:
 8002598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	460c      	mov	r4, r1
 800259e:	7e27      	ldrb	r7, [r4, #24]
 80025a0:	4691      	mov	r9, r2
 80025a2:	2f78      	cmp	r7, #120	; 0x78
 80025a4:	4680      	mov	r8, r0
 80025a6:	469a      	mov	sl, r3
 80025a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025ae:	d807      	bhi.n	80025c0 <_printf_i+0x28>
 80025b0:	2f62      	cmp	r7, #98	; 0x62
 80025b2:	d80a      	bhi.n	80025ca <_printf_i+0x32>
 80025b4:	2f00      	cmp	r7, #0
 80025b6:	f000 80d9 	beq.w	800276c <_printf_i+0x1d4>
 80025ba:	2f58      	cmp	r7, #88	; 0x58
 80025bc:	f000 80a4 	beq.w	8002708 <_printf_i+0x170>
 80025c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80025c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025c8:	e03a      	b.n	8002640 <_printf_i+0xa8>
 80025ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025ce:	2b15      	cmp	r3, #21
 80025d0:	d8f6      	bhi.n	80025c0 <_printf_i+0x28>
 80025d2:	a001      	add	r0, pc, #4	; (adr r0, 80025d8 <_printf_i+0x40>)
 80025d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025d8:	08002631 	.word	0x08002631
 80025dc:	08002645 	.word	0x08002645
 80025e0:	080025c1 	.word	0x080025c1
 80025e4:	080025c1 	.word	0x080025c1
 80025e8:	080025c1 	.word	0x080025c1
 80025ec:	080025c1 	.word	0x080025c1
 80025f0:	08002645 	.word	0x08002645
 80025f4:	080025c1 	.word	0x080025c1
 80025f8:	080025c1 	.word	0x080025c1
 80025fc:	080025c1 	.word	0x080025c1
 8002600:	080025c1 	.word	0x080025c1
 8002604:	08002753 	.word	0x08002753
 8002608:	08002675 	.word	0x08002675
 800260c:	08002735 	.word	0x08002735
 8002610:	080025c1 	.word	0x080025c1
 8002614:	080025c1 	.word	0x080025c1
 8002618:	08002775 	.word	0x08002775
 800261c:	080025c1 	.word	0x080025c1
 8002620:	08002675 	.word	0x08002675
 8002624:	080025c1 	.word	0x080025c1
 8002628:	080025c1 	.word	0x080025c1
 800262c:	0800273d 	.word	0x0800273d
 8002630:	680b      	ldr	r3, [r1, #0]
 8002632:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002636:	1d1a      	adds	r2, r3, #4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	600a      	str	r2, [r1, #0]
 800263c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002640:	2301      	movs	r3, #1
 8002642:	e0a4      	b.n	800278e <_printf_i+0x1f6>
 8002644:	6825      	ldr	r5, [r4, #0]
 8002646:	6808      	ldr	r0, [r1, #0]
 8002648:	062e      	lsls	r6, r5, #24
 800264a:	f100 0304 	add.w	r3, r0, #4
 800264e:	d50a      	bpl.n	8002666 <_printf_i+0xce>
 8002650:	6805      	ldr	r5, [r0, #0]
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	2d00      	cmp	r5, #0
 8002656:	da03      	bge.n	8002660 <_printf_i+0xc8>
 8002658:	232d      	movs	r3, #45	; 0x2d
 800265a:	426d      	negs	r5, r5
 800265c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002660:	230a      	movs	r3, #10
 8002662:	485e      	ldr	r0, [pc, #376]	; (80027dc <_printf_i+0x244>)
 8002664:	e019      	b.n	800269a <_printf_i+0x102>
 8002666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800266a:	6805      	ldr	r5, [r0, #0]
 800266c:	600b      	str	r3, [r1, #0]
 800266e:	bf18      	it	ne
 8002670:	b22d      	sxthne	r5, r5
 8002672:	e7ef      	b.n	8002654 <_printf_i+0xbc>
 8002674:	680b      	ldr	r3, [r1, #0]
 8002676:	6825      	ldr	r5, [r4, #0]
 8002678:	1d18      	adds	r0, r3, #4
 800267a:	6008      	str	r0, [r1, #0]
 800267c:	0628      	lsls	r0, r5, #24
 800267e:	d501      	bpl.n	8002684 <_printf_i+0xec>
 8002680:	681d      	ldr	r5, [r3, #0]
 8002682:	e002      	b.n	800268a <_printf_i+0xf2>
 8002684:	0669      	lsls	r1, r5, #25
 8002686:	d5fb      	bpl.n	8002680 <_printf_i+0xe8>
 8002688:	881d      	ldrh	r5, [r3, #0]
 800268a:	2f6f      	cmp	r7, #111	; 0x6f
 800268c:	bf0c      	ite	eq
 800268e:	2308      	moveq	r3, #8
 8002690:	230a      	movne	r3, #10
 8002692:	4852      	ldr	r0, [pc, #328]	; (80027dc <_printf_i+0x244>)
 8002694:	2100      	movs	r1, #0
 8002696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800269a:	6866      	ldr	r6, [r4, #4]
 800269c:	2e00      	cmp	r6, #0
 800269e:	bfa8      	it	ge
 80026a0:	6821      	ldrge	r1, [r4, #0]
 80026a2:	60a6      	str	r6, [r4, #8]
 80026a4:	bfa4      	itt	ge
 80026a6:	f021 0104 	bicge.w	r1, r1, #4
 80026aa:	6021      	strge	r1, [r4, #0]
 80026ac:	b90d      	cbnz	r5, 80026b2 <_printf_i+0x11a>
 80026ae:	2e00      	cmp	r6, #0
 80026b0:	d04d      	beq.n	800274e <_printf_i+0x1b6>
 80026b2:	4616      	mov	r6, r2
 80026b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80026b8:	fb03 5711 	mls	r7, r3, r1, r5
 80026bc:	5dc7      	ldrb	r7, [r0, r7]
 80026be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026c2:	462f      	mov	r7, r5
 80026c4:	42bb      	cmp	r3, r7
 80026c6:	460d      	mov	r5, r1
 80026c8:	d9f4      	bls.n	80026b4 <_printf_i+0x11c>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d10b      	bne.n	80026e6 <_printf_i+0x14e>
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	07df      	lsls	r7, r3, #31
 80026d2:	d508      	bpl.n	80026e6 <_printf_i+0x14e>
 80026d4:	6923      	ldr	r3, [r4, #16]
 80026d6:	6861      	ldr	r1, [r4, #4]
 80026d8:	4299      	cmp	r1, r3
 80026da:	bfde      	ittt	le
 80026dc:	2330      	movle	r3, #48	; 0x30
 80026de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026e6:	1b92      	subs	r2, r2, r6
 80026e8:	6122      	str	r2, [r4, #16]
 80026ea:	464b      	mov	r3, r9
 80026ec:	4621      	mov	r1, r4
 80026ee:	4640      	mov	r0, r8
 80026f0:	f8cd a000 	str.w	sl, [sp]
 80026f4:	aa03      	add	r2, sp, #12
 80026f6:	f7ff fedf 	bl	80024b8 <_printf_common>
 80026fa:	3001      	adds	r0, #1
 80026fc:	d14c      	bne.n	8002798 <_printf_i+0x200>
 80026fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002702:	b004      	add	sp, #16
 8002704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002708:	4834      	ldr	r0, [pc, #208]	; (80027dc <_printf_i+0x244>)
 800270a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800270e:	680e      	ldr	r6, [r1, #0]
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	f856 5b04 	ldr.w	r5, [r6], #4
 8002716:	061f      	lsls	r7, r3, #24
 8002718:	600e      	str	r6, [r1, #0]
 800271a:	d514      	bpl.n	8002746 <_printf_i+0x1ae>
 800271c:	07d9      	lsls	r1, r3, #31
 800271e:	bf44      	itt	mi
 8002720:	f043 0320 	orrmi.w	r3, r3, #32
 8002724:	6023      	strmi	r3, [r4, #0]
 8002726:	b91d      	cbnz	r5, 8002730 <_printf_i+0x198>
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	f023 0320 	bic.w	r3, r3, #32
 800272e:	6023      	str	r3, [r4, #0]
 8002730:	2310      	movs	r3, #16
 8002732:	e7af      	b.n	8002694 <_printf_i+0xfc>
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	f043 0320 	orr.w	r3, r3, #32
 800273a:	6023      	str	r3, [r4, #0]
 800273c:	2378      	movs	r3, #120	; 0x78
 800273e:	4828      	ldr	r0, [pc, #160]	; (80027e0 <_printf_i+0x248>)
 8002740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002744:	e7e3      	b.n	800270e <_printf_i+0x176>
 8002746:	065e      	lsls	r6, r3, #25
 8002748:	bf48      	it	mi
 800274a:	b2ad      	uxthmi	r5, r5
 800274c:	e7e6      	b.n	800271c <_printf_i+0x184>
 800274e:	4616      	mov	r6, r2
 8002750:	e7bb      	b.n	80026ca <_printf_i+0x132>
 8002752:	680b      	ldr	r3, [r1, #0]
 8002754:	6826      	ldr	r6, [r4, #0]
 8002756:	1d1d      	adds	r5, r3, #4
 8002758:	6960      	ldr	r0, [r4, #20]
 800275a:	600d      	str	r5, [r1, #0]
 800275c:	0635      	lsls	r5, r6, #24
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	d501      	bpl.n	8002766 <_printf_i+0x1ce>
 8002762:	6018      	str	r0, [r3, #0]
 8002764:	e002      	b.n	800276c <_printf_i+0x1d4>
 8002766:	0671      	lsls	r1, r6, #25
 8002768:	d5fb      	bpl.n	8002762 <_printf_i+0x1ca>
 800276a:	8018      	strh	r0, [r3, #0]
 800276c:	2300      	movs	r3, #0
 800276e:	4616      	mov	r6, r2
 8002770:	6123      	str	r3, [r4, #16]
 8002772:	e7ba      	b.n	80026ea <_printf_i+0x152>
 8002774:	680b      	ldr	r3, [r1, #0]
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	600a      	str	r2, [r1, #0]
 800277a:	681e      	ldr	r6, [r3, #0]
 800277c:	2100      	movs	r1, #0
 800277e:	4630      	mov	r0, r6
 8002780:	6862      	ldr	r2, [r4, #4]
 8002782:	f000 fa8d 	bl	8002ca0 <memchr>
 8002786:	b108      	cbz	r0, 800278c <_printf_i+0x1f4>
 8002788:	1b80      	subs	r0, r0, r6
 800278a:	6060      	str	r0, [r4, #4]
 800278c:	6863      	ldr	r3, [r4, #4]
 800278e:	6123      	str	r3, [r4, #16]
 8002790:	2300      	movs	r3, #0
 8002792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002796:	e7a8      	b.n	80026ea <_printf_i+0x152>
 8002798:	4632      	mov	r2, r6
 800279a:	4649      	mov	r1, r9
 800279c:	4640      	mov	r0, r8
 800279e:	6923      	ldr	r3, [r4, #16]
 80027a0:	47d0      	blx	sl
 80027a2:	3001      	adds	r0, #1
 80027a4:	d0ab      	beq.n	80026fe <_printf_i+0x166>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	079b      	lsls	r3, r3, #30
 80027aa:	d413      	bmi.n	80027d4 <_printf_i+0x23c>
 80027ac:	68e0      	ldr	r0, [r4, #12]
 80027ae:	9b03      	ldr	r3, [sp, #12]
 80027b0:	4298      	cmp	r0, r3
 80027b2:	bfb8      	it	lt
 80027b4:	4618      	movlt	r0, r3
 80027b6:	e7a4      	b.n	8002702 <_printf_i+0x16a>
 80027b8:	2301      	movs	r3, #1
 80027ba:	4632      	mov	r2, r6
 80027bc:	4649      	mov	r1, r9
 80027be:	4640      	mov	r0, r8
 80027c0:	47d0      	blx	sl
 80027c2:	3001      	adds	r0, #1
 80027c4:	d09b      	beq.n	80026fe <_printf_i+0x166>
 80027c6:	3501      	adds	r5, #1
 80027c8:	68e3      	ldr	r3, [r4, #12]
 80027ca:	9903      	ldr	r1, [sp, #12]
 80027cc:	1a5b      	subs	r3, r3, r1
 80027ce:	42ab      	cmp	r3, r5
 80027d0:	dcf2      	bgt.n	80027b8 <_printf_i+0x220>
 80027d2:	e7eb      	b.n	80027ac <_printf_i+0x214>
 80027d4:	2500      	movs	r5, #0
 80027d6:	f104 0619 	add.w	r6, r4, #25
 80027da:	e7f5      	b.n	80027c8 <_printf_i+0x230>
 80027dc:	08002dd5 	.word	0x08002dd5
 80027e0:	08002de6 	.word	0x08002de6

080027e4 <__sread>:
 80027e4:	b510      	push	{r4, lr}
 80027e6:	460c      	mov	r4, r1
 80027e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ec:	f000 fa66 	bl	8002cbc <_read_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	bfab      	itete	ge
 80027f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027f6:	89a3      	ldrhlt	r3, [r4, #12]
 80027f8:	181b      	addge	r3, r3, r0
 80027fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027fe:	bfac      	ite	ge
 8002800:	6563      	strge	r3, [r4, #84]	; 0x54
 8002802:	81a3      	strhlt	r3, [r4, #12]
 8002804:	bd10      	pop	{r4, pc}

08002806 <__swrite>:
 8002806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800280a:	461f      	mov	r7, r3
 800280c:	898b      	ldrh	r3, [r1, #12]
 800280e:	4605      	mov	r5, r0
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	460c      	mov	r4, r1
 8002814:	4616      	mov	r6, r2
 8002816:	d505      	bpl.n	8002824 <__swrite+0x1e>
 8002818:	2302      	movs	r3, #2
 800281a:	2200      	movs	r2, #0
 800281c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002820:	f000 f9c8 	bl	8002bb4 <_lseek_r>
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	4632      	mov	r2, r6
 8002828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800282c:	81a3      	strh	r3, [r4, #12]
 800282e:	4628      	mov	r0, r5
 8002830:	463b      	mov	r3, r7
 8002832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800283a:	f000 b869 	b.w	8002910 <_write_r>

0800283e <__sseek>:
 800283e:	b510      	push	{r4, lr}
 8002840:	460c      	mov	r4, r1
 8002842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002846:	f000 f9b5 	bl	8002bb4 <_lseek_r>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	bf15      	itete	ne
 8002850:	6560      	strne	r0, [r4, #84]	; 0x54
 8002852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800285a:	81a3      	strheq	r3, [r4, #12]
 800285c:	bf18      	it	ne
 800285e:	81a3      	strhne	r3, [r4, #12]
 8002860:	bd10      	pop	{r4, pc}

08002862 <__sclose>:
 8002862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002866:	f000 b8d3 	b.w	8002a10 <_close_r>
	...

0800286c <__swbuf_r>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	460e      	mov	r6, r1
 8002870:	4614      	mov	r4, r2
 8002872:	4605      	mov	r5, r0
 8002874:	b118      	cbz	r0, 800287e <__swbuf_r+0x12>
 8002876:	6983      	ldr	r3, [r0, #24]
 8002878:	b90b      	cbnz	r3, 800287e <__swbuf_r+0x12>
 800287a:	f7ff fc19 	bl	80020b0 <__sinit>
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <__swbuf_r+0x98>)
 8002880:	429c      	cmp	r4, r3
 8002882:	d12b      	bne.n	80028dc <__swbuf_r+0x70>
 8002884:	686c      	ldr	r4, [r5, #4]
 8002886:	69a3      	ldr	r3, [r4, #24]
 8002888:	60a3      	str	r3, [r4, #8]
 800288a:	89a3      	ldrh	r3, [r4, #12]
 800288c:	071a      	lsls	r2, r3, #28
 800288e:	d52f      	bpl.n	80028f0 <__swbuf_r+0x84>
 8002890:	6923      	ldr	r3, [r4, #16]
 8002892:	b36b      	cbz	r3, 80028f0 <__swbuf_r+0x84>
 8002894:	6923      	ldr	r3, [r4, #16]
 8002896:	6820      	ldr	r0, [r4, #0]
 8002898:	b2f6      	uxtb	r6, r6
 800289a:	1ac0      	subs	r0, r0, r3
 800289c:	6963      	ldr	r3, [r4, #20]
 800289e:	4637      	mov	r7, r6
 80028a0:	4283      	cmp	r3, r0
 80028a2:	dc04      	bgt.n	80028ae <__swbuf_r+0x42>
 80028a4:	4621      	mov	r1, r4
 80028a6:	4628      	mov	r0, r5
 80028a8:	f000 f948 	bl	8002b3c <_fflush_r>
 80028ac:	bb30      	cbnz	r0, 80028fc <__swbuf_r+0x90>
 80028ae:	68a3      	ldr	r3, [r4, #8]
 80028b0:	3001      	adds	r0, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	60a3      	str	r3, [r4, #8]
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	6022      	str	r2, [r4, #0]
 80028bc:	701e      	strb	r6, [r3, #0]
 80028be:	6963      	ldr	r3, [r4, #20]
 80028c0:	4283      	cmp	r3, r0
 80028c2:	d004      	beq.n	80028ce <__swbuf_r+0x62>
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	07db      	lsls	r3, r3, #31
 80028c8:	d506      	bpl.n	80028d8 <__swbuf_r+0x6c>
 80028ca:	2e0a      	cmp	r6, #10
 80028cc:	d104      	bne.n	80028d8 <__swbuf_r+0x6c>
 80028ce:	4621      	mov	r1, r4
 80028d0:	4628      	mov	r0, r5
 80028d2:	f000 f933 	bl	8002b3c <_fflush_r>
 80028d6:	b988      	cbnz	r0, 80028fc <__swbuf_r+0x90>
 80028d8:	4638      	mov	r0, r7
 80028da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <__swbuf_r+0x9c>)
 80028de:	429c      	cmp	r4, r3
 80028e0:	d101      	bne.n	80028e6 <__swbuf_r+0x7a>
 80028e2:	68ac      	ldr	r4, [r5, #8]
 80028e4:	e7cf      	b.n	8002886 <__swbuf_r+0x1a>
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <__swbuf_r+0xa0>)
 80028e8:	429c      	cmp	r4, r3
 80028ea:	bf08      	it	eq
 80028ec:	68ec      	ldreq	r4, [r5, #12]
 80028ee:	e7ca      	b.n	8002886 <__swbuf_r+0x1a>
 80028f0:	4621      	mov	r1, r4
 80028f2:	4628      	mov	r0, r5
 80028f4:	f000 f81e 	bl	8002934 <__swsetup_r>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d0cb      	beq.n	8002894 <__swbuf_r+0x28>
 80028fc:	f04f 37ff 	mov.w	r7, #4294967295
 8002900:	e7ea      	b.n	80028d8 <__swbuf_r+0x6c>
 8002902:	bf00      	nop
 8002904:	08002d84 	.word	0x08002d84
 8002908:	08002da4 	.word	0x08002da4
 800290c:	08002d64 	.word	0x08002d64

08002910 <_write_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4604      	mov	r4, r0
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	2200      	movs	r2, #0
 800291a:	4d05      	ldr	r5, [pc, #20]	; (8002930 <_write_r+0x20>)
 800291c:	602a      	str	r2, [r5, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	f7fd fee3 	bl	80006ea <_write>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	d102      	bne.n	800292e <_write_r+0x1e>
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	b103      	cbz	r3, 800292e <_write_r+0x1e>
 800292c:	6023      	str	r3, [r4, #0]
 800292e:	bd38      	pop	{r3, r4, r5, pc}
 8002930:	2000013c 	.word	0x2000013c

08002934 <__swsetup_r>:
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <__swsetup_r+0xcc>)
 8002936:	b570      	push	{r4, r5, r6, lr}
 8002938:	681d      	ldr	r5, [r3, #0]
 800293a:	4606      	mov	r6, r0
 800293c:	460c      	mov	r4, r1
 800293e:	b125      	cbz	r5, 800294a <__swsetup_r+0x16>
 8002940:	69ab      	ldr	r3, [r5, #24]
 8002942:	b913      	cbnz	r3, 800294a <__swsetup_r+0x16>
 8002944:	4628      	mov	r0, r5
 8002946:	f7ff fbb3 	bl	80020b0 <__sinit>
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <__swsetup_r+0xd0>)
 800294c:	429c      	cmp	r4, r3
 800294e:	d10f      	bne.n	8002970 <__swsetup_r+0x3c>
 8002950:	686c      	ldr	r4, [r5, #4]
 8002952:	89a3      	ldrh	r3, [r4, #12]
 8002954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002958:	0719      	lsls	r1, r3, #28
 800295a:	d42c      	bmi.n	80029b6 <__swsetup_r+0x82>
 800295c:	06dd      	lsls	r5, r3, #27
 800295e:	d411      	bmi.n	8002984 <__swsetup_r+0x50>
 8002960:	2309      	movs	r3, #9
 8002962:	6033      	str	r3, [r6, #0]
 8002964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	81a3      	strh	r3, [r4, #12]
 800296e:	e03e      	b.n	80029ee <__swsetup_r+0xba>
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <__swsetup_r+0xd4>)
 8002972:	429c      	cmp	r4, r3
 8002974:	d101      	bne.n	800297a <__swsetup_r+0x46>
 8002976:	68ac      	ldr	r4, [r5, #8]
 8002978:	e7eb      	b.n	8002952 <__swsetup_r+0x1e>
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <__swsetup_r+0xd8>)
 800297c:	429c      	cmp	r4, r3
 800297e:	bf08      	it	eq
 8002980:	68ec      	ldreq	r4, [r5, #12]
 8002982:	e7e6      	b.n	8002952 <__swsetup_r+0x1e>
 8002984:	0758      	lsls	r0, r3, #29
 8002986:	d512      	bpl.n	80029ae <__swsetup_r+0x7a>
 8002988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800298a:	b141      	cbz	r1, 800299e <__swsetup_r+0x6a>
 800298c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002990:	4299      	cmp	r1, r3
 8002992:	d002      	beq.n	800299a <__swsetup_r+0x66>
 8002994:	4630      	mov	r0, r6
 8002996:	f7ff fa65 	bl	8001e64 <_free_r>
 800299a:	2300      	movs	r3, #0
 800299c:	6363      	str	r3, [r4, #52]	; 0x34
 800299e:	89a3      	ldrh	r3, [r4, #12]
 80029a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029a4:	81a3      	strh	r3, [r4, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	6063      	str	r3, [r4, #4]
 80029aa:	6923      	ldr	r3, [r4, #16]
 80029ac:	6023      	str	r3, [r4, #0]
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	f043 0308 	orr.w	r3, r3, #8
 80029b4:	81a3      	strh	r3, [r4, #12]
 80029b6:	6923      	ldr	r3, [r4, #16]
 80029b8:	b94b      	cbnz	r3, 80029ce <__swsetup_r+0x9a>
 80029ba:	89a3      	ldrh	r3, [r4, #12]
 80029bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c4:	d003      	beq.n	80029ce <__swsetup_r+0x9a>
 80029c6:	4621      	mov	r1, r4
 80029c8:	4630      	mov	r0, r6
 80029ca:	f000 f929 	bl	8002c20 <__smakebuf_r>
 80029ce:	89a0      	ldrh	r0, [r4, #12]
 80029d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029d4:	f010 0301 	ands.w	r3, r0, #1
 80029d8:	d00a      	beq.n	80029f0 <__swsetup_r+0xbc>
 80029da:	2300      	movs	r3, #0
 80029dc:	60a3      	str	r3, [r4, #8]
 80029de:	6963      	ldr	r3, [r4, #20]
 80029e0:	425b      	negs	r3, r3
 80029e2:	61a3      	str	r3, [r4, #24]
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	b943      	cbnz	r3, 80029fa <__swsetup_r+0xc6>
 80029e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029ec:	d1ba      	bne.n	8002964 <__swsetup_r+0x30>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	0781      	lsls	r1, r0, #30
 80029f2:	bf58      	it	pl
 80029f4:	6963      	ldrpl	r3, [r4, #20]
 80029f6:	60a3      	str	r3, [r4, #8]
 80029f8:	e7f4      	b.n	80029e4 <__swsetup_r+0xb0>
 80029fa:	2000      	movs	r0, #0
 80029fc:	e7f7      	b.n	80029ee <__swsetup_r+0xba>
 80029fe:	bf00      	nop
 8002a00:	20000010 	.word	0x20000010
 8002a04:	08002d84 	.word	0x08002d84
 8002a08:	08002da4 	.word	0x08002da4
 8002a0c:	08002d64 	.word	0x08002d64

08002a10 <_close_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	2300      	movs	r3, #0
 8002a14:	4d05      	ldr	r5, [pc, #20]	; (8002a2c <_close_r+0x1c>)
 8002a16:	4604      	mov	r4, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	f7fd fe81 	bl	8000722 <_close>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_close_r+0x1a>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_close_r+0x1a>
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	2000013c 	.word	0x2000013c

08002a30 <__sflush_r>:
 8002a30:	898a      	ldrh	r2, [r1, #12]
 8002a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a36:	4605      	mov	r5, r0
 8002a38:	0710      	lsls	r0, r2, #28
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	d458      	bmi.n	8002af0 <__sflush_r+0xc0>
 8002a3e:	684b      	ldr	r3, [r1, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	dc05      	bgt.n	8002a50 <__sflush_r+0x20>
 8002a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	dc02      	bgt.n	8002a50 <__sflush_r+0x20>
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a52:	2e00      	cmp	r6, #0
 8002a54:	d0f9      	beq.n	8002a4a <__sflush_r+0x1a>
 8002a56:	2300      	movs	r3, #0
 8002a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a5c:	682f      	ldr	r7, [r5, #0]
 8002a5e:	602b      	str	r3, [r5, #0]
 8002a60:	d032      	beq.n	8002ac8 <__sflush_r+0x98>
 8002a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	075a      	lsls	r2, r3, #29
 8002a68:	d505      	bpl.n	8002a76 <__sflush_r+0x46>
 8002a6a:	6863      	ldr	r3, [r4, #4]
 8002a6c:	1ac0      	subs	r0, r0, r3
 8002a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a70:	b10b      	cbz	r3, 8002a76 <__sflush_r+0x46>
 8002a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a74:	1ac0      	subs	r0, r0, r3
 8002a76:	2300      	movs	r3, #0
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	6a21      	ldr	r1, [r4, #32]
 8002a80:	47b0      	blx	r6
 8002a82:	1c43      	adds	r3, r0, #1
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	d106      	bne.n	8002a96 <__sflush_r+0x66>
 8002a88:	6829      	ldr	r1, [r5, #0]
 8002a8a:	291d      	cmp	r1, #29
 8002a8c:	d82c      	bhi.n	8002ae8 <__sflush_r+0xb8>
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <__sflush_r+0x108>)
 8002a90:	40ca      	lsrs	r2, r1
 8002a92:	07d6      	lsls	r6, r2, #31
 8002a94:	d528      	bpl.n	8002ae8 <__sflush_r+0xb8>
 8002a96:	2200      	movs	r2, #0
 8002a98:	6062      	str	r2, [r4, #4]
 8002a9a:	6922      	ldr	r2, [r4, #16]
 8002a9c:	04d9      	lsls	r1, r3, #19
 8002a9e:	6022      	str	r2, [r4, #0]
 8002aa0:	d504      	bpl.n	8002aac <__sflush_r+0x7c>
 8002aa2:	1c42      	adds	r2, r0, #1
 8002aa4:	d101      	bne.n	8002aaa <__sflush_r+0x7a>
 8002aa6:	682b      	ldr	r3, [r5, #0]
 8002aa8:	b903      	cbnz	r3, 8002aac <__sflush_r+0x7c>
 8002aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8002aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aae:	602f      	str	r7, [r5, #0]
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	d0ca      	beq.n	8002a4a <__sflush_r+0x1a>
 8002ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ab8:	4299      	cmp	r1, r3
 8002aba:	d002      	beq.n	8002ac2 <__sflush_r+0x92>
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7ff f9d1 	bl	8001e64 <_free_r>
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8002ac6:	e7c1      	b.n	8002a4c <__sflush_r+0x1c>
 8002ac8:	6a21      	ldr	r1, [r4, #32]
 8002aca:	2301      	movs	r3, #1
 8002acc:	4628      	mov	r0, r5
 8002ace:	47b0      	blx	r6
 8002ad0:	1c41      	adds	r1, r0, #1
 8002ad2:	d1c7      	bne.n	8002a64 <__sflush_r+0x34>
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0c4      	beq.n	8002a64 <__sflush_r+0x34>
 8002ada:	2b1d      	cmp	r3, #29
 8002adc:	d001      	beq.n	8002ae2 <__sflush_r+0xb2>
 8002ade:	2b16      	cmp	r3, #22
 8002ae0:	d101      	bne.n	8002ae6 <__sflush_r+0xb6>
 8002ae2:	602f      	str	r7, [r5, #0]
 8002ae4:	e7b1      	b.n	8002a4a <__sflush_r+0x1a>
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aec:	81a3      	strh	r3, [r4, #12]
 8002aee:	e7ad      	b.n	8002a4c <__sflush_r+0x1c>
 8002af0:	690f      	ldr	r7, [r1, #16]
 8002af2:	2f00      	cmp	r7, #0
 8002af4:	d0a9      	beq.n	8002a4a <__sflush_r+0x1a>
 8002af6:	0793      	lsls	r3, r2, #30
 8002af8:	bf18      	it	ne
 8002afa:	2300      	movne	r3, #0
 8002afc:	680e      	ldr	r6, [r1, #0]
 8002afe:	bf08      	it	eq
 8002b00:	694b      	ldreq	r3, [r1, #20]
 8002b02:	eba6 0807 	sub.w	r8, r6, r7
 8002b06:	600f      	str	r7, [r1, #0]
 8002b08:	608b      	str	r3, [r1, #8]
 8002b0a:	f1b8 0f00 	cmp.w	r8, #0
 8002b0e:	dd9c      	ble.n	8002a4a <__sflush_r+0x1a>
 8002b10:	4643      	mov	r3, r8
 8002b12:	463a      	mov	r2, r7
 8002b14:	4628      	mov	r0, r5
 8002b16:	6a21      	ldr	r1, [r4, #32]
 8002b18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b1a:	47b0      	blx	r6
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	dc06      	bgt.n	8002b2e <__sflush_r+0xfe>
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	f04f 30ff 	mov.w	r0, #4294967295
 8002b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2a:	81a3      	strh	r3, [r4, #12]
 8002b2c:	e78e      	b.n	8002a4c <__sflush_r+0x1c>
 8002b2e:	4407      	add	r7, r0
 8002b30:	eba8 0800 	sub.w	r8, r8, r0
 8002b34:	e7e9      	b.n	8002b0a <__sflush_r+0xda>
 8002b36:	bf00      	nop
 8002b38:	20400001 	.word	0x20400001

08002b3c <_fflush_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	690b      	ldr	r3, [r1, #16]
 8002b40:	4605      	mov	r5, r0
 8002b42:	460c      	mov	r4, r1
 8002b44:	b913      	cbnz	r3, 8002b4c <_fflush_r+0x10>
 8002b46:	2500      	movs	r5, #0
 8002b48:	4628      	mov	r0, r5
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	b118      	cbz	r0, 8002b56 <_fflush_r+0x1a>
 8002b4e:	6983      	ldr	r3, [r0, #24]
 8002b50:	b90b      	cbnz	r3, 8002b56 <_fflush_r+0x1a>
 8002b52:	f7ff faad 	bl	80020b0 <__sinit>
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <_fflush_r+0x6c>)
 8002b58:	429c      	cmp	r4, r3
 8002b5a:	d11b      	bne.n	8002b94 <_fflush_r+0x58>
 8002b5c:	686c      	ldr	r4, [r5, #4]
 8002b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ef      	beq.n	8002b46 <_fflush_r+0xa>
 8002b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b68:	07d0      	lsls	r0, r2, #31
 8002b6a:	d404      	bmi.n	8002b76 <_fflush_r+0x3a>
 8002b6c:	0599      	lsls	r1, r3, #22
 8002b6e:	d402      	bmi.n	8002b76 <_fflush_r+0x3a>
 8002b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b72:	f7ff fb3b 	bl	80021ec <__retarget_lock_acquire_recursive>
 8002b76:	4628      	mov	r0, r5
 8002b78:	4621      	mov	r1, r4
 8002b7a:	f7ff ff59 	bl	8002a30 <__sflush_r>
 8002b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b80:	4605      	mov	r5, r0
 8002b82:	07da      	lsls	r2, r3, #31
 8002b84:	d4e0      	bmi.n	8002b48 <_fflush_r+0xc>
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	059b      	lsls	r3, r3, #22
 8002b8a:	d4dd      	bmi.n	8002b48 <_fflush_r+0xc>
 8002b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b8e:	f7ff fb2e 	bl	80021ee <__retarget_lock_release_recursive>
 8002b92:	e7d9      	b.n	8002b48 <_fflush_r+0xc>
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <_fflush_r+0x70>)
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d101      	bne.n	8002b9e <_fflush_r+0x62>
 8002b9a:	68ac      	ldr	r4, [r5, #8]
 8002b9c:	e7df      	b.n	8002b5e <_fflush_r+0x22>
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <_fflush_r+0x74>)
 8002ba0:	429c      	cmp	r4, r3
 8002ba2:	bf08      	it	eq
 8002ba4:	68ec      	ldreq	r4, [r5, #12]
 8002ba6:	e7da      	b.n	8002b5e <_fflush_r+0x22>
 8002ba8:	08002d84 	.word	0x08002d84
 8002bac:	08002da4 	.word	0x08002da4
 8002bb0:	08002d64 	.word	0x08002d64

08002bb4 <_lseek_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	4d05      	ldr	r5, [pc, #20]	; (8002bd4 <_lseek_r+0x20>)
 8002bc0:	602a      	str	r2, [r5, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7fd fdd1 	bl	800076a <_lseek>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d102      	bne.n	8002bd2 <_lseek_r+0x1e>
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	b103      	cbz	r3, 8002bd2 <_lseek_r+0x1e>
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	2000013c 	.word	0x2000013c

08002bd8 <__swhatbuf_r>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	460e      	mov	r6, r1
 8002bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be0:	4614      	mov	r4, r2
 8002be2:	2900      	cmp	r1, #0
 8002be4:	461d      	mov	r5, r3
 8002be6:	b096      	sub	sp, #88	; 0x58
 8002be8:	da07      	bge.n	8002bfa <__swhatbuf_r+0x22>
 8002bea:	2300      	movs	r3, #0
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	89b3      	ldrh	r3, [r6, #12]
 8002bf0:	061a      	lsls	r2, r3, #24
 8002bf2:	d410      	bmi.n	8002c16 <__swhatbuf_r+0x3e>
 8002bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf8:	e00e      	b.n	8002c18 <__swhatbuf_r+0x40>
 8002bfa:	466a      	mov	r2, sp
 8002bfc:	f000 f870 	bl	8002ce0 <_fstat_r>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	dbf2      	blt.n	8002bea <__swhatbuf_r+0x12>
 8002c04:	9a01      	ldr	r2, [sp, #4]
 8002c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c0e:	425a      	negs	r2, r3
 8002c10:	415a      	adcs	r2, r3
 8002c12:	602a      	str	r2, [r5, #0]
 8002c14:	e7ee      	b.n	8002bf4 <__swhatbuf_r+0x1c>
 8002c16:	2340      	movs	r3, #64	; 0x40
 8002c18:	2000      	movs	r0, #0
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	b016      	add	sp, #88	; 0x58
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}

08002c20 <__smakebuf_r>:
 8002c20:	898b      	ldrh	r3, [r1, #12]
 8002c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c24:	079d      	lsls	r5, r3, #30
 8002c26:	4606      	mov	r6, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	d507      	bpl.n	8002c3c <__smakebuf_r+0x1c>
 8002c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c30:	6023      	str	r3, [r4, #0]
 8002c32:	6123      	str	r3, [r4, #16]
 8002c34:	2301      	movs	r3, #1
 8002c36:	6163      	str	r3, [r4, #20]
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}
 8002c3c:	466a      	mov	r2, sp
 8002c3e:	ab01      	add	r3, sp, #4
 8002c40:	f7ff ffca 	bl	8002bd8 <__swhatbuf_r>
 8002c44:	9900      	ldr	r1, [sp, #0]
 8002c46:	4605      	mov	r5, r0
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f7ff f957 	bl	8001efc <_malloc_r>
 8002c4e:	b948      	cbnz	r0, 8002c64 <__smakebuf_r+0x44>
 8002c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c54:	059a      	lsls	r2, r3, #22
 8002c56:	d4ef      	bmi.n	8002c38 <__smakebuf_r+0x18>
 8002c58:	f023 0303 	bic.w	r3, r3, #3
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	e7e3      	b.n	8002c2c <__smakebuf_r+0xc>
 8002c64:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <__smakebuf_r+0x7c>)
 8002c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	6020      	str	r0, [r4, #0]
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c70:	81a3      	strh	r3, [r4, #12]
 8002c72:	9b00      	ldr	r3, [sp, #0]
 8002c74:	6120      	str	r0, [r4, #16]
 8002c76:	6163      	str	r3, [r4, #20]
 8002c78:	9b01      	ldr	r3, [sp, #4]
 8002c7a:	b15b      	cbz	r3, 8002c94 <__smakebuf_r+0x74>
 8002c7c:	4630      	mov	r0, r6
 8002c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c82:	f000 f83f 	bl	8002d04 <_isatty_r>
 8002c86:	b128      	cbz	r0, 8002c94 <__smakebuf_r+0x74>
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	81a3      	strh	r3, [r4, #12]
 8002c94:	89a0      	ldrh	r0, [r4, #12]
 8002c96:	4305      	orrs	r5, r0
 8002c98:	81a5      	strh	r5, [r4, #12]
 8002c9a:	e7cd      	b.n	8002c38 <__smakebuf_r+0x18>
 8002c9c:	08002049 	.word	0x08002049

08002ca0 <memchr>:
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	b2c9      	uxtb	r1, r1
 8002ca6:	4402      	add	r2, r0
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	d101      	bne.n	8002cb2 <memchr+0x12>
 8002cae:	2000      	movs	r0, #0
 8002cb0:	e003      	b.n	8002cba <memchr+0x1a>
 8002cb2:	7804      	ldrb	r4, [r0, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	428c      	cmp	r4, r1
 8002cb8:	d1f6      	bne.n	8002ca8 <memchr+0x8>
 8002cba:	bd10      	pop	{r4, pc}

08002cbc <_read_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4d05      	ldr	r5, [pc, #20]	; (8002cdc <_read_r+0x20>)
 8002cc8:	602a      	str	r2, [r5, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f7fd fcf0 	bl	80006b0 <_read>
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	d102      	bne.n	8002cda <_read_r+0x1e>
 8002cd4:	682b      	ldr	r3, [r5, #0]
 8002cd6:	b103      	cbz	r3, 8002cda <_read_r+0x1e>
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	bd38      	pop	{r3, r4, r5, pc}
 8002cdc:	2000013c 	.word	0x2000013c

08002ce0 <_fstat_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4d06      	ldr	r5, [pc, #24]	; (8002d00 <_fstat_r+0x20>)
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	602b      	str	r3, [r5, #0]
 8002cee:	f7fd fd23 	bl	8000738 <_fstat>
 8002cf2:	1c43      	adds	r3, r0, #1
 8002cf4:	d102      	bne.n	8002cfc <_fstat_r+0x1c>
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	b103      	cbz	r3, 8002cfc <_fstat_r+0x1c>
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	bd38      	pop	{r3, r4, r5, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000013c 	.word	0x2000013c

08002d04 <_isatty_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	2300      	movs	r3, #0
 8002d08:	4d05      	ldr	r5, [pc, #20]	; (8002d20 <_isatty_r+0x1c>)
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	602b      	str	r3, [r5, #0]
 8002d10:	f7fd fd21 	bl	8000756 <_isatty>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_isatty_r+0x1a>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_isatty_r+0x1a>
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	2000013c 	.word	0x2000013c

08002d24 <_init>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr

08002d30 <_fini>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr
