
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002b90  08002b90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b90  08002b90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000078  08002c10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002c10  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2de  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209e  00000000  00000000  0002c37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e63  00000000  00000000  0002f898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf72  00000000  00000000  000476fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f43  00000000  00000000  0005366d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d95b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c6c  00000000  00000000  000d9604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b48 	.word	0x08002b48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002b48 	.word	0x08002b48

0800014c <Button_ReadInput>:
GPIO_PinState previous_state[NUMBER_OF_BUTTON];
GPIO_PinState current_state[NUMBER_OF_BUTTON];

int button_counter_id[NUMBER_OF_BUTTON];

void Button_ReadInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e071      	b.n	800023c <Button_ReadInput+0xf0>
		previous_state[button] = current_state[button];
 8000158:	4a3c      	ldr	r2, [pc, #240]	; (800024c <Button_ReadInput+0x100>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a3b      	ldr	r2, [pc, #236]	; (8000250 <Button_ReadInput+0x104>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		current_state[button] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << button);
 800016a:	2201      	movs	r2, #1
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	fa02 f303 	lsl.w	r3, r2, r3
 8000172:	b29b      	uxth	r3, r3
 8000174:	4619      	mov	r1, r3
 8000176:	4837      	ldr	r0, [pc, #220]	; (8000254 <Button_ReadInput+0x108>)
 8000178:	f001 fc34 	bl	80019e4 <HAL_GPIO_ReadPin>
 800017c:	4603      	mov	r3, r0
 800017e:	4619      	mov	r1, r3
 8000180:	4a32      	ldr	r2, [pc, #200]	; (800024c <Button_ReadInput+0x100>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	460a      	mov	r2, r1
 8000188:	701a      	strb	r2, [r3, #0]

		//Button state is difference
		if(previous_state[button] == current_state[button]){
 800018a:	4a31      	ldr	r2, [pc, #196]	; (8000250 <Button_ReadInput+0x104>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	781a      	ldrb	r2, [r3, #0]
 8000192:	492e      	ldr	r1, [pc, #184]	; (800024c <Button_ReadInput+0x100>)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	440b      	add	r3, r1
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	429a      	cmp	r2, r3
 800019c:	d14b      	bne.n	8000236 <Button_ReadInput+0xea>
			//Switch state
			if(current_state[button] != button_state[button]){
 800019e:	4a2b      	ldr	r2, [pc, #172]	; (800024c <Button_ReadInput+0x100>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	781a      	ldrb	r2, [r3, #0]
 80001a6:	492c      	ldr	r1, [pc, #176]	; (8000258 <Button_ReadInput+0x10c>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	440b      	add	r3, r1
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d025      	beq.n	80001fe <Button_ReadInput+0xb2>
				button_state[button] = current_state[button];
 80001b2:	4a26      	ldr	r2, [pc, #152]	; (800024c <Button_ReadInput+0x100>)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	4413      	add	r3, r2
 80001b8:	7819      	ldrb	r1, [r3, #0]
 80001ba:	4a27      	ldr	r2, [pc, #156]	; (8000258 <Button_ReadInput+0x10c>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	4413      	add	r3, r2
 80001c0:	460a      	mov	r2, r1
 80001c2:	701a      	strb	r2, [r3, #0]
				//Switch to pressed state
				if(button_state[button] == BUTTON_PIN_STATE_PRESSED){
 80001c4:	4a24      	ldr	r2, [pc, #144]	; (8000258 <Button_ReadInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d132      	bne.n	8000236 <Button_ReadInput+0xea>
					//Start counting for hold state;
					if(SoftwareTimer_GetFlag(button_counter_id[button]) == FLAG_ON){
 80001d0:	4a22      	ldr	r2, [pc, #136]	; (800025c <Button_ReadInput+0x110>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fea3 	bl	8000f24 <SoftwareTimer_GetFlag>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d106      	bne.n	80001f2 <Button_ReadInput+0xa6>
						SoftwareTimer_ResetFlag(button_counter_id[button]);
 80001e4:	4a1d      	ldr	r2, [pc, #116]	; (800025c <Button_ReadInput+0x110>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fea9 	bl	8000f44 <SoftwareTimer_ResetFlag>
					}
					pressed_flag[button] = 1;
 80001f2:	4a1b      	ldr	r2, [pc, #108]	; (8000260 <Button_ReadInput+0x114>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2101      	movs	r1, #1
 80001f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fc:	e01b      	b.n	8000236 <Button_ReadInput+0xea>
				}
			}
			//State is the same
			else{
				//Timer is up and the button_state is pressed
				if(SoftwareTimer_GetFlag(button_counter_id[button]) == FLAG_ON){
 80001fe:	4a17      	ldr	r2, [pc, #92]	; (800025c <Button_ReadInput+0x110>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fe8c 	bl	8000f24 <SoftwareTimer_GetFlag>
 800020c:	4603      	mov	r3, r0
 800020e:	2b01      	cmp	r3, #1
 8000210:	d111      	bne.n	8000236 <Button_ReadInput+0xea>
					if(button_state[button] == BUTTON_PIN_STATE_PRESSED){
 8000212:	4a11      	ldr	r2, [pc, #68]	; (8000258 <Button_ReadInput+0x10c>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d10b      	bne.n	8000236 <Button_ReadInput+0xea>
						SoftwareTimer_ResetFlag(button_counter_id[button]);
 800021e:	4a0f      	ldr	r2, [pc, #60]	; (800025c <Button_ReadInput+0x110>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fe8c 	bl	8000f44 <SoftwareTimer_ResetFlag>
						hold_flag[button] = 1;
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <Button_ReadInput+0x118>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2101      	movs	r1, #1
 8000232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	3301      	adds	r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b02      	cmp	r3, #2
 8000240:	dd8a      	ble.n	8000158 <Button_ReadInput+0xc>
					}
				}
			}
		}
	}
}
 8000242:	bf00      	nop
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000011c 	.word	0x2000011c
 8000250:	2000010c 	.word	0x2000010c
 8000254:	40010c00 	.word	0x40010c00
 8000258:	20000120 	.word	0x20000120
 800025c:	20000110 	.word	0x20000110
 8000260:	20000094 	.word	0x20000094
 8000264:	200000a0 	.word	0x200000a0

08000268 <Button_TimerInit>:

void Button_TimerInit(){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	e013      	b.n	800029c <Button_TimerInit+0x34>
		button_counter_id[button] = SoftwareTimer_AddNewTimer(1);
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fe0f 	bl	8000e98 <SoftwareTimer_AddNewTimer>
 800027a:	4602      	mov	r2, r0
 800027c:	490b      	ldr	r1, [pc, #44]	; (80002ac <Button_TimerInit+0x44>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SoftwareTimer_SetNewTimer(button_counter_id[button], KEY_PRESS_TIME);
 8000284:	4a09      	ldr	r2, [pc, #36]	; (80002ac <Button_TimerInit+0x44>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fe35 	bl	8000f00 <SoftwareTimer_SetNewTimer>
	for(int button = 0; button < NUMBER_OF_BUTTON; ++button){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	dde8      	ble.n	8000274 <Button_TimerInit+0xc>
	}
}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000110 	.word	0x20000110

080002b0 <Button_Process>:

void Button_Process(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e046      	b.n	800034a <Button_Process+0x9a>
		switch(interface_button_state[i]){
 80002bc:	4a27      	ldr	r2, [pc, #156]	; (800035c <Button_Process+0xac>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4413      	add	r3, r2
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d02a      	beq.n	800031e <Button_Process+0x6e>
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	dc34      	bgt.n	8000336 <Button_Process+0x86>
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d002      	beq.n	80002d6 <Button_Process+0x26>
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d00c      	beq.n	80002ee <Button_Process+0x3e>
				interface_button_state[i] = RELEASE;
			}
			break;

		default:
			break;
 80002d4:	e02f      	b.n	8000336 <Button_Process+0x86>
			if(IsPressed(i)){
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f000 f856 	bl	8000388 <IsPressed>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d02b      	beq.n	800033a <Button_Process+0x8a>
				interface_button_state[i] = PRESSED;
 80002e2:	4a1e      	ldr	r2, [pc, #120]	; (800035c <Button_Process+0xac>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]
			break;
 80002ec:	e025      	b.n	800033a <Button_Process+0x8a>
			if(!IsPressed(i)){
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f84a 	bl	8000388 <IsPressed>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d105      	bne.n	8000306 <Button_Process+0x56>
				interface_button_state[i] = RELEASE;
 80002fa:	4a18      	ldr	r2, [pc, #96]	; (800035c <Button_Process+0xac>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
			break;
 8000304:	e01b      	b.n	800033e <Button_Process+0x8e>
			else if(IsHeld(i)){
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f858 	bl	80003bc <IsHeld>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d015      	beq.n	800033e <Button_Process+0x8e>
				interface_button_state[i] = HOLD;
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <Button_Process+0xac>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	2202      	movs	r2, #2
 800031a:	701a      	strb	r2, [r3, #0]
			break;
 800031c:	e00f      	b.n	800033e <Button_Process+0x8e>
			if(!IsPressed(i)){
 800031e:	6878      	ldr	r0, [r7, #4]
 8000320:	f000 f832 	bl	8000388 <IsPressed>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d10b      	bne.n	8000342 <Button_Process+0x92>
				interface_button_state[i] = RELEASE;
 800032a:	4a0c      	ldr	r2, [pc, #48]	; (800035c <Button_Process+0xac>)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4413      	add	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
			break;
 8000334:	e005      	b.n	8000342 <Button_Process+0x92>
			break;
 8000336:	bf00      	nop
 8000338:	e004      	b.n	8000344 <Button_Process+0x94>
			break;
 800033a:	bf00      	nop
 800033c:	e002      	b.n	8000344 <Button_Process+0x94>
			break;
 800033e:	bf00      	nop
 8000340:	e000      	b.n	8000344 <Button_Process+0x94>
			break;
 8000342:	bf00      	nop
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3301      	adds	r3, #1
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2b02      	cmp	r3, #2
 800034e:	ddb5      	ble.n	80002bc <Button_Process+0xc>
		}
	}
}
 8000350:	bf00      	nop
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000124 	.word	0x20000124

08000360 <Button_GetButtonState>:

ButtonState_t Button_GetButtonState(uint8_t index){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
	if(index < NUMBER_OF_BUTTON && index >= 0){
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2b02      	cmp	r3, #2
 800036e:	d803      	bhi.n	8000378 <Button_GetButtonState+0x18>
		return interface_button_state[index];
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <Button_GetButtonState+0x24>)
 8000374:	5cd3      	ldrb	r3, [r2, r3]
 8000376:	e000      	b.n	800037a <Button_GetButtonState+0x1a>
	}
	else{
		return ERROR_STATE;
 8000378:	2303      	movs	r3, #3
	}

}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000124 	.word	0x20000124

08000388 <IsPressed>:

int IsPressed(int index){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	if(pressed_flag[index] == 1){
 8000390:	4a09      	ldr	r2, [pc, #36]	; (80003b8 <IsPressed+0x30>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d106      	bne.n	80003aa <IsPressed+0x22>
		pressed_flag[index] = 0;
 800039c:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <IsPressed+0x30>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2100      	movs	r1, #0
 80003a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	e000      	b.n	80003ac <IsPressed+0x24>
	}
	return 0;
 80003aa:	2300      	movs	r3, #0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000094 	.word	0x20000094

080003bc <IsHeld>:

int IsHeld(int index){
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	if(hold_flag[index] == 1){
 80003c4:	4a09      	ldr	r2, [pc, #36]	; (80003ec <IsHeld+0x30>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d106      	bne.n	80003de <IsHeld+0x22>
		hold_flag[index] = 0;
 80003d0:	4a06      	ldr	r2, [pc, #24]	; (80003ec <IsHeld+0x30>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2100      	movs	r1, #0
 80003d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003da:	2301      	movs	r3, #1
 80003dc:	e000      	b.n	80003e0 <IsHeld+0x24>
	}
	return 0;
 80003de:	2300      	movs	r3, #0

}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	200000a0 	.word	0x200000a0

080003f0 <FiniteStateMachine_Run>:
uint8_t counter_A;
uint8_t counter_B;

int first_init = 1;

void FiniteStateMachine_Run(){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	switch(machine_state){
 80003f4:	4b8b      	ldr	r3, [pc, #556]	; (8000624 <FiniteStateMachine_Run+0x234>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	f200 80cb 	bhi.w	8000594 <FiniteStateMachine_Run+0x1a4>
 80003fe:	a201      	add	r2, pc, #4	; (adr r2, 8000404 <FiniteStateMachine_Run+0x14>)
 8000400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000404:	08000419 	.word	0x08000419
 8000408:	0800041f 	.word	0x0800041f
 800040c:	0800049b 	.word	0x0800049b
 8000410:	08000503 	.word	0x08000503
 8000414:	0800056b 	.word	0x0800056b
	case FSM_INIT:
		FiniteStateMachine_Init();
 8000418:	f000 f91c 	bl	8000654 <FiniteStateMachine_Init>
		break;
 800041c:	e0c9      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>

	case FSM_NORMAL:
		if(SoftwareTimer_GetFlag(trafic_light_timer_id) == FLAG_ON){
 800041e:	4b82      	ldr	r3, [pc, #520]	; (8000628 <FiniteStateMachine_Run+0x238>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fd7e 	bl	8000f24 <SoftwareTimer_GetFlag>
 8000428:	4603      	mov	r3, r0
 800042a:	2b01      	cmp	r3, #1
 800042c:	d106      	bne.n	800043c <FiniteStateMachine_Run+0x4c>
			SoftwareTimer_ResetFlag(trafic_light_timer_id);
 800042e:	4b7e      	ldr	r3, [pc, #504]	; (8000628 <FiniteStateMachine_Run+0x238>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fd86 	bl	8000f44 <SoftwareTimer_ResetFlag>
			FiniteStateMachine_Normal();
 8000438:	f000 f95e 	bl	80006f8 <FiniteStateMachine_Normal>
		}

		//Wait for button input to change state
		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ff8f 	bl	8000360 <Button_GetButtonState>
 8000442:	4603      	mov	r3, r0
 8000444:	2b01      	cmp	r3, #1
 8000446:	f040 80a7 	bne.w	8000598 <FiniteStateMachine_Run+0x1a8>
			machine_state = FSM_MODIFY_RED;
 800044a:	4b76      	ldr	r3, [pc, #472]	; (8000624 <FiniteStateMachine_Run+0x234>)
 800044c:	2202      	movs	r2, #2
 800044e:	701a      	strb	r2, [r3, #0]
			modifiable_base_counter = base_counter_red;
 8000450:	4b76      	ldr	r3, [pc, #472]	; (800062c <FiniteStateMachine_Run+0x23c>)
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	4b76      	ldr	r3, [pc, #472]	; (8000630 <FiniteStateMachine_Run+0x240>)
 8000456:	701a      	strb	r2, [r3, #0]
			led_buffer[0] = 0;
 8000458:	4b76      	ldr	r3, [pc, #472]	; (8000634 <FiniteStateMachine_Run+0x244>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 1;
 800045e:	4b75      	ldr	r3, [pc, #468]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000460:	2201      	movs	r2, #1
 8000462:	705a      	strb	r2, [r3, #1]
			led_buffer[2] = base_counter_red / 10;
 8000464:	4b71      	ldr	r3, [pc, #452]	; (800062c <FiniteStateMachine_Run+0x23c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4a73      	ldr	r2, [pc, #460]	; (8000638 <FiniteStateMachine_Run+0x248>)
 800046a:	fba2 2303 	umull	r2, r3, r2, r3
 800046e:	08db      	lsrs	r3, r3, #3
 8000470:	b2da      	uxtb	r2, r3
 8000472:	4b70      	ldr	r3, [pc, #448]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000474:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = base_counter_red - led_buffer[2] * 10;
 8000476:	4b6f      	ldr	r3, [pc, #444]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000478:	789b      	ldrb	r3, [r3, #2]
 800047a:	461a      	mov	r2, r3
 800047c:	0152      	lsls	r2, r2, #5
 800047e:	1ad2      	subs	r2, r2, r3
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	4b68      	ldr	r3, [pc, #416]	; (800062c <FiniteStateMachine_Run+0x23c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4413      	add	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b68      	ldr	r3, [pc, #416]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000492:	70da      	strb	r2, [r3, #3]
			ClearTraficLight();
 8000494:	f000 fc44 	bl	8000d20 <ClearTraficLight>
		}
		break;
 8000498:	e07e      	b.n	8000598 <FiniteStateMachine_Run+0x1a8>

	case FSM_MODIFY_RED:
		FiniteStateMachine_ModifyRed();
 800049a:	f000 f9c1 	bl	8000820 <FiniteStateMachine_ModifyRed>
		//Check if set_button is pressed
		if(machine_state == FSM_INIT)
 800049e:	4b61      	ldr	r3, [pc, #388]	; (8000624 <FiniteStateMachine_Run+0x234>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d07a      	beq.n	800059c <FiniteStateMachine_Run+0x1ac>
			break;

		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 80004a6:	2000      	movs	r0, #0
 80004a8:	f7ff ff5a 	bl	8000360 <Button_GetButtonState>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d176      	bne.n	80005a0 <FiniteStateMachine_Run+0x1b0>
			machine_state = FSM_MODIFY_YELLOW;
 80004b2:	4b5c      	ldr	r3, [pc, #368]	; (8000624 <FiniteStateMachine_Run+0x234>)
 80004b4:	2203      	movs	r2, #3
 80004b6:	701a      	strb	r2, [r3, #0]
			modifiable_base_counter = base_counter_yellow;
 80004b8:	4b60      	ldr	r3, [pc, #384]	; (800063c <FiniteStateMachine_Run+0x24c>)
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	4b5c      	ldr	r3, [pc, #368]	; (8000630 <FiniteStateMachine_Run+0x240>)
 80004be:	701a      	strb	r2, [r3, #0]
			led_buffer[0] = 0;
 80004c0:	4b5c      	ldr	r3, [pc, #368]	; (8000634 <FiniteStateMachine_Run+0x244>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 2;
 80004c6:	4b5b      	ldr	r3, [pc, #364]	; (8000634 <FiniteStateMachine_Run+0x244>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	705a      	strb	r2, [r3, #1]
			led_buffer[2] = base_counter_yellow / 10;
 80004cc:	4b5b      	ldr	r3, [pc, #364]	; (800063c <FiniteStateMachine_Run+0x24c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4a59      	ldr	r2, [pc, #356]	; (8000638 <FiniteStateMachine_Run+0x248>)
 80004d2:	fba2 2303 	umull	r2, r3, r2, r3
 80004d6:	08db      	lsrs	r3, r3, #3
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b56      	ldr	r3, [pc, #344]	; (8000634 <FiniteStateMachine_Run+0x244>)
 80004dc:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = base_counter_yellow - led_buffer[2] * 10;
 80004de:	4b55      	ldr	r3, [pc, #340]	; (8000634 <FiniteStateMachine_Run+0x244>)
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	461a      	mov	r2, r3
 80004e4:	0152      	lsls	r2, r2, #5
 80004e6:	1ad2      	subs	r2, r2, r3
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b52      	ldr	r3, [pc, #328]	; (800063c <FiniteStateMachine_Run+0x24c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4413      	add	r3, r2
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b4e      	ldr	r3, [pc, #312]	; (8000634 <FiniteStateMachine_Run+0x244>)
 80004fa:	70da      	strb	r2, [r3, #3]
			ClearTraficLight();
 80004fc:	f000 fc10 	bl	8000d20 <ClearTraficLight>
		}
		break;
 8000500:	e04e      	b.n	80005a0 <FiniteStateMachine_Run+0x1b0>

	case FSM_MODIFY_YELLOW:
		FiniteStateMachine_ModifyYellow();
 8000502:	f000 f9a9 	bl	8000858 <FiniteStateMachine_ModifyYellow>
		//Check if set_button is pressed
		if(machine_state == FSM_INIT)
 8000506:	4b47      	ldr	r3, [pc, #284]	; (8000624 <FiniteStateMachine_Run+0x234>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d04a      	beq.n	80005a4 <FiniteStateMachine_Run+0x1b4>
			break;

		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff ff26 	bl	8000360 <Button_GetButtonState>
 8000514:	4603      	mov	r3, r0
 8000516:	2b01      	cmp	r3, #1
 8000518:	d146      	bne.n	80005a8 <FiniteStateMachine_Run+0x1b8>
			machine_state = FSM_MODIFY_GREEN;
 800051a:	4b42      	ldr	r3, [pc, #264]	; (8000624 <FiniteStateMachine_Run+0x234>)
 800051c:	2204      	movs	r2, #4
 800051e:	701a      	strb	r2, [r3, #0]
			modifiable_base_counter = base_counter_green;
 8000520:	4b47      	ldr	r3, [pc, #284]	; (8000640 <FiniteStateMachine_Run+0x250>)
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	4b42      	ldr	r3, [pc, #264]	; (8000630 <FiniteStateMachine_Run+0x240>)
 8000526:	701a      	strb	r2, [r3, #0]
			led_buffer[0] = 0;
 8000528:	4b42      	ldr	r3, [pc, #264]	; (8000634 <FiniteStateMachine_Run+0x244>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
			led_buffer[1] = 3;
 800052e:	4b41      	ldr	r3, [pc, #260]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000530:	2203      	movs	r2, #3
 8000532:	705a      	strb	r2, [r3, #1]
			led_buffer[2] = base_counter_green / 10;
 8000534:	4b42      	ldr	r3, [pc, #264]	; (8000640 <FiniteStateMachine_Run+0x250>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4a3f      	ldr	r2, [pc, #252]	; (8000638 <FiniteStateMachine_Run+0x248>)
 800053a:	fba2 2303 	umull	r2, r3, r2, r3
 800053e:	08db      	lsrs	r3, r3, #3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000544:	709a      	strb	r2, [r3, #2]
			led_buffer[3] = base_counter_green - led_buffer[2] * 10;
 8000546:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000548:	789b      	ldrb	r3, [r3, #2]
 800054a:	461a      	mov	r2, r3
 800054c:	0152      	lsls	r2, r2, #5
 800054e:	1ad2      	subs	r2, r2, r3
 8000550:	0092      	lsls	r2, r2, #2
 8000552:	1ad3      	subs	r3, r2, r3
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <FiniteStateMachine_Run+0x250>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4413      	add	r3, r2
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b34      	ldr	r3, [pc, #208]	; (8000634 <FiniteStateMachine_Run+0x244>)
 8000562:	70da      	strb	r2, [r3, #3]
			ClearTraficLight();
 8000564:	f000 fbdc 	bl	8000d20 <ClearTraficLight>
		}
		break;
 8000568:	e01e      	b.n	80005a8 <FiniteStateMachine_Run+0x1b8>
	case FSM_MODIFY_GREEN:
		FiniteStateMachine_ModifyGreen();
 800056a:	f000 f991 	bl	8000890 <FiniteStateMachine_ModifyGreen>
		//Check if set_button is pressed
		if(machine_state == FSM_INIT)
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <FiniteStateMachine_Run+0x234>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d01a      	beq.n	80005ac <FiniteStateMachine_Run+0x1bc>
			break;

		if(Button_GetButtonState(BUTTON_SELECT) == PRESSED){
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff fef2 	bl	8000360 <Button_GetButtonState>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d116      	bne.n	80005b0 <FiniteStateMachine_Run+0x1c0>
			machine_state = FSM_NORMAL;
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <FiniteStateMachine_Run+0x234>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
			trafic_light_state = TLS_INIT;
 8000588:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <FiniteStateMachine_Run+0x254>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
			ClearTraficLight();
 800058e:	f000 fbc7 	bl	8000d20 <ClearTraficLight>
		}
		break;
 8000592:	e00d      	b.n	80005b0 <FiniteStateMachine_Run+0x1c0>

	default:
		break;
 8000594:	bf00      	nop
 8000596:	e00c      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>
		break;
 8000598:	bf00      	nop
 800059a:	e00a      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>
			break;
 800059c:	bf00      	nop
 800059e:	e008      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>
		break;
 80005a0:	bf00      	nop
 80005a2:	e006      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>
			break;
 80005a4:	bf00      	nop
 80005a6:	e004      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>
		break;
 80005a8:	bf00      	nop
 80005aa:	e002      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>
			break;
 80005ac:	bf00      	nop
 80005ae:	e000      	b.n	80005b2 <FiniteStateMachine_Run+0x1c2>
		break;
 80005b0:	bf00      	nop
	}

	//LED Blinking for all state
	if(SoftwareTimer_GetFlag(blinking_timer_id) == FLAG_ON){
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <FiniteStateMachine_Run+0x258>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fcb4 	bl	8000f24 <SoftwareTimer_GetFlag>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d106      	bne.n	80005d0 <FiniteStateMachine_Run+0x1e0>
		SoftwareTimer_ResetFlag(blinking_timer_id);
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <FiniteStateMachine_Run+0x258>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fcbc 	bl	8000f44 <SoftwareTimer_ResetFlag>
		FiniteStateMachine_ToggleLight();
 80005cc:	f000 f9ba 	bl	8000944 <FiniteStateMachine_ToggleLight>
	}

	//7-Segments LED Display for all state
	if(SoftwareTimer_GetFlag(led_display_timer_id) == FLAG_ON){
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <FiniteStateMachine_Run+0x25c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fca5 	bl	8000f24 <SoftwareTimer_GetFlag>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d11c      	bne.n	800061a <FiniteStateMachine_Run+0x22a>
		SoftwareTimer_ResetFlag(led_display_timer_id);
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <FiniteStateMachine_Run+0x25c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fcad 	bl	8000f44 <SoftwareTimer_ResetFlag>
		LEDdisplay_DisplayNumber(led_buffer[en_pin], en_pin);
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <FiniteStateMachine_Run+0x260>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <FiniteStateMachine_Run+0x244>)
 80005f2:	5c9b      	ldrb	r3, [r3, r2]
 80005f4:	4a16      	ldr	r2, [pc, #88]	; (8000650 <FiniteStateMachine_Run+0x260>)
 80005f6:	7812      	ldrb	r2, [r2, #0]
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fa58 	bl	8000ab0 <LEDdisplay_DisplayNumber>
		++en_pin;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <FiniteStateMachine_Run+0x260>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <FiniteStateMachine_Run+0x260>)
 800060a:	701a      	strb	r2, [r3, #0]
		if(en_pin >= NUMBER_OF_EN_PIN){
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <FiniteStateMachine_Run+0x260>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d902      	bls.n	800061a <FiniteStateMachine_Run+0x22a>
			en_pin = 0;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <FiniteStateMachine_Run+0x260>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
		}
	}
	Button_Process();
 800061a:	f7ff fe49 	bl	80002b0 <Button_Process>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000ac 	.word	0x200000ac
 8000628:	20000138 	.word	0x20000138
 800062c:	20000000 	.word	0x20000000
 8000630:	20000129 	.word	0x20000129
 8000634:	200000b0 	.word	0x200000b0
 8000638:	cccccccd 	.word	0xcccccccd
 800063c:	20000001 	.word	0x20000001
 8000640:	20000002 	.word	0x20000002
 8000644:	200000ad 	.word	0x200000ad
 8000648:	20000130 	.word	0x20000130
 800064c:	2000012c 	.word	0x2000012c
 8000650:	200000ae 	.word	0x200000ae

08000654 <FiniteStateMachine_Init>:

void FiniteStateMachine_Init(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if(first_init == 1){
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <FiniteStateMachine_Init+0x7c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11f      	bne.n	80006a0 <FiniteStateMachine_Init+0x4c>
		SoftwareTimer_Init();
 8000660:	f000 fbfe 	bl	8000e60 <SoftwareTimer_Init>
		Button_TimerInit();
 8000664:	f7ff fe00 	bl	8000268 <Button_TimerInit>
		first_init = 0;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <FiniteStateMachine_Init+0x7c>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]

		blinking_timer_id = SoftwareTimer_AddNewTimer(250);
 800066e:	20fa      	movs	r0, #250	; 0xfa
 8000670:	f000 fc12 	bl	8000e98 <SoftwareTimer_AddNewTimer>
 8000674:	4603      	mov	r3, r0
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <FiniteStateMachine_Init+0x80>)
 8000678:	6013      	str	r3, [r2, #0]
		led_display_timer_id = SoftwareTimer_AddNewTimer(125);
 800067a:	207d      	movs	r0, #125	; 0x7d
 800067c:	f000 fc0c 	bl	8000e98 <SoftwareTimer_AddNewTimer>
 8000680:	4603      	mov	r3, r0
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <FiniteStateMachine_Init+0x84>)
 8000684:	6013      	str	r3, [r2, #0]
		trafic_light_timer_id = SoftwareTimer_AddNewTimer(1000);
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	f000 fc05 	bl	8000e98 <SoftwareTimer_AddNewTimer>
 800068e:	4603      	mov	r3, r0
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <FiniteStateMachine_Init+0x88>)
 8000692:	6013      	str	r3, [r2, #0]
		modify_restrict_timer_id = SoftwareTimer_AddNewTimer(250);
 8000694:	20fa      	movs	r0, #250	; 0xfa
 8000696:	f000 fbff 	bl	8000e98 <SoftwareTimer_AddNewTimer>
 800069a:	4603      	mov	r3, r0
 800069c:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <FiniteStateMachine_Init+0x8c>)
 800069e:	6013      	str	r3, [r2, #0]
	}


	machine_state = FSM_NORMAL;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <FiniteStateMachine_Init+0x90>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
	trafic_light_state = TLS_INIT;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <FiniteStateMachine_Init+0x94>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	en_pin = 0;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <FiniteStateMachine_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, LED_Pin|SEG_A_Pin|SEG_B_Pin|SEG_C_Pin
 80006b2:	2200      	movs	r2, #0
 80006b4:	f643 71a0 	movw	r1, #16288	; 0x3fa0
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <FiniteStateMachine_Init+0x9c>)
 80006ba:	f001 f9aa 	bl	8001a12 <HAL_GPIO_WritePin>
	                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(GPIOB, RED_A_Pin|YELLOW_A_Pin|GREEN_A_Pin|RED_B_Pin
 80006be:	2200      	movs	r2, #0
 80006c0:	f64f 41f0 	movw	r1, #64752	; 0xfcf0
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <FiniteStateMachine_Init+0xa0>)
 80006c6:	f001 f9a4 	bl	8001a12 <HAL_GPIO_WritePin>
	                          |YELLOW_B_Pin|GREEN_B_Pin|SEG_EN0_Pin|SEG_EN1_Pin
	                          |SEG_EN2_Pin|SEG_EN3_Pin, GPIO_PIN_RESET);
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000004 	.word	0x20000004
 80006d4:	20000130 	.word	0x20000130
 80006d8:	2000012c 	.word	0x2000012c
 80006dc:	20000138 	.word	0x20000138
 80006e0:	20000134 	.word	0x20000134
 80006e4:	200000ac 	.word	0x200000ac
 80006e8:	200000ad 	.word	0x200000ad
 80006ec:	200000ae 	.word	0x200000ae
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40010c00 	.word	0x40010c00

080006f8 <FiniteStateMachine_Normal>:

void FiniteStateMachine_Normal(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	switch(trafic_light_state){
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <FiniteStateMachine_Normal+0x110>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b04      	cmp	r3, #4
 8000702:	d868      	bhi.n	80007d6 <FiniteStateMachine_Normal+0xde>
 8000704:	a201      	add	r2, pc, #4	; (adr r2, 800070c <FiniteStateMachine_Normal+0x14>)
 8000706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070a:	bf00      	nop
 800070c:	08000721 	.word	0x08000721
 8000710:	0800073f 	.word	0x0800073f
 8000714:	0800075d 	.word	0x0800075d
 8000718:	0800078b 	.word	0x0800078b
 800071c:	080007a9 	.word	0x080007a9
	case TLS_INIT:
		if(1){
			trafic_light_state = TLS_GREEN_RED;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <FiniteStateMachine_Normal+0x110>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_green;
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <FiniteStateMachine_Normal+0x114>)
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 800072c:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_red;
 800072e:	4b39      	ldr	r3, [pc, #228]	; (8000814 <FiniteStateMachine_Normal+0x11c>)
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 8000734:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_GREEN_RED);
 8000736:	2001      	movs	r0, #1
 8000738:	f000 faa0 	bl	8000c7c <DisplayTraficLight>
		}
		break;
 800073c:	e054      	b.n	80007e8 <FiniteStateMachine_Normal+0xf0>

	case TLS_GREEN_RED:
		if(counter_A <= 0){
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d149      	bne.n	80007da <FiniteStateMachine_Normal+0xe2>
			trafic_light_state = TLS_YELLOW_RED;
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <FiniteStateMachine_Normal+0x110>)
 8000748:	2202      	movs	r2, #2
 800074a:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_yellow;
 800074c:	4b33      	ldr	r3, [pc, #204]	; (800081c <FiniteStateMachine_Normal+0x124>)
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 8000752:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_YELLOW_RED);
 8000754:	2002      	movs	r0, #2
 8000756:	f000 fa91 	bl	8000c7c <DisplayTraficLight>
		}
		break;
 800075a:	e03e      	b.n	80007da <FiniteStateMachine_Normal+0xe2>

	case TLS_YELLOW_RED:
		if(counter_A <= 0 && counter_B <= 0){
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d13c      	bne.n	80007de <FiniteStateMachine_Normal+0xe6>
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d138      	bne.n	80007de <FiniteStateMachine_Normal+0xe6>
			trafic_light_state = TLS_RED_GREEN;
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <FiniteStateMachine_Normal+0x110>)
 800076e:	2203      	movs	r2, #3
 8000770:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_red;
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <FiniteStateMachine_Normal+0x11c>)
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 8000778:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_green;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <FiniteStateMachine_Normal+0x114>)
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 8000780:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_RED_GREEN);
 8000782:	2003      	movs	r0, #3
 8000784:	f000 fa7a 	bl	8000c7c <DisplayTraficLight>
		}
		break;
 8000788:	e029      	b.n	80007de <FiniteStateMachine_Normal+0xe6>

	case TLS_RED_GREEN:
		if(counter_B <= 0){
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d127      	bne.n	80007e2 <FiniteStateMachine_Normal+0xea>
			trafic_light_state = TLS_RED_YELLOW;
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <FiniteStateMachine_Normal+0x110>)
 8000794:	2204      	movs	r2, #4
 8000796:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_yellow;
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <FiniteStateMachine_Normal+0x124>)
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 800079e:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_RED_YELLOW);
 80007a0:	2004      	movs	r0, #4
 80007a2:	f000 fa6b 	bl	8000c7c <DisplayTraficLight>
		}
		break;
 80007a6:	e01c      	b.n	80007e2 <FiniteStateMachine_Normal+0xea>

	case TLS_RED_YELLOW:
		if(counter_A <= 0 && counter_B <= 0){
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d11a      	bne.n	80007e6 <FiniteStateMachine_Normal+0xee>
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d116      	bne.n	80007e6 <FiniteStateMachine_Normal+0xee>
			trafic_light_state = TLS_GREEN_RED;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <FiniteStateMachine_Normal+0x110>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
			counter_A = base_counter_green;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <FiniteStateMachine_Normal+0x114>)
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 80007c4:	701a      	strb	r2, [r3, #0]
			counter_B = base_counter_red;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <FiniteStateMachine_Normal+0x11c>)
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 80007cc:	701a      	strb	r2, [r3, #0]
			DisplayTraficLight(TLS_GREEN_RED);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fa54 	bl	8000c7c <DisplayTraficLight>
		}
		break;
 80007d4:	e007      	b.n	80007e6 <FiniteStateMachine_Normal+0xee>

	default:
		break;
 80007d6:	bf00      	nop
 80007d8:	e006      	b.n	80007e8 <FiniteStateMachine_Normal+0xf0>
		break;
 80007da:	bf00      	nop
 80007dc:	e004      	b.n	80007e8 <FiniteStateMachine_Normal+0xf0>
		break;
 80007de:	bf00      	nop
 80007e0:	e002      	b.n	80007e8 <FiniteStateMachine_Normal+0xf0>
		break;
 80007e2:	bf00      	nop
 80007e4:	e000      	b.n	80007e8 <FiniteStateMachine_Normal+0xf0>
		break;
 80007e6:	bf00      	nop
	}
	UpdateLEDBuffer();
 80007e8:	f000 f86e 	bl	80008c8 <UpdateLEDBuffer>
	--counter_A;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <FiniteStateMachine_Normal+0x118>)
 80007f6:	701a      	strb	r2, [r3, #0]
	--counter_B;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <FiniteStateMachine_Normal+0x120>)
 8000802:	701a      	strb	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000ad 	.word	0x200000ad
 800080c:	20000002 	.word	0x20000002
 8000810:	2000012a 	.word	0x2000012a
 8000814:	20000000 	.word	0x20000000
 8000818:	20000128 	.word	0x20000128
 800081c:	20000001 	.word	0x20000001

08000820 <FiniteStateMachine_ModifyRed>:

void FiniteStateMachine_ModifyRed(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	UpdateBaseCounter();
 8000824:	f000 f8b2 	bl	800098c <UpdateBaseCounter>
	if(Button_GetButtonState(BUTTON_SET) == PRESSED){
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff fd99 	bl	8000360 <Button_GetButtonState>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d109      	bne.n	8000848 <FiniteStateMachine_ModifyRed+0x28>
		base_counter_red = modifiable_base_counter;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <FiniteStateMachine_ModifyRed+0x2c>)
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <FiniteStateMachine_ModifyRed+0x30>)
 800083a:	701a      	strb	r2, [r3, #0]
		BalanceBaseCounter(LIGHT_RED);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 f8ff 	bl	8000a40 <BalanceBaseCounter>
		machine_state = FSM_INIT;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <FiniteStateMachine_ModifyRed+0x34>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
	}
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000129 	.word	0x20000129
 8000850:	20000000 	.word	0x20000000
 8000854:	200000ac 	.word	0x200000ac

08000858 <FiniteStateMachine_ModifyYellow>:

void FiniteStateMachine_ModifyYellow(){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	UpdateBaseCounter();
 800085c:	f000 f896 	bl	800098c <UpdateBaseCounter>
	if(Button_GetButtonState(BUTTON_SET) == PRESSED){
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fd7d 	bl	8000360 <Button_GetButtonState>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d109      	bne.n	8000880 <FiniteStateMachine_ModifyYellow+0x28>
		base_counter_yellow = modifiable_base_counter;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <FiniteStateMachine_ModifyYellow+0x2c>)
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <FiniteStateMachine_ModifyYellow+0x30>)
 8000872:	701a      	strb	r2, [r3, #0]
		BalanceBaseCounter(LIGHT_YELLOW);
 8000874:	2001      	movs	r0, #1
 8000876:	f000 f8e3 	bl	8000a40 <BalanceBaseCounter>
		machine_state = FSM_INIT;
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <FiniteStateMachine_ModifyYellow+0x34>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
	}
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000129 	.word	0x20000129
 8000888:	20000001 	.word	0x20000001
 800088c:	200000ac 	.word	0x200000ac

08000890 <FiniteStateMachine_ModifyGreen>:

void FiniteStateMachine_ModifyGreen(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	UpdateBaseCounter();
 8000894:	f000 f87a 	bl	800098c <UpdateBaseCounter>
	if(Button_GetButtonState(BUTTON_SET) == PRESSED){
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fd61 	bl	8000360 <Button_GetButtonState>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d109      	bne.n	80008b8 <FiniteStateMachine_ModifyGreen+0x28>
		base_counter_green = modifiable_base_counter;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <FiniteStateMachine_ModifyGreen+0x2c>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <FiniteStateMachine_ModifyGreen+0x30>)
 80008aa:	701a      	strb	r2, [r3, #0]
		BalanceBaseCounter(LIGHT_GREEN);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f000 f8c7 	bl	8000a40 <BalanceBaseCounter>
		machine_state = FSM_INIT;
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <FiniteStateMachine_ModifyGreen+0x34>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	}
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000129 	.word	0x20000129
 80008c0:	20000002 	.word	0x20000002
 80008c4:	200000ac 	.word	0x200000ac

080008c8 <UpdateLEDBuffer>:


void UpdateLEDBuffer(){
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	led_buffer[0] = counter_A / 10;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <UpdateLEDBuffer+0x6c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <UpdateLEDBuffer+0x70>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	08db      	lsrs	r3, r3, #3
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <UpdateLEDBuffer+0x74>)
 80008dc:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = counter_A - led_buffer[0] * 10;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <UpdateLEDBuffer+0x74>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	0152      	lsls	r2, r2, #5
 80008e6:	1ad2      	subs	r2, r2, r3
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <UpdateLEDBuffer+0x6c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <UpdateLEDBuffer+0x74>)
 80008fa:	705a      	strb	r2, [r3, #1]
	led_buffer[2] = counter_B / 10;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <UpdateLEDBuffer+0x78>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <UpdateLEDBuffer+0x70>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	08db      	lsrs	r3, r3, #3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <UpdateLEDBuffer+0x74>)
 800090c:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = counter_B - led_buffer[2] * 10;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <UpdateLEDBuffer+0x74>)
 8000910:	789b      	ldrb	r3, [r3, #2]
 8000912:	461a      	mov	r2, r3
 8000914:	0152      	lsls	r2, r2, #5
 8000916:	1ad2      	subs	r2, r2, r3
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <UpdateLEDBuffer+0x78>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4413      	add	r3, r2
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <UpdateLEDBuffer+0x74>)
 800092a:	70da      	strb	r2, [r3, #3]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	2000012a 	.word	0x2000012a
 8000938:	cccccccd 	.word	0xcccccccd
 800093c:	200000b0 	.word	0x200000b0
 8000940:	20000128 	.word	0x20000128

08000944 <FiniteStateMachine_ToggleLight>:

void FiniteStateMachine_ToggleLight(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000948:	2120      	movs	r1, #32
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <FiniteStateMachine_ToggleLight+0x40>)
 800094c:	f001 f879 	bl	8001a42 <HAL_GPIO_TogglePin>
	switch(machine_state){
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <FiniteStateMachine_ToggleLight+0x44>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b04      	cmp	r3, #4
 8000956:	d00e      	beq.n	8000976 <FiniteStateMachine_ToggleLight+0x32>
 8000958:	2b04      	cmp	r3, #4
 800095a:	dc10      	bgt.n	800097e <FiniteStateMachine_ToggleLight+0x3a>
 800095c:	2b02      	cmp	r3, #2
 800095e:	d002      	beq.n	8000966 <FiniteStateMachine_ToggleLight+0x22>
 8000960:	2b03      	cmp	r3, #3
 8000962:	d004      	beq.n	800096e <FiniteStateMachine_ToggleLight+0x2a>
	case FSM_MODIFY_GREEN:
		LEDdisplay_ToggleLight(LIGHT_GREEN);
		break;

	default:
		break;
 8000964:	e00b      	b.n	800097e <FiniteStateMachine_ToggleLight+0x3a>
		LEDdisplay_ToggleLight(LIGHT_RED);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f9f8 	bl	8000d5c <LEDdisplay_ToggleLight>
		break;
 800096c:	e008      	b.n	8000980 <FiniteStateMachine_ToggleLight+0x3c>
		LEDdisplay_ToggleLight(LIGHT_YELLOW);
 800096e:	2001      	movs	r0, #1
 8000970:	f000 f9f4 	bl	8000d5c <LEDdisplay_ToggleLight>
		break;
 8000974:	e004      	b.n	8000980 <FiniteStateMachine_ToggleLight+0x3c>
		LEDdisplay_ToggleLight(LIGHT_GREEN);
 8000976:	2002      	movs	r0, #2
 8000978:	f000 f9f0 	bl	8000d5c <LEDdisplay_ToggleLight>
		break;
 800097c:	e000      	b.n	8000980 <FiniteStateMachine_ToggleLight+0x3c>
		break;
 800097e:	bf00      	nop
	}
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40010800 	.word	0x40010800
 8000988:	200000ac 	.word	0x200000ac

0800098c <UpdateBaseCounter>:
/**
 * This function is used for all modify states
 * The only different thing between state is modifiable_base_counter is set to the next state when the state is switched
 * The handling when set_button is pressed is in its respective state
 */
void UpdateBaseCounter(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	switch(Button_GetButtonState(BUTTON_MODIFY)){
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fce5 	bl	8000360 <Button_GetButtonState>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d002      	beq.n	80009a2 <UpdateBaseCounter+0x16>
 800099c:	2b02      	cmp	r3, #2
 800099e:	d00e      	beq.n	80009be <UpdateBaseCounter+0x32>
			}
		}
		break;

	default:
		break;
 80009a0:	e02b      	b.n	80009fa <UpdateBaseCounter+0x6e>
		modifiable_base_counter++;
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009ac:	701a      	strb	r2, [r3, #0]
		if(modifiable_base_counter > 99){
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b63      	cmp	r3, #99	; 0x63
 80009b4:	d91e      	bls.n	80009f4 <UpdateBaseCounter+0x68>
			modifiable_base_counter = 0;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
		break;
 80009bc:	e01a      	b.n	80009f4 <UpdateBaseCounter+0x68>
		if(SoftwareTimer_GetFlag(modify_restrict_timer_id) == FLAG_ON){
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <UpdateBaseCounter+0xa8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 faae 	bl	8000f24 <SoftwareTimer_GetFlag>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d114      	bne.n	80009f8 <UpdateBaseCounter+0x6c>
			SoftwareTimer_ResetFlag(modify_restrict_timer_id);
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <UpdateBaseCounter+0xa8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fab6 	bl	8000f44 <SoftwareTimer_ResetFlag>
			modifiable_base_counter++;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009e2:	701a      	strb	r2, [r3, #0]
			if(modifiable_base_counter > 99){
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b63      	cmp	r3, #99	; 0x63
 80009ea:	d905      	bls.n	80009f8 <UpdateBaseCounter+0x6c>
				modifiable_base_counter = 0;
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		break;
 80009f2:	e001      	b.n	80009f8 <UpdateBaseCounter+0x6c>
		break;
 80009f4:	bf00      	nop
 80009f6:	e000      	b.n	80009fa <UpdateBaseCounter+0x6e>
		break;
 80009f8:	bf00      	nop
	}

	led_buffer[2] = modifiable_base_counter / 10;
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <UpdateBaseCounter+0xa4>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <UpdateBaseCounter+0xac>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <UpdateBaseCounter+0xb0>)
 8000a0a:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = modifiable_base_counter - led_buffer[2] * 10;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <UpdateBaseCounter+0xb0>)
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	461a      	mov	r2, r3
 8000a12:	0152      	lsls	r2, r2, #5
 8000a14:	1ad2      	subs	r2, r2, r3
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <UpdateBaseCounter+0xa4>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <UpdateBaseCounter+0xb0>)
 8000a28:	70da      	strb	r2, [r3, #3]
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000129 	.word	0x20000129
 8000a34:	20000134 	.word	0x20000134
 8000a38:	cccccccd 	.word	0xcccccccd
 8000a3c:	200000b0 	.word	0x200000b0

08000a40 <BalanceBaseCounter>:

void BalanceBaseCounter(int priority_light){
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	switch(priority_light){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d01b      	beq.n	8000a86 <BalanceBaseCounter+0x46>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	dc21      	bgt.n	8000a98 <BalanceBaseCounter+0x58>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <BalanceBaseCounter+0x22>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d009      	beq.n	8000a74 <BalanceBaseCounter+0x34>
	case LIGHT_GREEN:
		base_counter_red = base_counter_green + base_counter_yellow;
		break;

	default:
		break;
 8000a60:	e01a      	b.n	8000a98 <BalanceBaseCounter+0x58>
		base_counter_green = base_counter_red - base_counter_yellow;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <BalanceBaseCounter+0x64>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <BalanceBaseCounter+0x68>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <BalanceBaseCounter+0x6c>)
 8000a70:	701a      	strb	r2, [r3, #0]
		break;
 8000a72:	e012      	b.n	8000a9a <BalanceBaseCounter+0x5a>
		base_counter_red = base_counter_green + base_counter_yellow;
 8000a74:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <BalanceBaseCounter+0x6c>)
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <BalanceBaseCounter+0x68>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <BalanceBaseCounter+0x64>)
 8000a82:	701a      	strb	r2, [r3, #0]
		break;
 8000a84:	e009      	b.n	8000a9a <BalanceBaseCounter+0x5a>
		base_counter_red = base_counter_green + base_counter_yellow;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <BalanceBaseCounter+0x6c>)
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <BalanceBaseCounter+0x68>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <BalanceBaseCounter+0x64>)
 8000a94:	701a      	strb	r2, [r3, #0]
		break;
 8000a96:	e000      	b.n	8000a9a <BalanceBaseCounter+0x5a>
		break;
 8000a98:	bf00      	nop
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000001 	.word	0x20000001
 8000aac:	20000002 	.word	0x20000002

08000ab0 <LEDdisplay_DisplayNumber>:

/**
 * Implementation
 */

void LEDdisplay_DisplayNumber(uint8_t number, uint8_t en_pin){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
	LEDdisplay_ClearEn();
 8000ac0:	f000 f816 	bl	8000af0 <LEDdisplay_ClearEn>
	HAL_GPIO_WritePin(GPIOB, SEG_EN0_Pin << en_pin, RESET);
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	2210      	movs	r2, #16
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <LEDdisplay_DisplayNumber+0x3c>)
 8000ad4:	f000 ff9d 	bl	8001a12 <HAL_GPIO_WritePin>

	LEDdisplay_ClearBuffer();
 8000ad8:	f000 f828 	bl	8000b2c <LEDdisplay_ClearBuffer>
	Display7SEG(number);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f842 	bl	8000b68 <Display7SEG>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40010c00 	.word	0x40010c00

08000af0 <LEDdisplay_ClearEn>:

void LEDdisplay_ClearEn(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; ++i)
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e00c      	b.n	8000b16 <LEDdisplay_ClearEn+0x26>
		HAL_GPIO_WritePin(GPIOB, SEG_EN0_Pin << i, SET);
 8000afc:	2210      	movs	r2, #16
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	2201      	movs	r2, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <LEDdisplay_ClearEn+0x38>)
 8000b0c:	f000 ff81 	bl	8001a12 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; ++i)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3301      	adds	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	ddef      	ble.n	8000afc <LEDdisplay_ClearEn+0xc>
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40010c00 	.word	0x40010c00

08000b2c <LEDdisplay_ClearBuffer>:

void LEDdisplay_ClearBuffer(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; ++i){
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	e00c      	b.n	8000b52 <LEDdisplay_ClearBuffer+0x26>
		HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << i, SET);
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2201      	movs	r2, #1
 8000b44:	4619      	mov	r1, r3
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <LEDdisplay_ClearBuffer+0x38>)
 8000b48:	f000 ff63 	bl	8001a12 <HAL_GPIO_WritePin>
	for(int i = 0; i < 7; ++i){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b06      	cmp	r3, #6
 8000b56:	ddef      	ble.n	8000b38 <LEDdisplay_ClearBuffer+0xc>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010800 	.word	0x40010800

08000b68 <Display7SEG>:

void Display7SEG(int number){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 0, !(segment_code[0] & number_code[number]));
 8000b70:	2201      	movs	r2, #1
 8000b72:	4940      	ldr	r1, [pc, #256]	; (8000c74 <Display7SEG+0x10c>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	440b      	add	r3, r1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf0c      	ite	eq
 8000b82:	2301      	moveq	r3, #1
 8000b84:	2300      	movne	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	483a      	ldr	r0, [pc, #232]	; (8000c78 <Display7SEG+0x110>)
 8000b8e:	f000 ff40 	bl	8001a12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 1, !(segment_code[1] & number_code[number]));
 8000b92:	2202      	movs	r2, #2
 8000b94:	4937      	ldr	r1, [pc, #220]	; (8000c74 <Display7SEG+0x10c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	440b      	add	r3, r1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf0c      	ite	eq
 8000ba4:	2301      	moveq	r3, #1
 8000ba6:	2300      	movne	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb0:	4831      	ldr	r0, [pc, #196]	; (8000c78 <Display7SEG+0x110>)
 8000bb2:	f000 ff2e 	bl	8001a12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 2, !(segment_code[2] & number_code[number]));
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	492e      	ldr	r1, [pc, #184]	; (8000c74 <Display7SEG+0x10c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bf0c      	ite	eq
 8000bc8:	2301      	moveq	r3, #1
 8000bca:	2300      	movne	r3, #0
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4828      	ldr	r0, [pc, #160]	; (8000c78 <Display7SEG+0x110>)
 8000bd6:	f000 ff1c 	bl	8001a12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 3, !(segment_code[3] & number_code[number]));
 8000bda:	2208      	movs	r2, #8
 8000bdc:	4925      	ldr	r1, [pc, #148]	; (8000c74 <Display7SEG+0x10c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	440b      	add	r3, r1
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4013      	ands	r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	bf0c      	ite	eq
 8000bec:	2301      	moveq	r3, #1
 8000bee:	2300      	movne	r3, #0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf8:	481f      	ldr	r0, [pc, #124]	; (8000c78 <Display7SEG+0x110>)
 8000bfa:	f000 ff0a 	bl	8001a12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 4, !(segment_code[4] & number_code[number]));
 8000bfe:	2210      	movs	r2, #16
 8000c00:	491c      	ldr	r1, [pc, #112]	; (8000c74 <Display7SEG+0x10c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	440b      	add	r3, r1
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf0c      	ite	eq
 8000c10:	2301      	moveq	r3, #1
 8000c12:	2300      	movne	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1c:	4816      	ldr	r0, [pc, #88]	; (8000c78 <Display7SEG+0x110>)
 8000c1e:	f000 fef8 	bl	8001a12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 5, !(segment_code[5] & number_code[number]));
 8000c22:	2220      	movs	r2, #32
 8000c24:	4913      	ldr	r1, [pc, #76]	; (8000c74 <Display7SEG+0x10c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	440b      	add	r3, r1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf0c      	ite	eq
 8000c34:	2301      	moveq	r3, #1
 8000c36:	2300      	movne	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <Display7SEG+0x110>)
 8000c42:	f000 fee6 	bl	8001a12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG_A_Pin << 6, !(segment_code[6] & number_code[number]));
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	490a      	ldr	r1, [pc, #40]	; (8000c74 <Display7SEG+0x10c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4013      	ands	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf0c      	ite	eq
 8000c58:	2301      	moveq	r3, #1
 8000c5a:	2300      	movne	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <Display7SEG+0x110>)
 8000c66:	f000 fed4 	bl	8001a12 <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08002b60 	.word	0x08002b60
 8000c78:	40010800 	.word	0x40010800

08000c7c <DisplayTraficLight>:

void DisplayTraficLight(TraficLightState_t state){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	ClearTraficLight();
 8000c86:	f000 f84b 	bl	8000d20 <ClearTraficLight>
	switch(state){
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d83e      	bhi.n	8000d10 <DisplayTraficLight+0x94>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <DisplayTraficLight+0x1c>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000ca9 	.word	0x08000ca9
 8000c9c:	08000cc3 	.word	0x08000cc3
 8000ca0:	08000cdd 	.word	0x08000cdd
 8000ca4:	08000cf7 	.word	0x08000cf7
	case TLS_GREEN_RED:
		HAL_GPIO_WritePin(GPIOB, GREEN_A_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	481b      	ldr	r0, [pc, #108]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000cb0:	f000 feaf 	bl	8001a12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_B_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cba:	4818      	ldr	r0, [pc, #96]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000cbc:	f000 fea9 	bl	8001a12 <HAL_GPIO_WritePin>
		break;
 8000cc0:	e027      	b.n	8000d12 <DisplayTraficLight+0x96>

	case TLS_YELLOW_RED:
		HAL_GPIO_WritePin(GPIOB, YELLOW_A_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000cca:	f000 fea2 	bl	8001a12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, RED_B_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000cd6:	f000 fe9c 	bl	8001a12 <HAL_GPIO_WritePin>
		break;
 8000cda:	e01a      	b.n	8000d12 <DisplayTraficLight+0x96>

	case TLS_RED_GREEN:
		HAL_GPIO_WritePin(GPIOB, RED_A_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000ce4:	f000 fe95 	bl	8001a12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GREEN_B_Pin, RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000cf0:	f000 fe8f 	bl	8001a12 <HAL_GPIO_WritePin>
		break;
 8000cf4:	e00d      	b.n	8000d12 <DisplayTraficLight+0x96>

	case TLS_RED_YELLOW:
		HAL_GPIO_WritePin(GPIOB, RED_A_Pin, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000cfe:	f000 fe88 	bl	8001a12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, YELLOW_B_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <DisplayTraficLight+0xa0>)
 8000d0a:	f000 fe82 	bl	8001a12 <HAL_GPIO_WritePin>
		break;
 8000d0e:	e000      	b.n	8000d12 <DisplayTraficLight+0x96>

	default:
		break;
 8000d10:	bf00      	nop
	}
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <ClearTraficLight>:

void ClearTraficLight(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	for(int i = 0; i < 6; ++i){
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e00d      	b.n	8000d48 <ClearTraficLight+0x28>
		HAL_GPIO_WritePin(GPIOB, RED_A_Pin << i, SET);
 8000d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <ClearTraficLight+0x38>)
 8000d3e:	f000 fe68 	bl	8001a12 <HAL_GPIO_WritePin>
	for(int i = 0; i < 6; ++i){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	ddee      	ble.n	8000d2c <ClearTraficLight+0xc>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010c00 	.word	0x40010c00

08000d5c <LEDdisplay_ToggleLight>:

void LEDdisplay_ToggleLight(int light){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	switch(light){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d01f      	beq.n	8000daa <LEDdisplay_ToggleLight+0x4e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	dc27      	bgt.n	8000dc0 <LEDdisplay_ToggleLight+0x64>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <LEDdisplay_ToggleLight+0x22>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d00b      	beq.n	8000d94 <LEDdisplay_ToggleLight+0x38>
		HAL_GPIO_TogglePin(GREEN_A_GPIO_Port, GREEN_A_Pin);
		HAL_GPIO_TogglePin(GREEN_B_GPIO_Port, GREEN_B_Pin);
		break;

	default:
		break;
 8000d7c:	e020      	b.n	8000dc0 <LEDdisplay_ToggleLight+0x64>
		HAL_GPIO_TogglePin(RED_A_GPIO_Port, RED_A_Pin);
 8000d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <LEDdisplay_ToggleLight+0x70>)
 8000d84:	f000 fe5d 	bl	8001a42 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_B_GPIO_Port, RED_B_Pin);
 8000d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <LEDdisplay_ToggleLight+0x70>)
 8000d8e:	f000 fe58 	bl	8001a42 <HAL_GPIO_TogglePin>
		break;
 8000d92:	e016      	b.n	8000dc2 <LEDdisplay_ToggleLight+0x66>
		HAL_GPIO_TogglePin(YELLOW_A_GPIO_Port, YELLOW_A_Pin);
 8000d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LEDdisplay_ToggleLight+0x70>)
 8000d9a:	f000 fe52 	bl	8001a42 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW_B_GPIO_Port, YELLOW_B_Pin);
 8000d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da2:	480a      	ldr	r0, [pc, #40]	; (8000dcc <LEDdisplay_ToggleLight+0x70>)
 8000da4:	f000 fe4d 	bl	8001a42 <HAL_GPIO_TogglePin>
		break;
 8000da8:	e00b      	b.n	8000dc2 <LEDdisplay_ToggleLight+0x66>
		HAL_GPIO_TogglePin(GREEN_A_GPIO_Port, GREEN_A_Pin);
 8000daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <LEDdisplay_ToggleLight+0x70>)
 8000db0:	f000 fe47 	bl	8001a42 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN_B_GPIO_Port, GREEN_B_Pin);
 8000db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <LEDdisplay_ToggleLight+0x70>)
 8000dba:	f000 fe42 	bl	8001a42 <HAL_GPIO_TogglePin>
		break;
 8000dbe:	e000      	b.n	8000dc2 <LEDdisplay_ToggleLight+0x66>
		break;
 8000dc0:	bf00      	nop
	};
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <LinkedList_Add>:
 *  Created on: Sep 25, 2025
 *      Author: Hi
 */
#include "Linked_List.h"

void LinkedList_Add(TimerNode_t* head, TimerNode_t* new_node){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]


	//Step 1: Move the new_node to the correct place
	//While loop is necessary for iterating through the list
	TimerNode_t* current_node = head;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
	while(current_node->next && current_node->next->timer.counter < new_node->timer.counter){
 8000dde:	e00a      	b.n	8000df6 <LinkedList_Add+0x26>
		new_node->timer.counter -= current_node->next->timer.counter;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	1ad2      	subs	r2, r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	609a      	str	r2, [r3, #8]
		current_node = current_node->next;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	60fb      	str	r3, [r7, #12]
	while(current_node->next && current_node->next->timer.counter < new_node->timer.counter){
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <LinkedList_Add+0x3c>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbe9      	blt.n	8000de0 <LinkedList_Add+0x10>
	}

	//Step 2: Connect the new_node to the correct place
	new_node->next = current_node->next;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	611a      	str	r2, [r3, #16]
	current_node->next = new_node;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	611a      	str	r2, [r3, #16]

	//Step 3: Update its next node if it exist
	if(new_node->next){
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d008      	beq.n	8000e34 <LinkedList_Add+0x64>
		new_node->next->timer.counter -= new_node->timer.counter;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	6899      	ldr	r1, [r3, #8]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	609a      	str	r2, [r3, #8]
	}
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <LinkedList_PopHead>:

void LinkedList_PopHead(TimerNode_t* head){
 8000e3e:	b480      	push	{r7}
 8000e40:	b085      	sub	sp, #20
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	TimerNode_t* poped_node = head->next;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	60fb      	str	r3, [r7, #12]
	head->next = poped_node->next;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	611a      	str	r2, [r3, #16]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
	...

08000e60 <SoftwareTimer_Init>:
/**
 * Initialize Dummy Node
 * Must be called before enter infinite loop
 * Must be called before using any other function
 */
void SoftwareTimer_Init(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
	head = (TimerNode_t*)malloc(sizeof(TimerNode_t));
 8000e66:	2014      	movs	r0, #20
 8000e68:	f001 fde6 	bl	8002a38 <malloc>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SoftwareTimer_Init+0x34>)
 8000e72:	601a      	str	r2, [r3, #0]
	head->next = NULL;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <SoftwareTimer_Init+0x34>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
	head->timer = (Timer_t){0, 0, FLAG_OFF};
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SoftwareTimer_Init+0x34>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	2300      	movs	r3, #0
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	6053      	str	r3, [r2, #4]
 8000e88:	6093      	str	r3, [r2, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000013c 	.word	0x2000013c

08000e98 <SoftwareTimer_AddNewTimer>:

/**
 * Must only be called when new timer is needed
 * Should only be used outside of infinite loop
 */
int SoftwareTimer_AddNewTimer(int time_amount){
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	//Step 1: Create a new timer
	Timer_t new_timer = {timer_count, time_amount, time_amount, FLAG_OFF};
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <SoftwareTimer_AddNewTimer+0x5c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]

	//Step 2: Create a new timer_node
	TimerNode_t* new_node = (TimerNode_t*)malloc(sizeof(TimerNode_t));
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	f001 fdc0 	bl	8002a38 <malloc>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	61fb      	str	r3, [r7, #28]
	new_node->timer = new_timer;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	461c      	mov	r4, r3
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//Step 3: Add the node into the array for reference
	timers[timer_count] = new_node;
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <SoftwareTimer_AddNewTimer+0x5c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	490a      	ldr	r1, [pc, #40]	; (8000ef8 <SoftwareTimer_AddNewTimer+0x60>)
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Step 4: Add to the linked list
	LinkedList_Add(head, new_node);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <SoftwareTimer_AddNewTimer+0x64>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	69f9      	ldr	r1, [r7, #28]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff77 	bl	8000dd0 <LinkedList_Add>
	return timer_count++;
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SoftwareTimer_AddNewTimer+0x5c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	4902      	ldr	r1, [pc, #8]	; (8000ef4 <SoftwareTimer_AddNewTimer+0x5c>)
 8000eea:	600a      	str	r2, [r1, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3724      	adds	r7, #36	; 0x24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	200000f4 	.word	0x200000f4
 8000ef8:	200000b4 	.word	0x200000b4
 8000efc:	2000013c 	.word	0x2000013c

08000f00 <SoftwareTimer_SetNewTimer>:

void SoftwareTimer_SetNewTimer(int id, int time_amount){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	timers[id]->timer.base_counter = time_amount;
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SoftwareTimer_SetNewTimer+0x20>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	605a      	str	r2, [r3, #4]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	200000b4 	.word	0x200000b4

08000f24 <SoftwareTimer_GetFlag>:

const int SoftwareTimer_GetFlag(int id){
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	return timers[id]->timer.flag;
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <SoftwareTimer_GetFlag+0x1c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	68db      	ldr	r3, [r3, #12]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	200000b4 	.word	0x200000b4

08000f44 <SoftwareTimer_ResetFlag>:

void SoftwareTimer_ResetFlag(int id){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	timers[id]->timer.flag = FLAG_OFF;
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <SoftwareTimer_ResetFlag+0x44>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
	timers[id]->timer.counter = timers[id]->timer.base_counter;
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <SoftwareTimer_ResetFlag+0x44>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f60:	4909      	ldr	r1, [pc, #36]	; (8000f88 <SoftwareTimer_ResetFlag+0x44>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f68:	6852      	ldr	r2, [r2, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
	LinkedList_Add(head, timers[id]);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <SoftwareTimer_ResetFlag+0x48>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4905      	ldr	r1, [pc, #20]	; (8000f88 <SoftwareTimer_ResetFlag+0x44>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f7ff ff28 	bl	8000dd0 <LinkedList_Add>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000b4 	.word	0x200000b4
 8000f8c:	2000013c 	.word	0x2000013c

08000f90 <SoftwareTimer_Step>:
/**
 * The problem with this approach is that is:
 *  If interrupt duration must be < our timer or else the timer will always be late
 * 	or interrupt duration is faster than 1ms then last_time is always roughly equal because HAL_GetTick() only return value in ms.
 */
void SoftwareTimer_Step(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	TimerNode_t* node = head->next;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <SoftwareTimer_Step+0x78>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	607b      	str	r3, [r7, #4]
	if(node->timer.counter > 0){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dd25      	ble.n	8000ff2 <SoftwareTimer_Step+0x62>
		last_time = current_time;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <SoftwareTimer_Step+0x7c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <SoftwareTimer_Step+0x80>)
 8000fac:	6013      	str	r3, [r2, #0]
		current_time = HAL_GetTick();
 8000fae:	f000 fa87 	bl	80014c0 <HAL_GetTick>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <SoftwareTimer_Step+0x7c>)
 8000fb6:	6013      	str	r3, [r2, #0]
		node->timer.counter -= current_time - last_time;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <SoftwareTimer_Step+0x80>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <SoftwareTimer_Step+0x7c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	440b      	add	r3, r1
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	609a      	str	r2, [r3, #8]
	}

	while(head->next->timer.counter <= 0){
 8000fd0:	e00f      	b.n	8000ff2 <SoftwareTimer_Step+0x62>
		int id = head->next->timer.id;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <SoftwareTimer_Step+0x78>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	603b      	str	r3, [r7, #0]
		timers[id]->timer.flag = FLAG_ON;
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <SoftwareTimer_Step+0x84>)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	60da      	str	r2, [r3, #12]
		LinkedList_PopHead(head);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <SoftwareTimer_Step+0x78>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff26 	bl	8000e3e <LinkedList_PopHead>
	while(head->next->timer.counter <= 0){
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SoftwareTimer_Step+0x78>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dde9      	ble.n	8000fd2 <SoftwareTimer_Step+0x42>
	}
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000013c 	.word	0x2000013c
 800100c:	200000fc 	.word	0x200000fc
 8001010:	200000f8 	.word	0x200000f8
 8001014:	200000b4 	.word	0x200000b4

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 f9f8 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f80c 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f892 	bl	800114c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001028:	f000 f844 	bl	80010b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <main+0x20>)
 800102e:	f001 f94d 	bl	80022cc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FiniteStateMachine_Run();
 8001032:	f7ff f9dd 	bl	80003f0 <FiniteStateMachine_Run>
 8001036:	e7fc      	b.n	8001032 <main+0x1a>
 8001038:	20000140 	.word	0x20000140

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fcfc 	bl	8002a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2310      	movs	r3, #16
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fcfe 	bl	8001a74 <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800107e:	f000 f8d8 	bl	8001232 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f000 ff6a 	bl	8001f74 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010a6:	f000 f8c4 	bl	8001232 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3740      	adds	r7, #64	; 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_TIM2_Init+0x94>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_TIM2_Init+0x94>)
 80010da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_TIM2_Init+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM2_Init+0x94>)
 80010e8:	2209      	movs	r2, #9
 80010ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_TIM2_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM2_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_TIM2_Init+0x94>)
 80010fa:	f001 f897 	bl	800222c <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001104:	f000 f895 	bl	8001232 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <MX_TIM2_Init+0x94>)
 8001116:	f001 fa15 	bl	8002544 <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001120:	f000 f887 	bl	8001232 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_TIM2_Init+0x94>)
 8001132:	f001 fbed 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800113c:	f000 f879 	bl	8001232 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000140 	.word	0x20000140

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <MX_GPIO_Init+0xb8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <MX_GPIO_Init+0xb8>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0xb8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_GPIO_Init+0xb8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <MX_GPIO_Init+0xb8>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xb8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SEG_A_Pin|SEG_B_Pin|SEG_C_Pin
 8001190:	2200      	movs	r2, #0
 8001192:	f643 71a0 	movw	r1, #16288	; 0x3fa0
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <MX_GPIO_Init+0xbc>)
 8001198:	f000 fc3b 	bl	8001a12 <HAL_GPIO_WritePin>
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_A_Pin|YELLOW_A_Pin|GREEN_A_Pin|RED_B_Pin
 800119c:	2200      	movs	r2, #0
 800119e:	f64f 41f0 	movw	r1, #64752	; 0xfcf0
 80011a2:	481a      	ldr	r0, [pc, #104]	; (800120c <MX_GPIO_Init+0xc0>)
 80011a4:	f000 fc35 	bl	8001a12 <HAL_GPIO_WritePin>
                          |YELLOW_B_Pin|GREEN_B_Pin|SEG_EN0_Pin|SEG_EN1_Pin
                          |SEG_EN2_Pin|SEG_EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin SEG_A_Pin SEG_B_Pin SEG_C_Pin
                           SEG_D_Pin SEG_E_Pin SEG_F_Pin SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SEG_A_Pin|SEG_B_Pin|SEG_C_Pin
 80011a8:	f643 73a0 	movw	r3, #16288	; 0x3fa0
 80011ac:	60bb      	str	r3, [r7, #8]
                          |SEG_D_Pin|SEG_E_Pin|SEG_F_Pin|SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2302      	movs	r3, #2
 80011b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_GPIO_Init+0xbc>)
 80011c2:	f000 fa95 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_Select_Pin Button_Modify_Pin Button_Set_Pin */
  GPIO_InitStruct.Pin = Button_Select_Pin|Button_Modify_Pin|Button_Set_Pin;
 80011c6:	2307      	movs	r3, #7
 80011c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0xc0>)
 80011da:	f000 fa89 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_A_Pin YELLOW_A_Pin GREEN_A_Pin RED_B_Pin
                           YELLOW_B_Pin GREEN_B_Pin SEG_EN0_Pin SEG_EN1_Pin
                           SEG_EN2_Pin SEG_EN3_Pin */
  GPIO_InitStruct.Pin = RED_A_Pin|YELLOW_A_Pin|GREEN_A_Pin|RED_B_Pin
 80011de:	f64f 43f0 	movw	r3, #64752	; 0xfcf0
 80011e2:	60bb      	str	r3, [r7, #8]
                          |YELLOW_B_Pin|GREEN_B_Pin|SEG_EN0_Pin|SEG_EN1_Pin
                          |SEG_EN2_Pin|SEG_EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_GPIO_Init+0xc0>)
 80011f8:	f000 fa7a 	bl	80016f0 <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00

08001210 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001220:	d103      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x1a>
		SoftwareTimer_Step();
 8001222:	f7ff feb5 	bl	8000f90 <SoftwareTimer_Step>
		Button_ReadInput();
 8001226:	f7fe ff91 	bl	800014c <Button_ReadInput>
	}
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001236:	b672      	cpsid	i
}
 8001238:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123a:	e7fe      	b.n	800123a <Error_Handler+0x8>

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_MspInit+0x5c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_MspInit+0x5c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x5c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x5c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_MspInit+0x60>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_MspInit+0x60>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d113      	bne.n	80012da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	201c      	movs	r0, #28
 80012d0:	f000 f9d7 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d4:	201c      	movs	r0, #28
 80012d6:	f000 f9f0 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 f8b5 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <TIM2_IRQHandler+0x10>)
 800133e:	f001 f811 	bl	8002364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000140 	.word	0x20000140

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f001 fb32 	bl	80029e4 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20002800 	.word	0x20002800
 80013ac:	00000400 	.word	0x00000400
 80013b0:	20000100 	.word	0x20000100
 80013b4:	200001a0 	.word	0x200001a0

080013b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff fff8 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ca:	490c      	ldr	r1, [pc, #48]	; (80013fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013cc:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013e0:	4c09      	ldr	r4, [pc, #36]	; (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f001 faff 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f2:	f7ff fe11 	bl	8001018 <main>
  bx lr
 80013f6:	4770      	bx	lr
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001400:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 8001404:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001408:	2000019c 	.word	0x2000019c

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x28>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x28>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f923 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff ff06 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f93b 	bl	80016d6 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f903 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000008 	.word	0x20000008
 8001494:	20000010 	.word	0x20000010
 8001498:	2000000c 	.word	0x2000000c

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x1c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_IncTick+0x20>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a03      	ldr	r2, [pc, #12]	; (80014bc <HAL_IncTick+0x20>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000010 	.word	0x20000010
 80014bc:	20000188 	.word	0x20000188

080014c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <HAL_GetTick+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000188 	.word	0x20000188

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4906      	ldr	r1, [pc, #24]	; (800156c <__NVIC_EnableIRQ+0x34>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff90 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff2d 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff42 	bl	800151c <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff35 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b08b      	sub	sp, #44	; 0x2c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001702:	e148      	b.n	8001996 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001704:	2201      	movs	r2, #1
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	429a      	cmp	r2, r3
 800171e:	f040 8137 	bne.w	8001990 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4aa3      	ldr	r2, [pc, #652]	; (80019b4 <HAL_GPIO_Init+0x2c4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d05e      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 800172c:	4aa1      	ldr	r2, [pc, #644]	; (80019b4 <HAL_GPIO_Init+0x2c4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d875      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 8001732:	4aa1      	ldr	r2, [pc, #644]	; (80019b8 <HAL_GPIO_Init+0x2c8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d058      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 8001738:	4a9f      	ldr	r2, [pc, #636]	; (80019b8 <HAL_GPIO_Init+0x2c8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d86f      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 800173e:	4a9f      	ldr	r2, [pc, #636]	; (80019bc <HAL_GPIO_Init+0x2cc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d052      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 8001744:	4a9d      	ldr	r2, [pc, #628]	; (80019bc <HAL_GPIO_Init+0x2cc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d869      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 800174a:	4a9d      	ldr	r2, [pc, #628]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d04c      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 8001750:	4a9b      	ldr	r2, [pc, #620]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d863      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 8001756:	4a9b      	ldr	r2, [pc, #620]	; (80019c4 <HAL_GPIO_Init+0x2d4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d046      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
 800175c:	4a99      	ldr	r2, [pc, #612]	; (80019c4 <HAL_GPIO_Init+0x2d4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d85d      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d82a      	bhi.n	80017bc <HAL_GPIO_Init+0xcc>
 8001766:	2b12      	cmp	r3, #18
 8001768:	d859      	bhi.n	800181e <HAL_GPIO_Init+0x12e>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <HAL_GPIO_Init+0x80>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	080017eb 	.word	0x080017eb
 8001774:	080017c5 	.word	0x080017c5
 8001778:	080017d7 	.word	0x080017d7
 800177c:	08001819 	.word	0x08001819
 8001780:	0800181f 	.word	0x0800181f
 8001784:	0800181f 	.word	0x0800181f
 8001788:	0800181f 	.word	0x0800181f
 800178c:	0800181f 	.word	0x0800181f
 8001790:	0800181f 	.word	0x0800181f
 8001794:	0800181f 	.word	0x0800181f
 8001798:	0800181f 	.word	0x0800181f
 800179c:	0800181f 	.word	0x0800181f
 80017a0:	0800181f 	.word	0x0800181f
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	0800181f 	.word	0x0800181f
 80017ac:	0800181f 	.word	0x0800181f
 80017b0:	0800181f 	.word	0x0800181f
 80017b4:	080017cd 	.word	0x080017cd
 80017b8:	080017e1 	.word	0x080017e1
 80017bc:	4a82      	ldr	r2, [pc, #520]	; (80019c8 <HAL_GPIO_Init+0x2d8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017c2:	e02c      	b.n	800181e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e029      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	3304      	adds	r3, #4
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e024      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	3308      	adds	r3, #8
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e01f      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	330c      	adds	r3, #12
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e01a      	b.n	8001820 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017f2:	2304      	movs	r3, #4
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e013      	b.n	8001820 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001800:	2308      	movs	r3, #8
 8001802:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	611a      	str	r2, [r3, #16]
          break;
 800180a:	e009      	b.n	8001820 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800180c:	2308      	movs	r3, #8
 800180e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	615a      	str	r2, [r3, #20]
          break;
 8001816:	e003      	b.n	8001820 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
          break;
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x130>
          break;
 800181e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d801      	bhi.n	800182a <HAL_GPIO_Init+0x13a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	e001      	b.n	800182e <HAL_GPIO_Init+0x13e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d802      	bhi.n	800183c <HAL_GPIO_Init+0x14c>
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x152>
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3b08      	subs	r3, #8
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	210f      	movs	r1, #15
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	6a39      	ldr	r1, [r7, #32]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8090 	beq.w	8001990 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001870:	4b56      	ldr	r3, [pc, #344]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a55      	ldr	r2, [pc, #340]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001888:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <HAL_GPIO_Init+0x2e0>)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001894:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	220f      	movs	r2, #15
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2e4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1e0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2e8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1dc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a47      	ldr	r2, [pc, #284]	; (80019dc <HAL_GPIO_Init+0x2ec>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1d8>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e004      	b.n	80018d2 <HAL_GPIO_Init+0x1e2>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x1e2>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_GPIO_Init+0x1e2>
 80018d0:	2300      	movs	r3, #0
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	f002 0203 	and.w	r2, r2, #3
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4093      	lsls	r3, r2
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e2:	493b      	ldr	r1, [pc, #236]	; (80019d0 <HAL_GPIO_Init+0x2e0>)
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4937      	ldr	r1, [pc, #220]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190a:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	43db      	mvns	r3, r3
 8001912:	4933      	ldr	r1, [pc, #204]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001914:	4013      	ands	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	492d      	ldr	r1, [pc, #180]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	4929      	ldr	r1, [pc, #164]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 800193c:	4013      	ands	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4923      	ldr	r1, [pc, #140]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	491f      	ldr	r1, [pc, #124]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001964:	4013      	ands	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4919      	ldr	r1, [pc, #100]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	4915      	ldr	r1, [pc, #84]	; (80019e0 <HAL_GPIO_Init+0x2f0>)
 800198c:	4013      	ands	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	3301      	adds	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f aeaf 	bne.w	8001704 <HAL_GPIO_Init+0x14>
  }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	372c      	adds	r7, #44	; 0x2c
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	10320000 	.word	0x10320000
 80019b8:	10310000 	.word	0x10310000
 80019bc:	10220000 	.word	0x10220000
 80019c0:	10210000 	.word	0x10210000
 80019c4:	10120000 	.word	0x10120000
 80019c8:	10110000 	.word	0x10110000
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40010800 	.word	0x40010800
 80019d8:	40010c00 	.word	0x40010c00
 80019dc:	40011000 	.word	0x40011000
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e001      	b.n	8001a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a22:	787b      	ldrb	r3, [r7, #1]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	041a      	lsls	r2, r3, #16
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	041a      	lsls	r2, r3, #16
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	400b      	ands	r3, r1
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e26c      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8087 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a94:	4b92      	ldr	r3, [pc, #584]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d00c      	beq.n	8001aba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa0:	4b8f      	ldr	r3, [pc, #572]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d112      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5e>
 8001aac:	4b8c      	ldr	r3, [pc, #560]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aba:	4b89      	ldr	r3, [pc, #548]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d06c      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x12c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d168      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e246      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x76>
 8001adc:	4b80      	ldr	r3, [pc, #512]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a7f      	ldr	r2, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e02e      	b.n	8001b48 <HAL_RCC_OscConfig+0xd4>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x98>
 8001af2:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7a      	ldr	r2, [pc, #488]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a77      	ldr	r2, [pc, #476]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e01d      	b.n	8001b48 <HAL_RCC_OscConfig+0xd4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0xbc>
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a71      	ldr	r2, [pc, #452]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e00b      	b.n	8001b48 <HAL_RCC_OscConfig+0xd4>
 8001b30:	4b6b      	ldr	r3, [pc, #428]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6a      	ldr	r2, [pc, #424]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b68      	ldr	r3, [pc, #416]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a67      	ldr	r2, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fcb6 	bl	80014c0 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fcb2 	bl	80014c0 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1fa      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0xe4>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fca2 	bl	80014c0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fc9e 	bl	80014c0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e1e6      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x10c>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d063      	beq.n	8001c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bae:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bba:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d11c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x18c>
 8001bc6:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d116      	bne.n	8001c00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x176>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e1ba      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4939      	ldr	r1, [pc, #228]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	e03a      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c08:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fc57 	bl	80014c0 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c16:	f7ff fc53 	bl	80014c0 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e19b      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4927      	ldr	r1, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	e015      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fc36 	bl	80014c0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff fc32 	bl	80014c0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e17a      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d03a      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d019      	beq.n	8001cbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7ff fc16 	bl	80014c0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fc12 	bl	80014c0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e15a      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f000 fa9a 	bl	80021f0 <RCC_Delay>
 8001cbc:	e01c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fbfc 	bl	80014c0 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cca:	e00f      	b.n	8001cec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fbf8 	bl	80014c0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d908      	bls.n	8001cec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e140      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	42420000 	.word	0x42420000
 8001ce8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b9e      	ldr	r3, [pc, #632]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e9      	bne.n	8001ccc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a6 	beq.w	8001e52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b97      	ldr	r3, [pc, #604]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10d      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b94      	ldr	r3, [pc, #592]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a93      	ldr	r2, [pc, #588]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b91      	ldr	r3, [pc, #580]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b8e      	ldr	r3, [pc, #568]	; (8001f6c <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3e:	4b8b      	ldr	r3, [pc, #556]	; (8001f6c <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a8a      	ldr	r2, [pc, #552]	; (8001f6c <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fbb9 	bl	80014c0 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7ff fbb5 	bl	80014c0 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b64      	cmp	r3, #100	; 0x64
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0fd      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	4b81      	ldr	r3, [pc, #516]	; (8001f6c <HAL_RCC_OscConfig+0x4f8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x312>
 8001d78:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4a7a      	ldr	r2, [pc, #488]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	e02d      	b.n	8001de2 <HAL_RCC_OscConfig+0x36e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x334>
 8001d8e:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	4b73      	ldr	r3, [pc, #460]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a72      	ldr	r2, [pc, #456]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	e01c      	b.n	8001de2 <HAL_RCC_OscConfig+0x36e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d10c      	bne.n	8001dca <HAL_RCC_OscConfig+0x356>
 8001db0:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a6c      	ldr	r2, [pc, #432]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a69      	ldr	r2, [pc, #420]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	e00b      	b.n	8001de2 <HAL_RCC_OscConfig+0x36e>
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a63      	ldr	r2, [pc, #396]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d015      	beq.n	8001e16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fb69 	bl	80014c0 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff fb65 	bl	80014c0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0ab      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ee      	beq.n	8001df2 <HAL_RCC_OscConfig+0x37e>
 8001e14:	e014      	b.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb53 	bl	80014c0 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff fb4f 	bl	80014c0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e095      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e34:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1ee      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d105      	bne.n	8001e52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a47      	ldr	r2, [pc, #284]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8081 	beq.w	8001f5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5c:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d061      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d146      	bne.n	8001efe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <HAL_RCC_OscConfig+0x4fc>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff fb23 	bl	80014c0 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff fb1f 	bl	80014c0 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e067      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d108      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	492d      	ldr	r1, [pc, #180]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a19      	ldr	r1, [r3, #32]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	4927      	ldr	r1, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x4fc>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff faf3 	bl	80014c0 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff faef 	bl	80014c0 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e037      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x46a>
 8001efc:	e02f      	b.n	8001f5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <HAL_RCC_OscConfig+0x4fc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fadc 	bl	80014c0 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff fad8 	bl	80014c0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e020      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x498>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e013      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	42420060 	.word	0x42420060

08001f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0d0      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b67      	ldr	r3, [pc, #412]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0207 	bic.w	r2, r3, #7
 8001f9e:	4965      	ldr	r1, [pc, #404]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b63      	ldr	r3, [pc, #396]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	494d      	ldr	r1, [pc, #308]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d040      	beq.n	8002094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e07f      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e073      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06b      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4936      	ldr	r1, [pc, #216]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7ff fa2c 	bl	80014c0 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7ff fa28 	bl	80014c0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e053      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d210      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	4922      	ldr	r1, [pc, #136]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e032      	b.n	800212a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4916      	ldr	r1, [pc, #88]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002102:	f000 f821 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	490a      	ldr	r1, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	5ccb      	ldrb	r3, [r1, r3]
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1cc>)
 800211c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1d0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f98a 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000
 8002138:	40021000 	.word	0x40021000
 800213c:	08002b6c 	.word	0x08002b6c
 8002140:	20000008 	.word	0x20000008
 8002144:	2000000c 	.word	0x2000000c

08002148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x30>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x36>
 8002176:	e027      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	e027      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0c5b      	lsrs	r3, r3, #17
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021aa:	fb02 f203 	mul.w	r2, r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e004      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	613b      	str	r3, [r7, #16]
      break;
 80021c6:	e002      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ca:	613b      	str	r3, [r7, #16]
      break;
 80021cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ce:	693b      	ldr	r3, [r7, #16]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	007a1200 	.word	0x007a1200
 80021e4:	08002b7c 	.word	0x08002b7c
 80021e8:	08002b8c 	.word	0x08002b8c
 80021ec:	003d0900 	.word	0x003d0900

080021f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <RCC_Delay+0x34>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <RCC_Delay+0x38>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0a5b      	lsrs	r3, r3, #9
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800220c:	bf00      	nop
  }
  while (Delay --);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1e5a      	subs	r2, r3, #1
 8002212:	60fa      	str	r2, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f9      	bne.n	800220c <RCC_Delay+0x1c>
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000008 	.word	0x20000008
 8002228:	10624dd3 	.word	0x10624dd3

0800222c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e041      	b.n	80022c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff f824 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f000 fa56 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d001      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e035      	b.n	8002350 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_TIM_Base_Start_IT+0x90>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_TIM_Base_Start_IT+0x4e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230e:	d004      	beq.n	800231a <HAL_TIM_Base_Start_IT+0x4e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <HAL_TIM_Base_Start_IT+0x94>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d111      	bne.n	800233e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b06      	cmp	r3, #6
 800232a:	d010      	beq.n	800234e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233c:	e007      	b.n	800234e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40000400 	.word	0x40000400

08002364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0202 	mvn.w	r2, #2
 8002398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f998 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f98b 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f99a 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0204 	mvn.w	r2, #4
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f972 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f965 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f974 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d020      	beq.n	8002460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0208 	mvn.w	r2, #8
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2204      	movs	r2, #4
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f94c 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f93f 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f94e 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d020      	beq.n	80024ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0210 	mvn.w	r2, #16
 800247c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2208      	movs	r2, #8
 8002482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f926 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f919 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f928 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fea0 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fa6f 	bl	80029d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8f8 	bl	8002708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0220 	mvn.w	r2, #32
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fa42 	bl	80029c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_TIM_ConfigClockSource+0x1c>
 800255c:	2302      	movs	r3, #2
 800255e:	e0b4      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x186>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800257e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002598:	d03e      	beq.n	8002618 <HAL_TIM_ConfigClockSource+0xd4>
 800259a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259e:	f200 8087 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	f000 8086 	beq.w	80026b6 <HAL_TIM_ConfigClockSource+0x172>
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d87f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b70      	cmp	r3, #112	; 0x70
 80025b2:	d01a      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0xa6>
 80025b4:	2b70      	cmp	r3, #112	; 0x70
 80025b6:	d87b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b60      	cmp	r3, #96	; 0x60
 80025ba:	d050      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x11a>
 80025bc:	2b60      	cmp	r3, #96	; 0x60
 80025be:	d877      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b50      	cmp	r3, #80	; 0x50
 80025c2:	d03c      	beq.n	800263e <HAL_TIM_ConfigClockSource+0xfa>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d873      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d058      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x13a>
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d86f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b30      	cmp	r3, #48	; 0x30
 80025d2:	d064      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x15a>
 80025d4:	2b30      	cmp	r3, #48	; 0x30
 80025d6:	d86b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d060      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x15a>
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d867      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05c      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x15a>
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d05a      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x15a>
 80025e8:	e062      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f000 f96a 	bl	80028d2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800260c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	609a      	str	r2, [r3, #8]
      break;
 8002616:	e04f      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f000 f953 	bl	80028d2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263a:	609a      	str	r2, [r3, #8]
      break;
 800263c:	e03c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	461a      	mov	r2, r3
 800264c:	f000 f8ca 	bl	80027e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2150      	movs	r1, #80	; 0x50
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f921 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 800265c:	e02c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	461a      	mov	r2, r3
 800266c:	f000 f8e8 	bl	8002840 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2160      	movs	r1, #96	; 0x60
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f911 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 800267c:	e01c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	f000 f8aa 	bl	80027e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2140      	movs	r1, #64	; 0x40
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f901 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 800269c:	e00c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f000 f8f8 	bl	800289e <TIM_ITRx_SetConfig>
      break;
 80026ae:	e003      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e000      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
	...

0800271c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <TIM_Base_SetConfig+0xc0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d007      	beq.n	8002744 <TIM_Base_SetConfig+0x28>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d003      	beq.n	8002744 <TIM_Base_SetConfig+0x28>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <TIM_Base_SetConfig+0xc4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d108      	bne.n	8002756 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <TIM_Base_SetConfig+0xc0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0x52>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x52>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <TIM_Base_SetConfig+0xc4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <TIM_Base_SetConfig+0xc0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d103      	bne.n	80027b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]
  }
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40000400 	.word	0x40000400

080027e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	f023 0201 	bic.w	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f023 030a 	bic.w	r3, r3, #10
 8002820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f023 0210 	bic.w	r2, r3, #16
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800286a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	031b      	lsls	r3, r3, #12
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800287c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	621a      	str	r2, [r3, #32]
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 0307 	orr.w	r3, r3, #7
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	021a      	lsls	r2, r3, #8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	609a      	str	r2, [r3, #8]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002924:	2302      	movs	r3, #2
 8002926:	e041      	b.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d004      	beq.n	8002980 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10c      	bne.n	800299a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40000400 	.word	0x40000400

080029c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <__errno>:
 80029e4:	4b01      	ldr	r3, [pc, #4]	; (80029ec <__errno+0x8>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000014 	.word	0x20000014

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	2600      	movs	r6, #0
 80029f4:	4d0c      	ldr	r5, [pc, #48]	; (8002a28 <__libc_init_array+0x38>)
 80029f6:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <__libc_init_array+0x3c>)
 80029f8:	1b64      	subs	r4, r4, r5
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	f000 f8a2 	bl	8002b48 <_init>
 8002a04:	2600      	movs	r6, #0
 8002a06:	4d0a      	ldr	r5, [pc, #40]	; (8002a30 <__libc_init_array+0x40>)
 8002a08:	4c0a      	ldr	r4, [pc, #40]	; (8002a34 <__libc_init_array+0x44>)
 8002a0a:	1b64      	subs	r4, r4, r5
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08002b90 	.word	0x08002b90
 8002a2c:	08002b90 	.word	0x08002b90
 8002a30:	08002b90 	.word	0x08002b90
 8002a34:	08002b94 	.word	0x08002b94

08002a38 <malloc>:
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <malloc+0xc>)
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	f000 b80b 	b.w	8002a58 <_malloc_r>
 8002a42:	bf00      	nop
 8002a44:	20000014 	.word	0x20000014

08002a48 <memset>:
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4402      	add	r2, r0
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d100      	bne.n	8002a52 <memset+0xa>
 8002a50:	4770      	bx	lr
 8002a52:	f803 1b01 	strb.w	r1, [r3], #1
 8002a56:	e7f9      	b.n	8002a4c <memset+0x4>

08002a58 <_malloc_r>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	1ccd      	adds	r5, r1, #3
 8002a5c:	f025 0503 	bic.w	r5, r5, #3
 8002a60:	3508      	adds	r5, #8
 8002a62:	2d0c      	cmp	r5, #12
 8002a64:	bf38      	it	cc
 8002a66:	250c      	movcc	r5, #12
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	4606      	mov	r6, r0
 8002a6c:	db01      	blt.n	8002a72 <_malloc_r+0x1a>
 8002a6e:	42a9      	cmp	r1, r5
 8002a70:	d903      	bls.n	8002a7a <_malloc_r+0x22>
 8002a72:	230c      	movs	r3, #12
 8002a74:	6033      	str	r3, [r6, #0]
 8002a76:	2000      	movs	r0, #0
 8002a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7a:	f000 f857 	bl	8002b2c <__malloc_lock>
 8002a7e:	4921      	ldr	r1, [pc, #132]	; (8002b04 <_malloc_r+0xac>)
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	4614      	mov	r4, r2
 8002a84:	b99c      	cbnz	r4, 8002aae <_malloc_r+0x56>
 8002a86:	4f20      	ldr	r7, [pc, #128]	; (8002b08 <_malloc_r+0xb0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b923      	cbnz	r3, 8002a96 <_malloc_r+0x3e>
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f000 f83c 	bl	8002b0c <_sbrk_r>
 8002a94:	6038      	str	r0, [r7, #0]
 8002a96:	4629      	mov	r1, r5
 8002a98:	4630      	mov	r0, r6
 8002a9a:	f000 f837 	bl	8002b0c <_sbrk_r>
 8002a9e:	1c43      	adds	r3, r0, #1
 8002aa0:	d123      	bne.n	8002aea <_malloc_r+0x92>
 8002aa2:	230c      	movs	r3, #12
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	6033      	str	r3, [r6, #0]
 8002aa8:	f000 f846 	bl	8002b38 <__malloc_unlock>
 8002aac:	e7e3      	b.n	8002a76 <_malloc_r+0x1e>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	1b5b      	subs	r3, r3, r5
 8002ab2:	d417      	bmi.n	8002ae4 <_malloc_r+0x8c>
 8002ab4:	2b0b      	cmp	r3, #11
 8002ab6:	d903      	bls.n	8002ac0 <_malloc_r+0x68>
 8002ab8:	6023      	str	r3, [r4, #0]
 8002aba:	441c      	add	r4, r3
 8002abc:	6025      	str	r5, [r4, #0]
 8002abe:	e004      	b.n	8002aca <_malloc_r+0x72>
 8002ac0:	6863      	ldr	r3, [r4, #4]
 8002ac2:	42a2      	cmp	r2, r4
 8002ac4:	bf0c      	ite	eq
 8002ac6:	600b      	streq	r3, [r1, #0]
 8002ac8:	6053      	strne	r3, [r2, #4]
 8002aca:	4630      	mov	r0, r6
 8002acc:	f000 f834 	bl	8002b38 <__malloc_unlock>
 8002ad0:	f104 000b 	add.w	r0, r4, #11
 8002ad4:	1d23      	adds	r3, r4, #4
 8002ad6:	f020 0007 	bic.w	r0, r0, #7
 8002ada:	1ac2      	subs	r2, r0, r3
 8002adc:	d0cc      	beq.n	8002a78 <_malloc_r+0x20>
 8002ade:	1a1b      	subs	r3, r3, r0
 8002ae0:	50a3      	str	r3, [r4, r2]
 8002ae2:	e7c9      	b.n	8002a78 <_malloc_r+0x20>
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	6864      	ldr	r4, [r4, #4]
 8002ae8:	e7cc      	b.n	8002a84 <_malloc_r+0x2c>
 8002aea:	1cc4      	adds	r4, r0, #3
 8002aec:	f024 0403 	bic.w	r4, r4, #3
 8002af0:	42a0      	cmp	r0, r4
 8002af2:	d0e3      	beq.n	8002abc <_malloc_r+0x64>
 8002af4:	1a21      	subs	r1, r4, r0
 8002af6:	4630      	mov	r0, r6
 8002af8:	f000 f808 	bl	8002b0c <_sbrk_r>
 8002afc:	3001      	adds	r0, #1
 8002afe:	d1dd      	bne.n	8002abc <_malloc_r+0x64>
 8002b00:	e7cf      	b.n	8002aa2 <_malloc_r+0x4a>
 8002b02:	bf00      	nop
 8002b04:	20000104 	.word	0x20000104
 8002b08:	20000108 	.word	0x20000108

08002b0c <_sbrk_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	2300      	movs	r3, #0
 8002b10:	4d05      	ldr	r5, [pc, #20]	; (8002b28 <_sbrk_r+0x1c>)
 8002b12:	4604      	mov	r4, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	602b      	str	r3, [r5, #0]
 8002b18:	f7fe fc18 	bl	800134c <_sbrk>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_sbrk_r+0x1a>
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_sbrk_r+0x1a>
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	2000018c 	.word	0x2000018c

08002b2c <__malloc_lock>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	; (8002b34 <__malloc_lock+0x8>)
 8002b2e:	f000 b809 	b.w	8002b44 <__retarget_lock_acquire_recursive>
 8002b32:	bf00      	nop
 8002b34:	20000194 	.word	0x20000194

08002b38 <__malloc_unlock>:
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <__malloc_unlock+0x8>)
 8002b3a:	f000 b804 	b.w	8002b46 <__retarget_lock_release_recursive>
 8002b3e:	bf00      	nop
 8002b40:	20000194 	.word	0x20000194

08002b44 <__retarget_lock_acquire_recursive>:
 8002b44:	4770      	bx	lr

08002b46 <__retarget_lock_release_recursive>:
 8002b46:	4770      	bx	lr

08002b48 <_init>:
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	bf00      	nop
 8002b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4e:	bc08      	pop	{r3}
 8002b50:	469e      	mov	lr, r3
 8002b52:	4770      	bx	lr

08002b54 <_fini>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr
